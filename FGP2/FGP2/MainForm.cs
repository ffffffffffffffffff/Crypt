//#define TEST_MODE                                                             // Don't leave TEST_MODE ON
//#define STATISTICS
//#define VERBOSE_DEBUG
#define EXPORT                                                                  // Limits key size to 56 bits to avoid running afoul of export regulations

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Security.Cryptography;
using System.Diagnostics;
using System.Net.NetworkInformation;


namespace FGP2
{
    public partial class MainForm : Form
    {

        #region CONSTANTS

        private const string APP_NAME = "FGP (Good Privacy)    ";
        
        private const string VERSION = "V1.0.0";
        private const byte FGP2_VERSION_MAJOR = 1;
        private const byte FGP2_VERSION_MINOR = 0;
        private const byte FGP2_VERSION_BUILD = 0;

        private const int MAX_FILE_SIZE = 1000000;
        
        private const int MAX_DIR_LABEL_WIDTH = 240;
        private const int MAX_FILE_LABEL_WIDTH = 320;

        #endregion

        #region FGP_CONSTANTS

        private const int FGP2_BLOCK_256 = 256;
        private const uint FGP_POOL_SIZE_64K = 64 * 1024;
        private const int FGP2_KEY_128 = 128;                                   // End of SESSION key TRNs
        private const int FGP2_KEY_64 = 64;                                     // Compressed key block size
        private const int FGP2_MAC_START = 192;                                 // MAC is encrypted in bytes 192 to 223 of the root key
        private const int FGP2_TRN_START = 224;                                 // TRNs for match, count in bytes 224 - 255 of the root key 
        private const int FGP2_KEY_256 = 256;
        private const int FGP2_BLOCK = 1024;                                    // Block size for each block of encrypted text - 16 x 64 byte blocks of compressed SESSION key

        private const int ENCRYPT = 0;
        private const int DECRYPT = 1;

        #endregion

        #region Algorithm
        
        // To Encrypt:
        // 1  Generate ROOT key (256 bytes) from the PASSWORD and salt using FGP2_Generate_Root_Key()
        //    The same ROOT key is used for each block of a message
        //    A message block is 1024 bytes (16 blocks of 64 bytes)
        //    The ROOT key is expanded with 32 random bytes so it is different every time it is generated from the same password
        //    The random bytes are used to determine the number of times the ROOT key is rehashed before a HARDENED ROOT key is reached
        //    The hardening proces is slow, about 2s on an average computer (2.6GHz, 32 bit, Dual core).
        //    Hardening makes a brute force attack on the password very slow
        // 2  Generate 256 TRNs (SESSION key) using FGP_Generate_TRN().  Every message block of 16 x 64 bytes uses a new 256 byte block of TRNs (SESSION key)
        // 3  The SESSION key XOR HARDENED ROOT key is transmitted to the receiver who must know the PASSWORD or a shared secret to reveal it
        //    This is effectively a one-time pad (the SESSION key is random) being sent to the receiver who can derive the HARDENED ROOT key
        // 4  Initialise Salsa20 from 64 bytes compressed to 32 bytes from the SESSION key
        // 5  XOR 128 bytes of Salasa20 PRN with the first 128 bytes of the SESSION key to get an EXPANDED key (128 bytes)
        // 6  Compress 128 bytes of the EXPANDED key to 64 bytes of MESSAGE key using SHA-512
        // 7  Encrypt message using MESSAGE key
        // 8  Loop around from 5 until a new SESSION key is required (after 16 message blocks of 64 bytes have been encrypted).
        // 9  Repeat until message is sent.

        // Security:
        // Key security elements of FGP are:
        // 1  Hardening the ROOT key so that it is different each time it is generated (each session)
        // 2  Randomly generated SESSION key provides forward secrecy.  
        // 3  Using an XOR combination of Salsa20 and hashing to expand the SESSION key prevents simple stream cipher attacks
        // 4  Compressing the EXPANDED key prevents a CPA attack on the SESSION key and hence ROOT key
        

        // TRN format:
        // 000 - 127    128 bytes for root key OTP
        // 128 - 191    64 bytes for Salsa20 IV
        // 192 - 223    32 byte MAC
        // 224 - 255    32 bytes (16 x 2 byte pairs) collision match / counts for hardening ROOT key
        
        #endregion

        #region To Do List
        // TTD - P
        // 1    FGP Version (M.m.b) into encrypted text without causing a leak.
        // 2    DONE Move MAC and TRNs and use compression hash on Salsa IV
        // 3    DONE RANDOM message generator that doesn't leak password
        // 4    static variables where possible
        // 5    DONE Clear up arrays after use
        
        #endregion
        
        #region Arrays

        byte[] init_line = new byte[32] {                                       // Initial array start
                 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
                16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31
                };

        byte[,] startline = new byte[32, 8]                                     // Initial array 
            {
#if TEST_MODE
                // Non-random starting point for test    
                {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07},
                {0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F},
                {0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17},
                {0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F},
                {0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27},
                {0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F},
                {0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37},
                {0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F},

                {0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47},
                {0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F},
                {0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57},
                {0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F},
                {0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67},
                {0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F},
                {0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77},
                {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F},

                {0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87},
                {0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F},
                {0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97},
                {0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F},
                {0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7},
                {0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF},
                {0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7},
                {0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF},

                {0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7},
                {0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF},
                {0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7},
                {0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF},
                {0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7},
                {0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF},
                                    {0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7},
                {0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF},

#else                
                // True random starting point
                {243, 207,  30, 166,  84,  18, 106, 143},
                {195, 219, 107, 249, 173, 161, 134,  59},
                {220,  12, 110,  15, 119, 236,  53,  39},
                {  5,  25, 117, 177, 237, 133, 153, 136},
                {100,  52, 222, 187, 198, 105, 230,  82},
                {245,  87, 188, 102,  54,  81, 174,   4},
                { 93, 155, 226, 128,  28, 132,   9, 146},
                {144,  67, 101,  71, 169,  34,  13, 142},

                {114,  80,   0,  62,  40, 186, 238, 182},
                {180, 170, 108, 248, 130,  46,  43, 135},
                {232, 115,  10, 223, 214, 129,  77, 172},
                {145, 120,  88, 239,  42, 227, 229,  35},
                {179,  61, 202, 192, 190, 206,  47, 255},
                {203,  75,  91, 231,  63,  51, 111,  94},
                {178, 193,  78, 150, 103,  50, 158, 225},
                {116,  41,  21, 224,  69, 217, 157,   1},
                 
                {11,   86,  85, 171, 215, 151,  95, 254},
                {251,  79, 252, 204, 235,  76, 168, 221},
                {123, 211,  65, 140,  57,  97, 113, 191},
                {138, 112, 104,  17, 218,   2,  90, 234},
                {183,  37,  14,   7, 167, 160,  31, 154},
                {125, 233, 152, 194,  29, 126, 244,  27},
                { 55, 210, 201, 32,   83,  70, 147, 199},
                {165,  72, 250, 162,  45,  56,  26, 228},
                
                {247, 196,  64, 118, 208, 213,  36,  73},
                {185,   8, 127, 163, 176,  38, 164,  68},
                {048,  33, 212,  99,  60, 240, 216, 109},
                { 89,  58,  49, 121,   6, 124, 242, 141},
                {205, 241, 181,  19,  24, 131,  23,  98},
                { 96,  74, 139,  22, 175,  44,  16, 149},
                {200, 209,  66, 246, 189, 122,   3, 197},
                {159, 137,  92, 184, 148,  20, 253, 156},

#endif
            };

        #endregion

        #region Global variables
        // Global variables

        
        byte[] key = new byte[256 * FGP2_KEY_256];                              // Key array for fast writing
        byte[] line = new byte[256];                                            // Array used for key calculation
        byte[] random1_array = new byte[256];                                   // Array for random 1 generation
        byte[] random3_array = new byte[64];                                    // Array for random 3 from salsa20
        int random1_index = 0;                                                  // Index for random1 array so we get more data when this runs out
        int random3_index = 0;                                                  // Index for random3 array so we get more data when this runs out
        int random4_index = 0;                                                  // Index for random4 array so we get more data when this runs out

        byte[] entropy_pool = new byte[FGP_POOL_SIZE_64K];                      // Entropy pool from RAM size and CPU times

        uint max_entropy_pointer = 0;                                           // Index to largest written byte of entropy pool (maxes out at 65504)
        uint entropy_pointer = 0;                                               // Index to last written byte of entropy pool
        uint entropy_read = 0;                                                  // Entropy read index
        byte Last_RAM_entropy = 0;                                              // Static store of last value
        byte Last_CPU_entropy = 0;                                              // Static store of last value
        byte Last_X_entropy = 0;                                                // Static store of last value
        byte Last_Y_entropy = 0;                                                // Static store of last value
        byte[] entropy_hash = new byte[34];                                     // Static store of entropy hash - rehashed continuously

//        byte[] RAM = new byte[256];                                             // TESTONLY just for testing
//        byte[] CPU = new byte[256];
//        byte[] BOTH = new byte[256];
//        byte[] NORM = new byte[256];

        uint a, b, c;
        uint x, y, z;
        uint random_count1 = 0;
        uint random_count2 = 0;
        uint random_count3 = 0;
        uint random_count4 = 0;
        uint random_count9 = 0;

#if STATISTICS
        long[] distribution = new long[256];                                    // Test array for distribution
        byte last_1 = 0;                                                        // Last byte for doublet checks
        byte last_2 = 0;
        byte last_3 = 0;
        byte last_4 = 0;
        uint doublet_count_1 = 0;                                               // Doublet counts
        uint doublet_count_2 = 0;
        uint doublet_count_3 = 0;
        uint doublet_count_4 = 0;
        uint random4_discard_doublet;                                           // Random 4 analysis
        uint random4_discard_boring;
#endif

        byte counter = 0;
        uint random2;

        byte[][] PasswordHashArray = new byte[256][];                           // Array of 256 possible password hashes
        bool PasswordEntered = false;
        uint TRN_reuse = 0;                                                     // Counter for TRN block use

        bool encrypting = false;                                                // Block key read when encrypting
        bool encryptFileMode = false;                                           // True if user selects file to encrypt
        bool decryptFileMode = false;                                           // True if user selects file to decrypt
        string openEncryptFileName = "";                                        // Name of file which user selected to encrypt
        string openDecryptFileName = "";                                        // Name of file which user selected to decrypt
        string saveDecryptFileName; 
        
        BinaryWriter saveEncryptFileWriter = null;                              // Streamwriter of the encrypted file (output after encrypt button is pressed)
        BinaryWriter saveDecryptFileWriter = null;                              // Streamwriter of the decrypted file (output after decrypt button is pressed)
        



        #endregion

        #region FGP0_Global_data

        byte[] FGP2_Root_Key = new byte[FGP2_KEY_256 * 4];                      // 2048 bit root key (array of 4) 4 x 64B (1024b + 192b for Salsa20 IV + 256b for MAC + 512b spare)
        byte[] FGP2_Hardened_Root_Key = new byte[FGP2_KEY_256];                 // 2048 bit root key 4 x 64B (1024b + 192b for Salsa20 IV + 256b for MAC + 512b spare)
        byte[] FGP2_TRNs = new byte[FGP2_KEY_256];                              // Array of 256 TRNs from TRN key
        byte[] FGP2_Root_Key_OTP = new byte[FGP2_KEY_256];                      // Array of 256 root key ^ TRNs OTP
        byte[] FGP2_Session_Key = new byte[FGP2_KEY_128];                       // Array of 128 byte session key
        byte[] FGP2_Message_Key = new byte[FGP2_BLOCK];                         // Array of 256 byte message key

                
        // Salt array for initial salting of password.  Each row contains 0 - 255 in a random permutation.  Scan down vertically for 64 bytes of salt.   
        // Tested 29/4/2015 that each row contains 0 - 255 only.
	    private static byte [] Salt = 
		{
		    // Salt rows 1-16																						17
		    0xAB, 0x64, 0xDA, 0x81, 0xB7, 0x0D, 0xA2, 0x06, 0x11, 0x65, 0x84, 0x43, 0xEB, 0x88, 0x47, 0x44, 0xFD, 0x7D, 0xC2, 0x29, 0x85, 0x61, 0x6C, 0xE3, 0x10, 0x55, 0x18, 0x8B, 0x5B, 0xD9, 0xD6, 0xAF, 0x7A, 0x42, 0x19, 0x4B, 0x5A, 0x2F, 0xD5, 0x36, 0xEE, 0x5C, 0xC6, 0xF2, 0xB2, 0xAE, 0x12, 0x4F, 0x1B, 0x49, 0xF5, 0x17, 0xB4, 0xD7, 0x60, 0x1F, 0xCD, 0xB9, 0xD8, 0x3C, 0x9B, 0x53, 0x98, 0x13, 0x1E, 0x95, 0x0E, 0x20, 0x0F, 0x34, 0x5D, 0xC7, 0xDF, 0xC4, 0xA0, 0xE1, 0x2E, 0x46, 0x0B, 0xEF, 0xA5, 0xE9, 0x38, 0x14, 0x4D, 0xE6, 0x66, 0x99, 0x02, 0x52, 0x07, 0x78, 0x21, 0xF9, 0x2C, 0xA7, 0x4C, 0x91, 0xCF, 0x76, 0x58, 0x89, 0x4A, 0x62, 0xA8, 0xEC, 0x31, 0x7F, 0x54, 0x74, 0x3E, 0x2A, 0x3F, 0x97, 0x04, 0xF1, 0x94, 0xAD, 0x37, 0xD1, 0x69, 0x35, 0x7E, 0x41, 0xB1, 0xB6, 0xC9, 0x9A, 0x8A, 0xB0, 0x6D, 0x16, 0x24, 0x92, 0xF3, 0x40, 0xDD, 0xCC, 0xD4, 0x8F, 0xEA, 0xE5, 0x82, 0x90, 0xFC, 0xF7, 0x27, 0xE4, 0xFA, 0xBC, 0x3B, 0xED, 0x2D, 0xD3, 0xD0, 0xDE, 0x93, 0xFB, 0x77, 0xA9, 0x03, 0x4E, 0x80, 0x2B, 0x05, 0xCA, 0xE0, 0xC0, 0x30, 0x22, 0xBF, 0x63, 0x33, 0xDB, 0x1C, 0x32, 0x56, 0x6B, 0xCE, 0xE8, 0x01, 0x26, 0xF8, 0x5E, 0xC1, 0x25, 0xB5, 0xFE, 0x96, 0xBA, 0x8C, 0xF6, 0x6F, 0xBE, 0x1D, 0xAC, 0x9D, 0x70, 0x8D, 0x23, 0x6A, 0xE7, 0xA4, 0xA3, 0x45, 0xA6, 0x5F, 0xBB, 0x1A, 0x67, 0x7C, 0x83, 0x75, 0x0C, 0x09, 0xCB, 0x3D, 0xDC, 0x59, 0xB8, 0x73, 0x87, 0xFF, 0x3A, 0x48, 0x50, 0x15, 0x9E, 0x6E, 0x9F, 0x79, 0xD2, 0x0A, 0xF0, 0xB3, 0x7B, 0x00, 0x28, 0x39, 0xA1, 0x68, 0x51, 0x86, 0xC5, 0xC3, 0xAA, 0xC8, 0x08, 0x57, 0xF4, 0x72, 0x9C, 0xBD, 0x8E, 0x71, 0xE2, 
		    0x6A, 0x28, 0x5A, 0xF7, 0xEF, 0x22, 0xF1, 0x7E, 0xEA, 0x20, 0x2E, 0xDB, 0xF2, 0x53, 0xDC, 0x73, 0xCE, 0xF3, 0xCB, 0x05, 0x64, 0x29, 0xB3, 0x5F, 0xCD, 0x66, 0x35, 0xC4, 0x1E, 0xD7, 0x1B, 0xCF, 0xC1, 0x37, 0x52, 0x78, 0xE0, 0xBC, 0x58, 0xA1, 0x21, 0x10, 0x68, 0x4C, 0xFF, 0x50, 0x63, 0x3E, 0x1F, 0x33, 0x96, 0xC6, 0x46, 0xE5, 0x51, 0xFB, 0x7A, 0x55, 0x89, 0x17, 0xEC, 0x45, 0x41, 0xC8, 0x25, 0x24, 0x65, 0x93, 0xD4, 0x40, 0x85, 0x48, 0x84, 0x12, 0x9B, 0xD1, 0x80, 0x32, 0x08, 0xCA, 0xBF, 0x61, 0xFC, 0x4F, 0x47, 0xD2, 0x99, 0x59, 0x27, 0x23, 0x6C, 0x2A, 0xFA, 0x31, 0x56, 0x94, 0xAE, 0x5D, 0xC9, 0xC2, 0x71, 0x34, 0x8B, 0x5E, 0xA9, 0x81, 0xEB, 0xB5, 0x83, 0x30, 0xB4, 0x7D, 0x15, 0xB8, 0x82, 0xF5, 0xB9, 0x4E, 0x2F, 0x26, 0xFE, 0x16, 0x92, 0x04, 0x4D, 0x6B, 0xAD, 0xDD, 0x79, 0xDA, 0xD6, 0xB1, 0x4B, 0x8E, 0x6F, 0xF4, 0xA4, 0x5C, 0xA8, 0xA3, 0xDF, 0xA0, 0x9D, 0x6E, 0xBE, 0xD8, 0x74, 0x5B, 0x2D, 0x2C, 0xAC, 0xD9, 0x01, 0x44, 0x98, 0x2B, 0x9E, 0x76, 0x0B, 0xFD, 0x36, 0x09, 0x14, 0x77, 0xE9, 0x75, 0x11, 0xA5, 0x3C, 0xCC, 0x3B, 0x88, 0xAB, 0x67, 0xC5, 0x8F, 0xBB, 0x8A, 0x4A, 0x18, 0x06, 0x7C, 0x70, 0x91, 0xA7, 0x57, 0x86, 0x3A, 0x0A, 0xBD, 0xB0, 0x0E, 0x72, 0xE7, 0xAF, 0xBA, 0xE2, 0x00, 0x90, 0x9C, 0xE4, 0x69, 0x7B, 0x49, 0x9A, 0x9F, 0xE1, 0x1C, 0xE8, 0xC0, 0x03, 0x0C, 0xC3, 0xD5, 0x60, 0xF9, 0xA2, 0xB6, 0x13, 0xAA, 0xD3, 0x07, 0xF8, 0x43, 0x1D, 0x8D, 0xF6, 0x19, 0x7F, 0x6D, 0xB7, 0x95, 0x42, 0xC7, 0xE6, 0x87, 0xA6, 0x0D, 0x0F, 0x62, 0x3D, 0x8C, 0x97, 0xF0, 0x02, 0xED, 0x38, 0xD0, 0x3F, 0x54, 0x39, 0x1A, 0xE3, 0xDE, 0xEE, 0xB2, 
		    0xC5, 0x49, 0x72, 0xEC, 0x74, 0xED, 0x80, 0xD6, 0x7D, 0x52, 0xD5, 0xF7, 0x3A, 0x9F, 0x08, 0xA7, 0x50, 0xC4, 0xE5, 0x39, 0xA3, 0xCD, 0xD4, 0xEF, 0x31, 0x70, 0x89, 0x42, 0xC6, 0x60, 0x64, 0xEE, 0x24, 0xAE, 0x37, 0x67, 0x03, 0x84, 0xC0, 0x9E, 0x2F, 0xFB, 0xB7, 0xFF, 0xD2, 0x8D, 0xD0, 0xF3, 0xF6, 0xD1, 0x04, 0x6C, 0xB2, 0xD7, 0xE8, 0xF9, 0x23, 0xA5, 0xE9, 0xDF, 0xD9, 0x86, 0x73, 0x87, 0x40, 0x18, 0x3C, 0x46, 0x7F, 0x41, 0xB4, 0x8B, 0x7A, 0x32, 0xC7, 0x1A, 0xA8, 0x78, 0xBD, 0x16, 0x79, 0x45, 0x17, 0xCE, 0x26, 0x43, 0xB8, 0xAB, 0x05, 0x98, 0x83, 0x9A, 0xB6, 0x1D, 0x38, 0xE0, 0x30, 0xEB, 0x77, 0x65, 0x0D, 0xB5, 0x75, 0xCB, 0xFE, 0x21, 0xF4, 0xFC, 0x44, 0x1F, 0xD3, 0x0B, 0xC1, 0x8C, 0x5E, 0x92, 0xC3, 0xDB, 0x9C, 0x56, 0xCA, 0xAA, 0xB9, 0xFA, 0x0E, 0xA9, 0x13, 0xAD, 0x5A, 0x10, 0xA6, 0x93, 0xE3, 0x8F, 0xBC, 0x0F, 0x47, 0xC9, 0x19, 0x5D, 0x6F, 0xBE, 0x8A, 0xF0, 0x51, 0xE6, 0x2A, 0x33, 0xFD, 0x25, 0x59, 0x94, 0xF1, 0xE7, 0x4D, 0x7E, 0x1C, 0x01, 0x4C, 0xDE, 0x8E, 0x58, 0x61, 0x1B, 0xE4, 0xBF, 0xCF, 0x11, 0x3F, 0x3D, 0x99, 0x85, 0x88, 0x35, 0x4A, 0x68, 0xAC, 0x02, 0x4B, 0x97, 0xD8, 0x14, 0xE1, 0x0C, 0xB0, 0x2E, 0x81, 0x29, 0x28, 0x36, 0x12, 0x96, 0xBB, 0x48, 0xB3, 0x69, 0x90, 0x6D, 0x4F, 0xA2, 0x09, 0x9D, 0xA4, 0x5B, 0x63, 0xDD, 0x2C, 0xF2, 0x5C, 0xA1, 0xC8, 0x5F, 0x53, 0xDA, 0x1E, 0x3E, 0x6E, 0xDC, 0x91, 0x3B, 0xEA, 0x22, 0x20, 0x57, 0x71, 0x66, 0x7B, 0xF5, 0x0A, 0x2D, 0xA0, 0xF8, 0x2B, 0xC2, 0xCC, 0xAF, 0x95, 0x76, 0x4E, 0x82, 0x7C, 0xB1, 0x06, 0x6B, 0x34, 0x00, 0x07, 0x55, 0xE2, 0x15, 0xBA, 0x9B, 0x62, 0x6A, 0x54, 0x27, 
		    0x88, 0x6C, 0x5E, 0xBE, 0xE9, 0xC6, 0x31, 0x8E, 0x27, 0x4A, 0x1C, 0x0F, 0x0B, 0x41, 0x9A, 0x24, 0xB9, 0x08, 0x4C, 0x05, 0x66, 0x3E, 0x4B, 0xE8, 0x63, 0x6D, 0xCA, 0xEF, 0x59, 0xAA, 0xD6, 0xA2, 0x4F, 0x5D, 0xE3, 0x55, 0x17, 0xFD, 0x89, 0x38, 0x84, 0x37, 0x57, 0x90, 0x54, 0xA8, 0x2E, 0x74, 0x14, 0xB4, 0xBB, 0x92, 0xC3, 0xA9, 0x19, 0x97, 0x9C, 0x73, 0xA1, 0x34, 0xDB, 0xDC, 0xAD, 0x79, 0xAC, 0x20, 0xDF, 0x22, 0x44, 0xC8, 0x98, 0xDE, 0x9F, 0x4D, 0x3C, 0x58, 0x61, 0x87, 0x51, 0x1A, 0x2B, 0xD7, 0x02, 0x33, 0xBD, 0x07, 0xF1, 0xE4, 0xED, 0x10, 0xE0, 0xD1, 0x3F, 0x21, 0x8C, 0xB8, 0x48, 0x69, 0x1B, 0x6F, 0x16, 0xF3, 0x83, 0x7A, 0x9E, 0x13, 0x91, 0xFE, 0xBA, 0x06, 0x94, 0x8F, 0xCB, 0x2C, 0x5B, 0xAB, 0x53, 0xB1, 0x80, 0x65, 0xB6, 0xD2, 0x9D, 0xE5, 0x39, 0x2A, 0xDA, 0xC1, 0xF7, 0x78, 0xC5, 0xC2, 0x77, 0x67, 0xF5, 0x36, 0x62, 0x2F, 0xAF, 0x03, 0xD0, 0x15, 0x4E, 0xFF, 0x5A, 0x0A, 0x52, 0xF8, 0xA0, 0x76, 0xA5, 0xC7, 0xE7, 0x5F, 0xD9, 0x0C, 0xEE, 0x50, 0x8B, 0x26, 0xF0, 0x00, 0x96, 0xAE, 0x71, 0xE2, 0x6E, 0x45, 0x1D, 0xCC, 0x5C, 0xB3, 0xFA, 0x32, 0x85, 0xCE, 0x1F, 0xCF, 0xF9, 0xDD, 0x12, 0x7C, 0x93, 0xB2, 0x42, 0xBC, 0x1E, 0x04, 0x7E, 0x0D, 0xD5, 0x25, 0x7F, 0xFB, 0xB5, 0x47, 0xCD, 0xEC, 0x01, 0x64, 0xF6, 0xE6, 0x7D, 0xC9, 0xB7, 0x56, 0x18, 0x72, 0xC4, 0xD8, 0xA3, 0x09, 0x46, 0xA4, 0x9B, 0xA7, 0x23, 0x11, 0x43, 0x29, 0x8D, 0x70, 0xBF, 0x6A, 0xD4, 0x28, 0x30, 0x99, 0xEA, 0xB0, 0x3D, 0x35, 0x0E, 0x7B, 0xF2, 0x86, 0x60, 0x2D, 0xD3, 0x75, 0x68, 0xE1, 0x49, 0xA6, 0x81, 0xFC, 0x82, 0x3A, 0x6B, 0xEB, 0x8A, 0x95, 0x3B, 0xC0, 0xF4, 0x40, 
		    0x51, 0x53, 0xC0, 0x44, 0x38, 0x8A, 0xA4, 0xA0, 0x14, 0x43, 0x1E, 0xBF, 0xB7, 0x30, 0xB4, 0x2C, 0x9A, 0xA7, 0x7A, 0xA6, 0x73, 0xFA, 0x04, 0x02, 0x0D, 0xD3, 0xA5, 0x17, 0x69, 0xB6, 0x74, 0x67, 0xC5, 0xEE, 0x19, 0x6A, 0x96, 0x34, 0xA9, 0x55, 0x0C, 0x21, 0xB8, 0xC7, 0x78, 0xE0, 0x4D, 0x27, 0x32, 0x8B, 0x09, 0x1B, 0xD7, 0x75, 0x40, 0x80, 0x82, 0x5D, 0x9F, 0xEC, 0x6F, 0xCF, 0x95, 0x41, 0xD2, 0xE2, 0xE3, 0x7B, 0xD5, 0x70, 0x22, 0x35, 0xF8, 0xEB, 0x29, 0x57, 0xE1, 0x5C, 0xF5, 0x6C, 0x7D, 0xA2, 0x9C, 0xFE, 0xF6, 0x07, 0xDE, 0xA8, 0x62, 0xFC, 0xE9, 0x47, 0x99, 0xF1, 0xFF, 0x83, 0xDA, 0x25, 0x2A, 0x4B, 0xF4, 0x20, 0x7F, 0x2B, 0x31, 0xAC, 0xCB, 0xA1, 0x89, 0x12, 0x71, 0x79, 0x01, 0x77, 0x88, 0x00, 0x50, 0x93, 0x1D, 0xE4, 0x9E, 0x58, 0x52, 0xD6, 0x48, 0x65, 0x08, 0x81, 0xED, 0x18, 0xD9, 0xD1, 0xC6, 0xAF, 0x64, 0x6D, 0xF3, 0x2D, 0xBE, 0xE8, 0xAD, 0x15, 0x1A, 0xE7, 0xC3, 0xF7, 0xB1, 0x36, 0xCE, 0x85, 0x3C, 0x42, 0xBB, 0xB3, 0x2F, 0x37, 0xB5, 0xDF, 0x2E, 0x8E, 0xCA, 0xFB, 0x1C, 0x63, 0x60, 0x72, 0xC2, 0x4E, 0x4F, 0x39, 0x8D, 0xB2, 0xD4, 0xCC, 0x94, 0x86, 0x5E, 0xC1, 0x03, 0xF0, 0xDD, 0x33, 0x3B, 0x06, 0x16, 0xC9, 0xAE, 0x4A, 0x9D, 0x8F, 0x97, 0x0F, 0xC4, 0x98, 0x6E, 0xEA, 0x10, 0xBA, 0xA3, 0x68, 0xDC, 0x4C, 0x66, 0x11, 0x9B, 0x45, 0xB0, 0x3D, 0xAB, 0x56, 0x0E, 0x46, 0x54, 0xEF, 0x6B, 0xBC, 0x5A, 0xBD, 0x49, 0xCD, 0xB9, 0x3A, 0xD8, 0x91, 0xF2, 0x1F, 0x26, 0xE6, 0xC8, 0x28, 0x87, 0x3E, 0x7E, 0xDB, 0x8C, 0x59, 0xF9, 0x92, 0xE5, 0x61, 0x0A, 0x0B, 0x84, 0xD0, 0x05, 0x5F, 0x3F, 0xFD, 0x7C, 0x5B, 0x76, 0x90, 0x24, 0xAA, 0x13, 0x23, 
		    0xA5, 0xCA, 0x20, 0x89, 0x7E, 0xF8, 0x9D, 0xE8, 0xB0, 0x9E, 0x7F, 0x1D, 0xA4, 0x57, 0x81, 0x88, 0xA8, 0x51, 0xE7, 0x08, 0x7A, 0x3D, 0x27, 0x77, 0xC1, 0xC4, 0xC9, 0x6F, 0x0F, 0xAE, 0xC8, 0x24, 0x10, 0x13, 0xEE, 0xF2, 0x43, 0x52, 0x3A, 0x55, 0xA3, 0x60, 0x82, 0xA6, 0x16, 0xC0, 0x35, 0xD7, 0xD6, 0xFF, 0x2A, 0xAB, 0x25, 0xFE, 0x06, 0x41, 0x85, 0x74, 0x3C, 0xF5, 0x19, 0xF9, 0x59, 0x34, 0xD2, 0x3B, 0x6B, 0xC3, 0xAD, 0x0C, 0xDB, 0x15, 0xBA, 0x95, 0xA2, 0x66, 0x0E, 0x67, 0xB4, 0xDE, 0x14, 0x56, 0xB7, 0x94, 0x09, 0xF1, 0x8F, 0x76, 0x05, 0x9F, 0x97, 0xFB, 0x1E, 0x58, 0x92, 0x73, 0x6A, 0x23, 0xC5, 0x48, 0x26, 0x98, 0x44, 0x38, 0x5E, 0xB2, 0x86, 0xB8, 0x9C, 0x5C, 0x93, 0x0B, 0xA1, 0xE9, 0x9B, 0x4A, 0x9A, 0x2F, 0x8B, 0xD9, 0x2B, 0x71, 0x45, 0xBB, 0xFA, 0xCF, 0x7D, 0x1F, 0xAF, 0x75, 0xED, 0x3E, 0x29, 0x87, 0x2D, 0xFD, 0xB9, 0x21, 0x17, 0x47, 0xAC, 0x00, 0x36, 0x1C, 0xAA, 0x68, 0x39, 0x04, 0x46, 0xCC, 0x8D, 0x0A, 0x2C, 0x84, 0x22, 0xF0, 0x37, 0xC7, 0x8A, 0x62, 0x4F, 0x83, 0x91, 0x6D, 0x2E, 0xF3, 0xE1, 0x5A, 0xCD, 0x5B, 0xD5, 0xE4, 0xD3, 0xEA, 0x33, 0x8E, 0x99, 0xBF, 0x32, 0xC6, 0xCE, 0xEC, 0xCB, 0xC2, 0x40, 0xA7, 0x78, 0x8C, 0x61, 0xF4, 0x4C, 0x6C, 0xE3, 0xD0, 0xA9, 0x6E, 0x64, 0x70, 0x11, 0x30, 0xEB, 0xDA, 0xE0, 0x18, 0x5D, 0xB3, 0x31, 0xE5, 0x63, 0x4B, 0x49, 0x01, 0xBD, 0x42, 0x03, 0xD1, 0xBC, 0x50, 0x79, 0x4E, 0xB6, 0xB1, 0x7B, 0x5F, 0xFC, 0x72, 0x7C, 0xE6, 0xA0, 0x3F, 0xDD, 0x1A, 0x12, 0xD8, 0x54, 0x65, 0xB5, 0x4D, 0x90, 0xEF, 0x69, 0xF7, 0xDF, 0xE2, 0xBE, 0x80, 0x53, 0x1B, 0xDC, 0xF6, 0x07, 0x96, 0xD4, 0x28, 0x0D, 0x02, 
		    0xD8, 0x9E, 0x53, 0x17, 0x20, 0x55, 0x45, 0xF8, 0x02, 0xEC, 0xF0, 0x1C, 0x2C, 0xCD, 0x7E, 0x73, 0x76, 0x71, 0x96, 0x0A, 0xC1, 0x27, 0xAA, 0xE0, 0x9C, 0x4B, 0xFF, 0xC8, 0x36, 0x95, 0x5C, 0x31, 0xB3, 0xA1, 0x41, 0xA5, 0xF3, 0xA9, 0x67, 0xCF, 0xF5, 0xE1, 0xEE, 0x80, 0x5F, 0xB9, 0x5D, 0xF7, 0x8F, 0x06, 0x0E, 0x38, 0x13, 0xE8, 0xD2, 0x84, 0x5A, 0x69, 0x1D, 0x57, 0x1B, 0x4A, 0x3D, 0xCA, 0xD3, 0x99, 0x4C, 0x8A, 0x89, 0x08, 0x58, 0x97, 0xAF, 0x07, 0x5E, 0x28, 0x39, 0x52, 0x3A, 0xDC, 0x03, 0x3F, 0x1A, 0x26, 0xBF, 0xDB, 0xBD, 0xCB, 0xFB, 0xA2, 0x0B, 0xD1, 0xB6, 0x0F, 0x05, 0x34, 0xFA, 0xC9, 0x70, 0xEF, 0xFD, 0x21, 0xDA, 0x23, 0x37, 0xA7, 0xF9, 0xD4, 0xAC, 0x78, 0x6D, 0x22, 0x25, 0xBE, 0x3E, 0x48, 0x00, 0x33, 0x7D, 0x56, 0xE5, 0xEA, 0xE7, 0x2B, 0x86, 0xED, 0xD5, 0x8D, 0xC0, 0x3C, 0x8C, 0x16, 0x2F, 0xC7, 0x11, 0xFE, 0xCE, 0x14, 0xD0, 0xF1, 0x72, 0x61, 0x47, 0xE9, 0x74, 0xB0, 0xAE, 0x75, 0x7B, 0x66, 0xDE, 0x24, 0x1F, 0x5B, 0xF4, 0x6C, 0x98, 0xA6, 0xE6, 0xF2, 0xA0, 0x64, 0x82, 0x88, 0x29, 0x40, 0x9A, 0x62, 0x32, 0x94, 0x15, 0x90, 0x9F, 0xDD, 0x30, 0xB7, 0xBC, 0x87, 0x2E, 0x4D, 0xE4, 0xB1, 0x42, 0xB5, 0x81, 0x09, 0x83, 0x79, 0x18, 0xD9, 0x6F, 0x9D, 0xB2, 0x51, 0x6A, 0xFC, 0x0C, 0xBA, 0x6E, 0x6B, 0xCC, 0xA3, 0xA4, 0x9B, 0x49, 0x54, 0x12, 0xB8, 0x46, 0xC2, 0x7F, 0xDF, 0xD6, 0x92, 0xAD, 0x60, 0xD7, 0xC3, 0xC4, 0x7C, 0x65, 0x4F, 0xAB, 0x0D, 0x4E, 0x8B, 0xE2, 0x35, 0x8E, 0xF6, 0xB4, 0x04, 0x77, 0x2A, 0x3B, 0xEB, 0x68, 0x59, 0x10, 0x2D, 0x44, 0x63, 0xA8, 0xC5, 0xE3, 0xC6, 0x01, 0x91, 0x43, 0x7A, 0x1E, 0x50, 0xBB, 0x19, 0x85, 0x93, 
		    0x64, 0xF1, 0x23, 0x3B, 0xDC, 0xA3, 0x0F, 0xC8, 0x6F, 0xBE, 0xEE, 0x2F, 0xCC, 0x1E, 0xD3, 0x69, 0xA8, 0x6A, 0x5E, 0x2C, 0x50, 0x0D, 0x52, 0x71, 0xED, 0x09, 0x4F, 0x75, 0x98, 0x0E, 0xAB, 0x21, 0x68, 0xBA, 0xF5, 0xAE, 0x9A, 0x25, 0x3F, 0xA5, 0x86, 0xF6, 0x77, 0x55, 0xF2, 0x72, 0x81, 0xF9, 0xE7, 0x9B, 0x53, 0x8E, 0x3D, 0xBB, 0xA7, 0x59, 0x4E, 0x37, 0x1B, 0xF3, 0xAA, 0x07, 0x87, 0x5F, 0x41, 0xCA, 0x6B, 0x5C, 0x7B, 0x2D, 0xB4, 0xC0, 0x20, 0x1A, 0xBF, 0x88, 0x04, 0xC3, 0x49, 0xBC, 0x4D, 0x3E, 0x80, 0xAF, 0x34, 0x73, 0x2B, 0x42, 0xE2, 0x82, 0x24, 0xE1, 0xC7, 0x27, 0xB3, 0x54, 0x39, 0xB8, 0x47, 0x5D, 0xD1, 0x8B, 0x13, 0x9C, 0xD2, 0xD9, 0x45, 0xA0, 0xD6, 0x06, 0x61, 0x83, 0xFB, 0xF7, 0x96, 0xCF, 0x18, 0x93, 0x63, 0x28, 0x00, 0x3C, 0x01, 0xF4, 0x32, 0x43, 0x62, 0x0B, 0x95, 0x5B, 0x2A, 0xB5, 0x1D, 0x7A, 0xC1, 0x58, 0x8C, 0xB1, 0xA2, 0xFC, 0xFA, 0xDF, 0x14, 0x11, 0x78, 0x44, 0xCD, 0xE5, 0x38, 0xB2, 0x7E, 0x0A, 0xB0, 0x79, 0x4C, 0x57, 0xE3, 0xBD, 0x9F, 0x99, 0x22, 0x40, 0x36, 0x65, 0xEF, 0x97, 0x19, 0x89, 0xEA, 0x60, 0xD0, 0xDE, 0xE9, 0x91, 0x46, 0x7F, 0xC9, 0x4A, 0x94, 0xE0, 0x8A, 0xB7, 0x26, 0xEC, 0x05, 0xF8, 0x5A, 0xDB, 0xFF, 0x1F, 0x48, 0x6C, 0x92, 0xA9, 0x29, 0xFD, 0xC4, 0x30, 0x12, 0xD7, 0xFE, 0x6D, 0xD4, 0x31, 0xA1, 0xC6, 0xB9, 0x90, 0xAD, 0x85, 0x84, 0x6E, 0x8D, 0xE6, 0xE4, 0x3A, 0x74, 0xC2, 0xDA, 0x7D, 0x1C, 0xC5, 0x33, 0x51, 0xD8, 0xD5, 0x9D, 0x4B, 0x17, 0xEB, 0xF0, 0xE8, 0x76, 0xA6, 0xDD, 0x7C, 0x08, 0x03, 0x8F, 0x10, 0xAC, 0x15, 0xA4, 0x56, 0x66, 0x35, 0x9E, 0xCE, 0xB6, 0x16, 0x0C, 0x70, 0x2E, 0xCB, 0x67, 0x02, 

		    0x74, 0x65, 0x79, 0x39, 0xC7, 0x49, 0xF8, 0xDB, 0x5B, 0x3C, 0xD0, 0x20, 0xD9, 0xBA, 0x32, 0x3A, 0x8F, 0x88, 0xB1, 0xD5, 0xD1, 0x91, 0x6F, 0xAF, 0xEE, 0x72, 0xC1, 0xF7, 0x2E, 0xB9, 0x57, 0xE1, 0x3B, 0x10, 0x6D, 0x4E, 0x47, 0x2B, 0xAE, 0xC9, 0x61, 0xDE, 0x89, 0x4D, 0x7B, 0xF2, 0x48, 0xE9, 0x80, 0x58, 0x62, 0x9A, 0xD2, 0x95, 0x81, 0x15, 0x82, 0xD6, 0x63, 0x9D, 0x52, 0x68, 0xF5, 0x1D, 0xA5, 0x8A, 0x59, 0x56, 0x5A, 0xAA, 0x3F, 0x25, 0xB8, 0xD7, 0xBB, 0x7F, 0x31, 0x19, 0x33, 0xE5, 0x37, 0xE0, 0xA2, 0x41, 0x0C, 0x22, 0x6E, 0x05, 0x93, 0xC6, 0x2F, 0x2C, 0xB3, 0xD3, 0x01, 0xCB, 0x09, 0x26, 0x13, 0xA1, 0x3E, 0x38, 0x50, 0x34, 0xBC, 0x06, 0x27, 0x54, 0xE2, 0xFC, 0x5E, 0xFF, 0x8D, 0x36, 0x16, 0x24, 0x85, 0xA3, 0xFD, 0xB7, 0x92, 0x9B, 0xF1, 0x0D, 0xC5, 0xF9, 0xCA, 0x9E, 0xB6, 0xAD, 0xE7, 0x45, 0xDC, 0x43, 0x55, 0x0E, 0xEA, 0x70, 0x08, 0x00, 0x78, 0x7E, 0x90, 0x8B, 0xA9, 0x1E, 0x84, 0x73, 0x8C, 0xE4, 0xEC, 0xF0, 0xEF, 0x1A, 0xE6, 0x11, 0x1C, 0x71, 0x21, 0xC0, 0x76, 0x0B, 0x5F, 0x7D, 0x0A, 0xB0, 0x40, 0x99, 0x30, 0x77, 0x12, 0x9F, 0x94, 0x1F, 0x6C, 0x87, 0xB2, 0xF4, 0x4C, 0x02, 0xB5, 0x2D, 0x69, 0x64, 0x8E, 0xB4, 0xFA, 0x7C, 0xE8, 0x5C, 0xCF, 0x7A, 0xCD, 0x2A, 0xA0, 0x18, 0xCC, 0x46, 0x44, 0x83, 0x9C, 0xA4, 0x4A, 0xFE, 0xF6, 0x04, 0xCE, 0xED, 0x1B, 0x67, 0xAB, 0xFB, 0x23, 0xDD, 0x03, 0xA8, 0xC2, 0x5D, 0x53, 0x4F, 0xBF, 0xAC, 0x07, 0x29, 0x35, 0x0F, 0xC8, 0xDA, 0x97, 0x60, 0xC3, 0x96, 0xDF, 0x75, 0xEB, 0xA6, 0xBD, 0xD4, 0xC4, 0xE3, 0xD8, 0x3D, 0x98, 0x66, 0xA7, 0x28, 0x4B, 0x6A, 0xBE, 0x14, 0xF3, 0x51, 0x86, 0x42, 0x17, 0x6B, 
		    0x28, 0x6A, 0x21, 0xF9, 0x70, 0x2D, 0x18, 0xD5, 0x95, 0x7F, 0xD7, 0x45, 0xD1, 0x25, 0x3A, 0x89, 0x38, 0x40, 0xF5, 0xC5, 0x7C, 0xAC, 0x26, 0x47, 0x72, 0x6F, 0x85, 0xEC, 0x6B, 0xD8, 0xBA, 0x22, 0x41, 0x81, 0x8E, 0x54, 0x15, 0x10, 0x39, 0x99, 0x55, 0x27, 0x65, 0x64, 0xB2, 0xCE, 0x24, 0x9D, 0x9F, 0xDC, 0x7B, 0xFE, 0xCC, 0x75, 0x84, 0x09, 0x49, 0xF2, 0x5E, 0x4B, 0x56, 0x36, 0x82, 0x3D, 0xC9, 0xBD, 0xFB, 0x29, 0xC0, 0xFC, 0xFF, 0xE0, 0x2C, 0x67, 0x2E, 0xBC, 0xB9, 0x79, 0x2B, 0xD9, 0xD0, 0x5A, 0xE5, 0xDF, 0x1C, 0x71, 0x33, 0xDA, 0xF0, 0x52, 0xBB, 0x4E, 0x62, 0xC2, 0xE3, 0xB8, 0x76, 0x02, 0x3B, 0x97, 0x93, 0xA3, 0xB7, 0x69, 0x46, 0xEE, 0x53, 0xBF, 0x8A, 0xA4, 0x90, 0x04, 0xEB, 0x1F, 0xB6, 0x8D, 0x63, 0x7E, 0x48, 0x80, 0xAE, 0xA0, 0x0D, 0x07, 0xA8, 0x16, 0x9A, 0x60, 0xAA, 0xD4, 0xED, 0x8B, 0x5B, 0xE1, 0xC7, 0xC4, 0xC3, 0x20, 0xE4, 0x08, 0xA7, 0x73, 0x31, 0x77, 0xDB, 0xD2, 0x66, 0x37, 0x9E, 0x3E, 0x83, 0xE8, 0x1D, 0xF7, 0x6C, 0xB3, 0x6D, 0xE2, 0x42, 0x8F, 0x86, 0x12, 0xEF, 0x0A, 0xB4, 0x13, 0xB5, 0xFA, 0x59, 0x92, 0x9B, 0xC6, 0x1B, 0x4C, 0x17, 0x87, 0xD3, 0x06, 0xF4, 0x11, 0x91, 0x51, 0xBE, 0x30, 0x3C, 0x0F, 0x88, 0xFD, 0x5D, 0x7A, 0xE6, 0x35, 0x94, 0xEA, 0x98, 0xCD, 0x0B, 0xA5, 0xE7, 0xB0, 0xAF, 0xDD, 0x68, 0xF1, 0x32, 0x6E, 0x4D, 0xE9, 0xF8, 0xCF, 0x2A, 0xF3, 0xAB, 0x58, 0xA6, 0x1E, 0x61, 0x8C, 0x2F, 0x1A, 0xF6, 0x23, 0x05, 0x4F, 0xDE, 0x0C, 0x44, 0xCA, 0x96, 0x5F, 0x78, 0x7D, 0x4A, 0x01, 0xC8, 0x00, 0xAD, 0x9C, 0x19, 0x3F, 0xC1, 0x74, 0xCB, 0x14, 0x43, 0xA2, 0xB1, 0xD6, 0x5C, 0xA1, 0x0E, 0x03, 0x57, 0x50, 0xA9, 0x34, 
		    0x2D, 0xB3, 0x10, 0x5E, 0x4C, 0x9C, 0x0F, 0x26, 0xB8, 0xF6, 0x30, 0xC3, 0xC6, 0x51, 0x14, 0x33, 0xF2, 0x94, 0xAE, 0x29, 0x89, 0xC7, 0xD1, 0xD9, 0x8D, 0x9B, 0xCA, 0xF3, 0x68, 0x5C, 0x75, 0xFA, 0xE0, 0xDF, 0xA8, 0x0C, 0x37, 0x42, 0x4B, 0x00, 0x3C, 0xDE, 0x95, 0xFE, 0xD8, 0xAF, 0x4D, 0x9E, 0x01, 0x27, 0xBF, 0xAC, 0xBA, 0x3E, 0xA7, 0xA3, 0xFB, 0x28, 0x38, 0x78, 0xFC, 0x3A, 0xC4, 0x13, 0x87, 0x06, 0xC5, 0x77, 0x07, 0xCC, 0x1E, 0x32, 0x4E, 0xB5, 0xB4, 0x3F, 0x61, 0x09, 0x12, 0x04, 0xC9, 0x1B, 0xB1, 0x69, 0x76, 0x7E, 0x2E, 0x43, 0x23, 0x83, 0xBD, 0x65, 0x80, 0x24, 0x03, 0xCE, 0xEF, 0x98, 0x5A, 0xC1, 0xA2, 0x6C, 0xDD, 0x81, 0x91, 0x97, 0xA5, 0x54, 0xF7, 0x17, 0xA9, 0x96, 0x6D, 0x3D, 0x11, 0xCF, 0x25, 0x08, 0x4A, 0x1F, 0x85, 0x44, 0x90, 0x52, 0xC8, 0x0A, 0x7D, 0xFD, 0x1C, 0x05, 0x8F, 0x64, 0xE8, 0xA1, 0x2C, 0x9D, 0x36, 0xBE, 0x79, 0x8B, 0xEC, 0x8C, 0x86, 0xBC, 0xD6, 0x5B, 0xD5, 0xB0, 0x39, 0x60, 0x47, 0xA4, 0x21, 0x50, 0x1A, 0x70, 0x22, 0xF5, 0xE4, 0xD0, 0xE6, 0x88, 0x6E, 0xD7, 0xB2, 0x71, 0x82, 0x46, 0xB7, 0xA0, 0x67, 0xE7, 0x8A, 0x72, 0x40, 0xAA, 0xAD, 0xB6, 0xC2, 0x16, 0xD4, 0x1D, 0x6B, 0x7C, 0x20, 0x15, 0x74, 0xDC, 0x56, 0xE5, 0x2A, 0xE2, 0x63, 0xF4, 0xF8, 0x92, 0xB9, 0xE3, 0x8E, 0xF9, 0xCD, 0x62, 0x53, 0x31, 0xE9, 0xED, 0x18, 0xCB, 0xBB, 0x7B, 0x35, 0xC0, 0xD3, 0x34, 0x45, 0x49, 0x41, 0x48, 0xEA, 0x0E, 0x0D, 0xA6, 0xAB, 0xFF, 0x57, 0x84, 0x66, 0xD2, 0x93, 0x7A, 0x99, 0x2F, 0xDA, 0xF1, 0x9F, 0x0B, 0x6A, 0x73, 0xEB, 0xDB, 0x3B, 0x5D, 0x58, 0xE1, 0x2B, 0x59, 0x19, 0x9A, 0x6F, 0x5F, 0x55, 0x7F, 0x02, 0xF0, 0xEE, 0x4F, 
		    0x56, 0xB1, 0xF9, 0xDF, 0x86, 0x48, 0xC7, 0xFD, 0xA4, 0xB5, 0xA9, 0xE8, 0x7E, 0xD2, 0x7D, 0xB3, 0x31, 0x74, 0xD7, 0xDA, 0xAF, 0x3D, 0x5F, 0xF0, 0x40, 0x72, 0x1F, 0x68, 0x27, 0xB6, 0xF6, 0x3F, 0x4D, 0x22, 0x99, 0x2C, 0xAD, 0x43, 0x42, 0x64, 0x8A, 0xFB, 0x51, 0xFC, 0x29, 0xD3, 0x9A, 0xE0, 0x37, 0x79, 0x50, 0x30, 0x41, 0x66, 0x39, 0xA1, 0x59, 0xF4, 0x69, 0xAA, 0xC4, 0x58, 0xE7, 0x0E, 0x16, 0x6B, 0x87, 0xEB, 0x89, 0xEA, 0x4B, 0x88, 0xC9, 0xCE, 0x05, 0x1A, 0xB0, 0xCB, 0xF1, 0xC0, 0xA3, 0x36, 0x3C, 0x7F, 0xD9, 0xB8, 0xBD, 0x62, 0xC1, 0xDD, 0xE4, 0x0D, 0x2E, 0x1B, 0x4A, 0xD5, 0x61, 0x54, 0x03, 0x23, 0xA0, 0x3B, 0x11, 0xAC, 0x8B, 0xC5, 0xE6, 0xA7, 0x2F, 0xF3, 0xEF, 0xE5, 0x95, 0x73, 0x92, 0x06, 0x7A, 0xB2, 0x4E, 0xD1, 0x60, 0xDB, 0x6A, 0x5C, 0x55, 0x01, 0xFE, 0xB9, 0x84, 0x24, 0x94, 0x52, 0x18, 0x14, 0x38, 0x70, 0x77, 0x96, 0xE1, 0xD4, 0x49, 0x08, 0xD8, 0x15, 0x4F, 0x13, 0xBF, 0xF2, 0xA2, 0x6D, 0x3E, 0x6E, 0x80, 0x97, 0xF7, 0x44, 0xAE, 0xCF, 0x90, 0x9B, 0x19, 0x21, 0x07, 0x20, 0x6C, 0xE2, 0xEC, 0xCC, 0x8F, 0x9C, 0x04, 0x25, 0x2D, 0x76, 0x98, 0xEE, 0x1E, 0x78, 0xA8, 0x35, 0x65, 0xB7, 0xE3, 0x34, 0x3A, 0xC3, 0x1C, 0x5B, 0x46, 0x33, 0xA6, 0x71, 0xCD, 0xFF, 0xE9, 0x09, 0x93, 0xBA, 0x85, 0xED, 0x45, 0x32, 0xF5, 0xD0, 0xBC, 0x8E, 0xCA, 0x7B, 0xAB, 0xD6, 0x26, 0x7C, 0x47, 0x0C, 0xB4, 0x75, 0x5D, 0x8D, 0x6F, 0x4C, 0x0A, 0x9E, 0x2A, 0x0B, 0xBE, 0x57, 0x0F, 0x5A, 0xF8, 0x8C, 0x12, 0x00, 0x81, 0x1D, 0x67, 0x2B, 0xC8, 0x5E, 0x91, 0xC2, 0x17, 0x02, 0xFA, 0x53, 0x9D, 0xC6, 0xDE, 0x9F, 0x28, 0x10, 0xA5, 0xDC, 0x82, 0x83, 0x63, 0xBB, 
		    0x93, 0xEB, 0xF2, 0xE4, 0x39, 0x15, 0x3A, 0xC0, 0xA7, 0xCD, 0xA8, 0xD8, 0xB4, 0xF6, 0x8B, 0xFC, 0xE0, 0x86, 0x18, 0x4A, 0xA5, 0x63, 0xB7, 0xE9, 0x3E, 0x41, 0xE7, 0x6B, 0xC6, 0x51, 0x98, 0x3B, 0xD4, 0x57, 0x54, 0x7D, 0xC2, 0x94, 0xB6, 0x7B, 0x44, 0x16, 0xEE, 0xB1, 0x4D, 0x88, 0x67, 0x17, 0x30, 0xF4, 0x12, 0x6E, 0x2B, 0x2D, 0x5F, 0x82, 0x0A, 0x66, 0x5C, 0xFB, 0x14, 0x9C, 0x47, 0xBD, 0x60, 0x23, 0x35, 0x91, 0x9F, 0xC9, 0xFD, 0x1A, 0x29, 0x49, 0xBF, 0x00, 0xD5, 0xC7, 0x3D, 0x10, 0x7C, 0x9A, 0x07, 0xEF, 0x77, 0x73, 0x5D, 0xD2, 0x22, 0x21, 0x0D, 0xA2, 0x32, 0xDF, 0x28, 0xDD, 0x04, 0x1E, 0x3F, 0x26, 0x52, 0x20, 0x3C, 0xF5, 0x61, 0x75, 0x27, 0xDB, 0xB5, 0xD9, 0xC4, 0xB0, 0x72, 0x1C, 0x9D, 0x40, 0xB3, 0x8F, 0x48, 0xB8, 0x85, 0xE2, 0xB9, 0xCB, 0x5B, 0xC8, 0x95, 0xD1, 0x2E, 0xD7, 0xA9, 0x53, 0xBB, 0x06, 0x76, 0x55, 0x70, 0xC1, 0x92, 0x68, 0x4B, 0xC3, 0xDE, 0x4C, 0xD6, 0xDC, 0xD3, 0x74, 0xFE, 0x81, 0x6A, 0x9B, 0x80, 0x8C, 0x79, 0xE6, 0x99, 0xAF, 0x58, 0x96, 0x65, 0xE5, 0x42, 0x69, 0x7E, 0x0F, 0x0C, 0xCC, 0xF7, 0x5A, 0xF0, 0xFA, 0x0E, 0xA0, 0x64, 0xCE, 0x45, 0x90, 0x13, 0x84, 0x78, 0xAA, 0x4E, 0xBA, 0x7A, 0x43, 0x71, 0x56, 0x6C, 0x08, 0x09, 0x9E, 0x6F, 0x6D, 0xFF, 0xF9, 0x19, 0xA1, 0xED, 0x50, 0x24, 0xEC, 0x02, 0x31, 0xA3, 0x4F, 0xDA, 0xE3, 0xF8, 0x25, 0x7F, 0xD0, 0x2A, 0xCA, 0x05, 0x11, 0xE8, 0x97, 0xE1, 0xBC, 0x5E, 0x8E, 0xCF, 0x01, 0xB2, 0xA6, 0x03, 0x37, 0xAD, 0xAC, 0x59, 0xAB, 0x8D, 0x38, 0xEA, 0xA4, 0x87, 0x89, 0xF3, 0x1B, 0x2C, 0x8A, 0x1F, 0x62, 0xC5, 0x0B, 0xF1, 0x2F, 0x83, 0xBE, 0x33, 0x1D, 0xAE, 0x36, 0x46, 0x34, 
		    0xFE, 0x0F, 0x97, 0x92, 0xE0, 0x3F, 0x5A, 0xF2, 0x5C, 0x86, 0x02, 0xC4, 0xC0, 0x55, 0xE3, 0xD9, 0x4D, 0x52, 0x43, 0x2C, 0x73, 0x0B, 0x66, 0xE8, 0xAA, 0xCA, 0x0D, 0xF1, 0x15, 0xDF, 0xBB, 0xE5, 0x4F, 0x39, 0xBA, 0x8B, 0xC9, 0x25, 0xFF, 0xD4, 0x05, 0x7D, 0x51, 0x63, 0xBE, 0x17, 0x90, 0x09, 0xBD, 0x64, 0x62, 0xC1, 0x8A, 0xAC, 0x81, 0x70, 0x7C, 0xF4, 0xFB, 0x3D, 0x5D, 0x4C, 0x06, 0x93, 0x6F, 0xDE, 0x78, 0x36, 0xEE, 0xEB, 0x12, 0x8C, 0xE6, 0xFD, 0x8F, 0x82, 0x2F, 0x34, 0x40, 0x03, 0xDC, 0x68, 0x29, 0x4B, 0x74, 0x72, 0xB1, 0x13, 0xE1, 0x48, 0x01, 0x6D, 0x79, 0xB5, 0x31, 0xAB, 0xA1, 0xA0, 0x87, 0xA6, 0x11, 0x14, 0xA3, 0x54, 0x30, 0x23, 0x98, 0x57, 0x80, 0x94, 0xBF, 0x6E, 0xD6, 0x3C, 0x1C, 0x2E, 0x3B, 0xA4, 0x24, 0x89, 0xEC, 0xF7, 0xB0, 0x19, 0x21, 0x33, 0xD7, 0x99, 0x2B, 0x76, 0xB2, 0xF8, 0x42, 0xA2, 0x1E, 0x56, 0x7A, 0xED, 0xE9, 0xC2, 0x8D, 0xF0, 0xD0, 0x5F, 0xB4, 0x28, 0xB7, 0xCE, 0xA8, 0x53, 0xB6, 0x1F, 0x7E, 0x20, 0x35, 0x84, 0x45, 0xA9, 0xBC, 0xF9, 0xC5, 0x47, 0x50, 0xCD, 0x8E, 0x9A, 0x37, 0x9C, 0x0C, 0xD2, 0xC8, 0xAE, 0xEA, 0x9D, 0xFC, 0x5E, 0x65, 0x2D, 0x49, 0xCB, 0x7F, 0x67, 0xB8, 0xD1, 0x75, 0x71, 0x9B, 0x60, 0xDA, 0xE2, 0x59, 0x91, 0x69, 0x27, 0x44, 0x95, 0x1D, 0xAF, 0xAD, 0x46, 0x7B, 0x22, 0x61, 0x6C, 0x0A, 0x77, 0xA7, 0xC7, 0x58, 0xFA, 0xC3, 0x0E, 0xE4, 0x83, 0x26, 0x1B, 0x00, 0x6B, 0x41, 0xEF, 0x32, 0x08, 0xA5, 0xCF, 0xC6, 0xF6, 0x18, 0x38, 0xD3, 0xDD, 0xE7, 0x4A, 0xDB, 0x5B, 0x85, 0x07, 0xD8, 0x3E, 0x88, 0xB9, 0xD5, 0xB3, 0x1A, 0x96, 0x16, 0x9F, 0x9E, 0x6A, 0xF5, 0x10, 0x3A, 0xCC, 0x2A, 0xF3, 0x04, 0x4E, 
		    0x5E, 0x6F, 0x51, 0x89, 0x28, 0x9B, 0x60, 0x63, 0xC1, 0x7D, 0x49, 0xA9, 0xB0, 0xB2, 0x6B, 0xFE, 0x93, 0x2F, 0x21, 0xC7, 0xC9, 0x9E, 0x73, 0x01, 0x13, 0x4E, 0x65, 0x25, 0xE8, 0x37, 0x46, 0x22, 0x2D, 0x6A, 0xA1, 0x3C, 0xA4, 0xD3, 0x16, 0x58, 0x67, 0x87, 0xEE, 0x36, 0x6C, 0x62, 0x45, 0xD1, 0xE3, 0xE7, 0xCC, 0x18, 0xF5, 0x17, 0x94, 0xCB, 0xC0, 0xC3, 0x35, 0x19, 0x3E, 0x3D, 0x76, 0x39, 0x54, 0x8D, 0x02, 0x26, 0x23, 0xE5, 0xDE, 0xB8, 0xBB, 0xF2, 0xF7, 0x03, 0x5A, 0x30, 0x3A, 0xFD, 0xCD, 0x4C, 0x98, 0x4A, 0x2C, 0x61, 0x1E, 0xEA, 0xDF, 0x83, 0x7B, 0xEF, 0x42, 0xD9, 0x0D, 0x00, 0x5C, 0x0A, 0xE6, 0x4F, 0xE0, 0x24, 0x9A, 0x10, 0xC5, 0x80, 0x92, 0xF6, 0x5D, 0xE9, 0xF0, 0xFC, 0x56, 0xB9, 0xFB, 0x1A, 0xBE, 0x79, 0xB6, 0x07, 0x32, 0x74, 0x9D, 0x55, 0x9C, 0xCE, 0xC2, 0xD4, 0xB1, 0x99, 0xC4, 0xB3, 0x5B, 0x12, 0x81, 0x9F, 0x68, 0x52, 0xF4, 0xE4, 0xBC, 0xA6, 0x96, 0xB7, 0x15, 0xC6, 0xED, 0x66, 0x59, 0xAB, 0x14, 0x91, 0x77, 0xBF, 0xA8, 0xB5, 0x0C, 0xFA, 0x33, 0xF1, 0x97, 0x6D, 0x04, 0xF8, 0x6E, 0x8B, 0xD8, 0x95, 0xDC, 0x7E, 0xCF, 0xD0, 0x0F, 0x64, 0xDB, 0x4B, 0x57, 0xDA, 0xBA, 0x08, 0x06, 0x05, 0x5F, 0x43, 0xD5, 0xAC, 0x0E, 0xFF, 0xA0, 0x40, 0x8E, 0xD6, 0x71, 0x85, 0xAE, 0x1C, 0x84, 0x11, 0x70, 0x7F, 0x1F, 0x7C, 0x88, 0x44, 0xA3, 0x82, 0xEC, 0x41, 0x8F, 0xAD, 0x47, 0x78, 0xAF, 0x48, 0xE2, 0x29, 0xD7, 0xAA, 0x50, 0x2A, 0x3B, 0x1D, 0x2E, 0xE1, 0x72, 0xA7, 0x1B, 0x7A, 0x8C, 0x09, 0xA2, 0x86, 0xBD, 0x27, 0xF3, 0x90, 0xA5, 0x3F, 0xEB, 0x0B, 0x38, 0x8A, 0x20, 0x2B, 0xF9, 0xD2, 0x69, 0xDD, 0x75, 0xCA, 0x34, 0x4D, 0xC8, 0x53, 0x31, 0xB4, 
		    0x2B, 0x43, 0x28, 0x1F, 0x6F, 0x96, 0xEB, 0xDA, 0x39, 0x42, 0xD5, 0xE3, 0x49, 0xA8, 0x47, 0x31, 0x15, 0x48, 0xB2, 0x72, 0x2F, 0x5D, 0xA0, 0xC3, 0x88, 0xD2, 0xD3, 0xBB, 0x62, 0xD0, 0x53, 0x03, 0x17, 0x75, 0x50, 0xAF, 0x74, 0x1D, 0x26, 0x84, 0x2D, 0xF7, 0x82, 0xB4, 0x63, 0x09, 0xB8, 0xF8, 0x5B, 0x54, 0x25, 0xC7, 0xF5, 0xD4, 0xEA, 0x8C, 0xEE, 0x1A, 0x64, 0xDE, 0xBA, 0x76, 0x1E, 0x3B, 0x4A, 0x2E, 0x41, 0x73, 0x6C, 0xB6, 0x66, 0x6A, 0xC6, 0xA6, 0xCF, 0xFE, 0x87, 0x89, 0x92, 0x93, 0x0F, 0x67, 0x83, 0xFC, 0xA2, 0x7F, 0x68, 0x29, 0xBF, 0x07, 0x37, 0x95, 0xDF, 0x4F, 0xAD, 0x3E, 0x0C, 0xAE, 0x00, 0x05, 0x30, 0x08, 0x4E, 0xB7, 0xF6, 0x24, 0x65, 0x32, 0x0B, 0x02, 0x9F, 0x4D, 0x86, 0xA9, 0x6D, 0x60, 0x4C, 0x57, 0xD1, 0xD6, 0x21, 0xC1, 0xF4, 0x4B, 0x79, 0xEF, 0xAA, 0xE8, 0xA4, 0xD7, 0x18, 0x6E, 0x9C, 0x8D, 0xDB, 0x7E, 0x12, 0xBD, 0x44, 0x3C, 0x8E, 0xB1, 0x01, 0x8A, 0xE9, 0x23, 0x10, 0xE7, 0xF1, 0xF3, 0x71, 0xC5, 0x90, 0x8B, 0x38, 0x81, 0x36, 0x33, 0x94, 0x6B, 0x1B, 0x3A, 0x46, 0xEC, 0x27, 0xBE, 0xC9, 0x7B, 0xB0, 0x2C, 0xC2, 0x97, 0x13, 0x14, 0x8F, 0xE6, 0x99, 0x7A, 0x77, 0xCA, 0xB3, 0x91, 0xC8, 0xED, 0xE1, 0xCC, 0xCB, 0x1C, 0x85, 0xE5, 0xE0, 0x78, 0xF2, 0xA3, 0xA5, 0x69, 0xFA, 0xCD, 0x3F, 0x98, 0x40, 0x20, 0x56, 0x5E, 0xBC, 0xA1, 0xE2, 0x7C, 0x9A, 0x19, 0x59, 0x9B, 0xDC, 0xFB, 0x7D, 0x9E, 0x70, 0x80, 0xA7, 0x22, 0xD9, 0x5C, 0x5F, 0x58, 0x16, 0xFF, 0xB5, 0x0D, 0x55, 0x35, 0x34, 0xAC, 0xDD, 0xE4, 0x06, 0x51, 0x0A, 0x45, 0xB9, 0x0E, 0x52, 0x5A, 0x04, 0xC4, 0x9D, 0x2A, 0x11, 0xF0, 0xAB, 0x61, 0xFD, 0xC0, 0x3D, 0xD8, 0xCE, 0xF9, 
			

		    // Salt rows 17-32
		    0x15, 0x8D, 0x69, 0x14, 0x36, 0x75, 0x4F, 0x7F, 0x4C, 0x51, 0x38, 0xB6, 0x09, 0xF3, 0x82, 0xBE, 0x0A, 0x94, 0xC2, 0x24, 0xFF, 0x5F, 0xD4, 0xF1, 0xE3, 0x27, 0x0B, 0x9C, 0x30, 0x74, 0x0F, 0xBF, 0x1E, 0x08, 0x8A, 0xB1, 0x68, 0x3C, 0x1B, 0x0C, 0x50, 0x4B, 0x56, 0x6A, 0xB0, 0x83, 0x59, 0x5E, 0xD1, 0x41, 0x3A, 0x5C, 0xD0, 0xD3, 0x7D, 0x93, 0x6F, 0xDB, 0x92, 0x8E, 0xFC, 0x78, 0xCA, 0xC4, 0x2F, 0xE0, 0x66, 0x90, 0x87, 0x95, 0x29, 0xD7, 0x71, 0xE1, 0x8F, 0x9B, 0x8B, 0xE6, 0x2D, 0xB2, 0xBB, 0xFB, 0x0D, 0xFE, 0xA9, 0x4A, 0xAF, 0x18, 0xE8, 0xC0, 0xB9, 0x61, 0xDF, 0x64, 0x70, 0x3D, 0x97, 0xDA, 0x26, 0x03, 0xCE, 0x8C, 0xAC, 0xEF, 0xB8, 0x85, 0x60, 0xAA, 0x5A, 0x58, 0xB3, 0x2E, 0x23, 0x9F, 0x04, 0xA3, 0xBC, 0x42, 0x45, 0x34, 0x67, 0x9D, 0xD6, 0x1A, 0x6E, 0xF2, 0xC6, 0xF8, 0xB5, 0x2B, 0x11, 0xA4, 0x48, 0x47, 0xAD, 0xFA, 0xAE, 0xCD, 0x19, 0x46, 0x07, 0x53, 0xEC, 0xF6, 0xA6, 0xC7, 0x17, 0x16, 0x52, 0xE9, 0x89, 0x86, 0xC8, 0x2A, 0x01, 0xE5, 0xD9, 0x84, 0xD5, 0x02, 0x6C, 0xB4, 0xCC, 0xF7, 0x43, 0x32, 0x3E, 0x22, 0x72, 0xF5, 0x00, 0x25, 0x1D, 0x96, 0x3B, 0x57, 0x9E, 0x81, 0x9A, 0xDC, 0x12, 0xE7, 0x5B, 0xDD, 0x4D, 0x13, 0xA2, 0x37, 0x1C, 0x39, 0x2C, 0x5D, 0x63, 0x1F, 0x40, 0xCB, 0x7C, 0xEA, 0xC9, 0xA1, 0x0E, 0xC5, 0xB7, 0x76, 0x49, 0x31, 0x35, 0x7B, 0xE4, 0x80, 0x10, 0xF4, 0x7E, 0x05, 0x99, 0x33, 0x06, 0x44, 0xDE, 0x54, 0xED, 0xA5, 0x79, 0xA0, 0xA7, 0x65, 0x91, 0x4E, 0xD2, 0xAB, 0x62, 0xC3, 0x3F, 0x28, 0xD8, 0xCF, 0x55, 0xF0, 0x77, 0xEB, 0x88, 0x6B, 0xA8, 0xEE, 0x7A, 0x98, 0xF9, 0x6D, 0x73, 0xC1, 0x20, 0xFD, 0xBD, 0xBA, 0xE2, 0x21, 
		    0x98, 0x52, 0xC6, 0x6A, 0x27, 0xD6, 0x33, 0x67, 0xA4, 0x96, 0x5E, 0xE7, 0x28, 0xA5, 0xBC, 0x6F, 0xAC, 0xF1, 0xD8, 0x7A, 0xEA, 0x86, 0xC2, 0xB9, 0x2A, 0xFF, 0xB3, 0x83, 0x68, 0xFC, 0xD1, 0x8A, 0xB5, 0xA7, 0x9B, 0x82, 0x47, 0x71, 0xE5, 0xE4, 0x23, 0xF7, 0x2B, 0xA2, 0xAB, 0x58, 0x02, 0x03, 0x6D, 0xC1, 0xC8, 0x0D, 0xEB, 0xF5, 0x56, 0x0F, 0x3A, 0x4A, 0x34, 0x8F, 0xA3, 0x01, 0x64, 0x08, 0x6E, 0x1F, 0x37, 0x0A, 0x45, 0x77, 0x5D, 0x59, 0xED, 0x13, 0x0B, 0xE1, 0x9C, 0x81, 0xCD, 0xEC, 0xA8, 0x10, 0x16, 0x43, 0x78, 0x38, 0x6B, 0x32, 0x4E, 0x9E, 0x84, 0x06, 0x55, 0x15, 0x3E, 0x22, 0x7F, 0xD2, 0x5B, 0xFD, 0xC0, 0x60, 0xA0, 0x04, 0x4C, 0xF0, 0xE9, 0x0C, 0xB2, 0x9D, 0x91, 0xE0, 0x54, 0xC4, 0x8B, 0x1D, 0x95, 0x90, 0xAE, 0xFA, 0x75, 0x74, 0xF8, 0xDD, 0xF3, 0x07, 0x1A, 0x4D, 0x18, 0xC7, 0xBE, 0xBF, 0x00, 0x53, 0xB8, 0xE6, 0xB0, 0xDB, 0x7B, 0x3B, 0x17, 0x44, 0xB7, 0x48, 0x93, 0xC3, 0xBB, 0x94, 0x4B, 0x50, 0x99, 0x5F, 0xEF, 0x69, 0xF9, 0xFE, 0x40, 0x85, 0x1B, 0x88, 0x25, 0xB6, 0x39, 0xCA, 0x8E, 0xCB, 0xFB, 0x29, 0x12, 0x26, 0xB4, 0x5A, 0x46, 0xC5, 0xBD, 0x4F, 0x09, 0x2E, 0x36, 0x66, 0x8D, 0x5C, 0x41, 0xEE, 0xAD, 0x76, 0x3C, 0xF2, 0x35, 0x3D, 0x6C, 0xD9, 0x14, 0x51, 0x05, 0x21, 0x3F, 0x9A, 0x87, 0x20, 0xE8, 0xAA, 0xBA, 0x2D, 0x73, 0xA9, 0xDE, 0x49, 0x79, 0x24, 0x92, 0x7E, 0xCC, 0x72, 0xDA, 0xA6, 0x2F, 0x89, 0xE3, 0xD7, 0xD5, 0x0E, 0xD3, 0x7D, 0x65, 0x57, 0x1E, 0x19, 0xDC, 0xCF, 0xD4, 0x30, 0xB1, 0x11, 0x8C, 0x1C, 0x9F, 0xDF, 0xD0, 0x97, 0x80, 0x42, 0x70, 0xAF, 0xF6, 0xA1, 0x2C, 0xCE, 0x62, 0x63, 0x7C, 0xC9, 0x61, 0x31, 0xF4, 0xE2, 
		    0x53, 0x61, 0x68, 0x3E, 0xBD, 0xEB, 0xE2, 0x9E, 0xEC, 0xA6, 0x4E, 0xF5, 0x7E, 0x8A, 0x07, 0x9F, 0x33, 0x63, 0x3B, 0x2A, 0x91, 0xED, 0xAC, 0x0F, 0xDE, 0x00, 0x19, 0x6E, 0x7A, 0x24, 0x2F, 0x82, 0xD0, 0x2E, 0x43, 0x1B, 0x36, 0xA2, 0xE5, 0xBB, 0x95, 0x8D, 0x86, 0xE4, 0xB5, 0xE3, 0x58, 0xDA, 0x72, 0xE8, 0x2C, 0xA7, 0x6B, 0x64, 0x59, 0xDB, 0xFF, 0x41, 0xC0, 0x03, 0xC9, 0x23, 0x5F, 0xF4, 0xBC, 0xBE, 0xEA, 0x11, 0x84, 0xCD, 0xFB, 0x81, 0x77, 0xA8, 0x38, 0x3A, 0x66, 0x5D, 0xC4, 0xAA, 0x28, 0x96, 0xEE, 0x8C, 0x75, 0xCF, 0xA0, 0x0D, 0x73, 0xF1, 0xCB, 0x39, 0xB8, 0x12, 0x9C, 0x1D, 0xD5, 0x54, 0x44, 0xF8, 0xAD, 0x80, 0xDC, 0x83, 0xB4, 0xDD, 0x8B, 0x37, 0xC3, 0xF7, 0xDF, 0xFD, 0x4A, 0xB3, 0x0B, 0x34, 0xB0, 0x7D, 0xD4, 0x6C, 0x7F, 0xA9, 0x8E, 0xC6, 0x70, 0x56, 0x20, 0xF2, 0x6A, 0xFE, 0x60, 0x5A, 0x55, 0xB1, 0x8F, 0x02, 0x79, 0x2D, 0x25, 0x94, 0x9B, 0x3C, 0x29, 0x97, 0xD8, 0x08, 0xF3, 0x93, 0x98, 0xFC, 0x4F, 0xA3, 0x7B, 0xB7, 0x2B, 0x50, 0x17, 0x78, 0x0C, 0xB9, 0x31, 0x1C, 0xA1, 0x51, 0xD7, 0x49, 0x46, 0x3D, 0x88, 0xEF, 0x10, 0x1A, 0x30, 0xFA, 0x40, 0x22, 0x52, 0xB6, 0x18, 0xD2, 0xC5, 0xC1, 0x99, 0x6F, 0x71, 0xC7, 0x09, 0xA5, 0x69, 0x1F, 0x15, 0xCE, 0x48, 0xE0, 0x13, 0x04, 0xD9, 0x76, 0xF6, 0x42, 0x92, 0xA4, 0xF0, 0xAB, 0x5C, 0x9D, 0x7C, 0x21, 0x0E, 0x35, 0xC2, 0x3F, 0x5E, 0x65, 0xE1, 0x90, 0x32, 0x27, 0x87, 0xCC, 0x6D, 0x06, 0x05, 0x57, 0xAF, 0x9A, 0x62, 0x67, 0xD1, 0xAE, 0xE9, 0x4D, 0xD6, 0x16, 0x45, 0x01, 0x1E, 0x85, 0x4B, 0x74, 0x47, 0xBF, 0xD3, 0xF9, 0x89, 0x5B, 0xBA, 0xE6, 0xCA, 0xB2, 0x26, 0xE7, 0x0A, 0x14, 0x4C, 0xC8, 
		    0xF8, 0x3C, 0x7F, 0xE3, 0x28, 0xBC, 0xC4, 0x4F, 0xF9, 0x12, 0x45, 0xFA, 0x84, 0xA9, 0x98, 0x9B, 0x61, 0xB1, 0x8A, 0xB2, 0xCC, 0x46, 0x88, 0x31, 0x1D, 0x9A, 0x9F, 0x67, 0x89, 0x41, 0xEB, 0x55, 0x23, 0x3A, 0x62, 0x2A, 0x19, 0x0E, 0xD3, 0xD1, 0xBF, 0x58, 0x92, 0x7D, 0xA1, 0x2F, 0x37, 0xA0, 0xD2, 0xF0, 0x38, 0x07, 0xEC, 0xA3, 0xD4, 0xE5, 0xA7, 0xE8, 0xBB, 0xFD, 0x8B, 0x2E, 0xDE, 0x86, 0x5E, 0xC5, 0x15, 0x7B, 0x8E, 0xC3, 0x76, 0xE6, 0x42, 0x7C, 0xAD, 0xE1, 0x82, 0xE7, 0x54, 0xF4, 0x00, 0x4D, 0x1B, 0xFE, 0xE4, 0x80, 0xB8, 0x44, 0xF5, 0x91, 0x21, 0xE9, 0xD9, 0x1F, 0x20, 0x57, 0x26, 0xFB, 0x99, 0xD0, 0x9E, 0x36, 0x83, 0x0D, 0x97, 0x0C, 0xEE, 0x71, 0x74, 0x6C, 0x77, 0x64, 0x7A, 0x56, 0x2D, 0xB0, 0x30, 0xA2, 0xCF, 0x69, 0x43, 0x3F, 0x95, 0xB3, 0x32, 0x8F, 0xD5, 0x27, 0x4E, 0xED, 0x52, 0xB5, 0x0A, 0xF6, 0x16, 0x78, 0x18, 0x72, 0x6A, 0x53, 0x01, 0x8C, 0x6E, 0xD8, 0xE0, 0xD7, 0x5D, 0x13, 0xEF, 0xA4, 0x66, 0xDB, 0xCB, 0x5B, 0x5F, 0x93, 0xCE, 0xF7, 0xB7, 0x3D, 0xF3, 0x40, 0x75, 0xFC, 0x0F, 0x73, 0x2C, 0x60, 0x4A, 0x87, 0x10, 0x1C, 0xAF, 0x50, 0x47, 0xC1, 0xE2, 0xA8, 0x96, 0xAC, 0x5C, 0xC2, 0x70, 0x65, 0xA6, 0x04, 0xDF, 0xDA, 0xF1, 0xAB, 0x8D, 0x14, 0x49, 0xC8, 0x4C, 0x22, 0xAE, 0x2B, 0x81, 0x17, 0xF2, 0xDD, 0xDC, 0x0B, 0x85, 0x29, 0xC9, 0x79, 0x03, 0xFF, 0x24, 0x39, 0x3E, 0xBE, 0x90, 0x3B, 0x4B, 0x08, 0x94, 0x1A, 0x6B, 0xBD, 0x09, 0x02, 0xC6, 0x68, 0xB4, 0xEA, 0x6F, 0xC7, 0x63, 0xCD, 0xB6, 0x11, 0x51, 0xCA, 0x33, 0x9C, 0xA5, 0xBA, 0x9D, 0xC0, 0x48, 0x1E, 0x25, 0x05, 0xD6, 0xB9, 0x7E, 0x5A, 0x6D, 0xAA, 0x59, 0x06, 0x35, 0x34, 
		    0x08, 0x7F, 0xC3, 0x11, 0xC6, 0x8E, 0xD3, 0x04, 0x86, 0xD4, 0x6F, 0x36, 0x55, 0x00, 0x84, 0x06, 0x7C, 0x96, 0x6B, 0x9B, 0x97, 0xB3, 0x2A, 0xF9, 0x39, 0x14, 0xA7, 0xB5, 0x88, 0xE6, 0xD6, 0x2D, 0x63, 0x90, 0xE1, 0x73, 0x6E, 0xBA, 0x0C, 0x0D, 0x09, 0x77, 0x27, 0x0A, 0x41, 0x47, 0x28, 0xAA, 0xF5, 0x8D, 0x8F, 0x56, 0x1F, 0x5E, 0xA9, 0x89, 0xBD, 0x69, 0x0B, 0x4A, 0x57, 0x21, 0x78, 0xD9, 0x68, 0x19, 0x60, 0x95, 0xB9, 0xE3, 0xEA, 0xC1, 0x30, 0x52, 0xE9, 0xB4, 0xC9, 0x5B, 0xB6, 0x33, 0x66, 0xF6, 0x79, 0xD0, 0x31, 0x8C, 0xED, 0x5A, 0xC4, 0xDE, 0x75, 0x67, 0x4B, 0xFB, 0x53, 0x65, 0x02, 0xD8, 0xD5, 0xDA, 0xEF, 0x81, 0x07, 0xB0, 0x42, 0xA6, 0xAD, 0x10, 0xA4, 0x26, 0xDF, 0x99, 0x48, 0xDD, 0x2B, 0xC2, 0x3E, 0x83, 0xC7, 0x5F, 0xE7, 0x03, 0x6A, 0x80, 0x1A, 0x91, 0x29, 0x2E, 0x87, 0x12, 0xFA, 0x9C, 0x22, 0x61, 0x64, 0x9A, 0xE5, 0x44, 0xB2, 0xB8, 0x54, 0xC0, 0xF8, 0x4D, 0x0E, 0x93, 0xC5, 0x3F, 0xDC, 0x43, 0xCA, 0xCF, 0x74, 0xEB, 0x76, 0xF2, 0x5C, 0x20, 0x5D, 0xD1, 0xA2, 0x16, 0xA0, 0x34, 0xEE, 0x85, 0xCE, 0x35, 0xFC, 0xFE, 0x24, 0x0F, 0x62, 0xBB, 0x38, 0xBE, 0x50, 0x8A, 0xF0, 0xFF, 0x58, 0x37, 0x4E, 0xCC, 0x2C, 0x9F, 0xA1, 0xA8, 0x13, 0x25, 0x49, 0xA5, 0xB1, 0x6D, 0x59, 0x23, 0x4C, 0x3B, 0x8B, 0x2F, 0x3A, 0xFD, 0x51, 0xC8, 0xE4, 0xB7, 0x7A, 0x15, 0xAB, 0x7D, 0xBF, 0x1E, 0xF7, 0x1D, 0x17, 0x4F, 0xBC, 0x45, 0x82, 0x7B, 0xF1, 0xA3, 0x46, 0x94, 0x1B, 0x9D, 0xD2, 0xF3, 0x01, 0x9E, 0x98, 0xCD, 0xDB, 0x6C, 0x7E, 0x32, 0xE2, 0xAF, 0x18, 0xEC, 0x3D, 0x40, 0xF4, 0x72, 0xAC, 0x3C, 0x1C, 0xE8, 0xD7, 0x92, 0xE0, 0xCB, 0x05, 0xAE, 0x71, 0x70, 
		    0xB5, 0xAF, 0x16, 0x96, 0x51, 0x47, 0x9A, 0xEE, 0xAA, 0xD6, 0x34, 0xCE, 0x98, 0xB1, 0x67, 0x0D, 0xAD, 0x5B, 0x9D, 0xEF, 0x54, 0x42, 0x00, 0x80, 0x6D, 0x07, 0x7A, 0x37, 0x64, 0x25, 0x78, 0x20, 0x53, 0xD7, 0xBC, 0x6B, 0x7C, 0x8D, 0x19, 0x45, 0xA5, 0x05, 0xA1, 0x26, 0x02, 0xCA, 0x4E, 0x03, 0x4B, 0x2A, 0x2E, 0xFC, 0x69, 0x11, 0xFE, 0x8C, 0x1D, 0xE8, 0x1C, 0x5E, 0xBE, 0x17, 0x06, 0xC0, 0xBF, 0xC6, 0xF0, 0x70, 0x3B, 0x6E, 0x5D, 0x36, 0x9F, 0x09, 0x1E, 0xF3, 0x4C, 0xCB, 0x72, 0xA9, 0x8A, 0x2C, 0x58, 0xB7, 0x3C, 0x30, 0xC1, 0xE6, 0x61, 0xD1, 0x90, 0xD9, 0x13, 0xEB, 0xE9, 0xE4, 0x3A, 0x49, 0x57, 0xFD, 0x24, 0xAC, 0x97, 0x86, 0xF5, 0x83, 0xDA, 0xFB, 0x2B, 0x1B, 0x18, 0xC4, 0xD5, 0x73, 0x12, 0x9C, 0xB8, 0x1F, 0xB6, 0x22, 0xCF, 0x71, 0x44, 0xDB, 0x2F, 0xDF, 0x60, 0x5F, 0x55, 0x8B, 0xE3, 0x63, 0x0E, 0x3D, 0xC9, 0xFA, 0x0A, 0x0B, 0xA2, 0xF9, 0x92, 0x84, 0xE1, 0x46, 0xA7, 0x5C, 0xF7, 0x94, 0xB3, 0x4D, 0xA3, 0xA8, 0x62, 0x7B, 0xC7, 0x82, 0x01, 0xDC, 0x56, 0x39, 0xBA, 0xBD, 0x87, 0xB2, 0x08, 0xED, 0x4F, 0xC2, 0x7F, 0x7D, 0xDD, 0x77, 0x38, 0xD3, 0xFF, 0x3E, 0x10, 0x9E, 0x93, 0x7E, 0x8F, 0xC5, 0x23, 0x79, 0xD8, 0xD2, 0x59, 0xF6, 0x88, 0x32, 0x43, 0xCC, 0xEC, 0xA4, 0x14, 0x4A, 0x50, 0x85, 0xF8, 0xF1, 0x6A, 0x65, 0x15, 0xEA, 0x89, 0x1A, 0xAB, 0xAE, 0xB9, 0x5A, 0xA6, 0x29, 0xB4, 0x95, 0xE5, 0x3F, 0x76, 0x48, 0xBB, 0x27, 0xD0, 0x66, 0xD4, 0xCD, 0x6C, 0xE2, 0x74, 0x21, 0xDE, 0x99, 0xE7, 0x35, 0x91, 0xC3, 0x0F, 0xF4, 0x41, 0x52, 0x81, 0xB0, 0xE0, 0xF2, 0x2D, 0x04, 0x8E, 0x33, 0xA0, 0x28, 0x0C, 0x68, 0x40, 0x6F, 0x75, 0xC8, 0x9B, 0x31, 
		    0x8D, 0x45, 0x12, 0x61, 0xEA, 0x94, 0x40, 0xC9, 0xAC, 0x47, 0xEE, 0x37, 0x1C, 0xC2, 0x56, 0x46, 0x99, 0xA7, 0xB6, 0xAD, 0x28, 0x6E, 0x34, 0x15, 0x8C, 0xA1, 0xA6, 0xAA, 0x1B, 0xE3, 0x62, 0xC3, 0xCF, 0xD4, 0x43, 0x78, 0xD7, 0xD1, 0xC5, 0xB3, 0x7F, 0x6D, 0xA3, 0xED, 0xD8, 0xC6, 0x30, 0x19, 0x3D, 0xFD, 0xEF, 0xAE, 0xB5, 0x18, 0xD0, 0x93, 0x57, 0x1F, 0xA9, 0x65, 0x64, 0x84, 0x2F, 0x2D, 0xCD, 0x6C, 0xA4, 0x54, 0x5F, 0x11, 0x7B, 0x7D, 0xAF, 0x39, 0x06, 0x7E, 0xD6, 0x07, 0xC7, 0x03, 0x1E, 0xD3, 0x51, 0x23, 0x8B, 0xB9, 0xD9, 0x4C, 0x33, 0x48, 0x22, 0xA0, 0xAB, 0x9D, 0x9B, 0x27, 0xB1, 0x4F, 0x29, 0x9F, 0x8A, 0x52, 0x6F, 0x7C, 0x5A, 0xBF, 0xF7, 0xFF, 0x88, 0x0F, 0x58, 0x96, 0x69, 0x01, 0xFC, 0x1D, 0x31, 0x3B, 0x5B, 0x74, 0x83, 0xDF, 0x3E, 0xCE, 0x72, 0xE6, 0x2A, 0xE0, 0xF3, 0xCC, 0x0A, 0xFE, 0x7A, 0x86, 0xC4, 0xDC, 0x71, 0xEB, 0xBB, 0xBD, 0x21, 0x95, 0xFA, 0x66, 0x02, 0xB4, 0xB2, 0x0C, 0xDE, 0xC1, 0x14, 0x85, 0x4A, 0x38, 0x80, 0xEC, 0x9A, 0x4D, 0x9E, 0x92, 0x55, 0xCB, 0xF8, 0x77, 0x63, 0x8E, 0x2B, 0x9C, 0xE2, 0x05, 0x17, 0x16, 0x97, 0x41, 0xC0, 0x5E, 0xE1, 0x60, 0x98, 0x49, 0xF5, 0xB7, 0xB0, 0x3A, 0x75, 0x10, 0x24, 0xF2, 0xF0, 0x35, 0xE8, 0x76, 0x00, 0x91, 0xDB, 0x4B, 0x2E, 0x6B, 0xF4, 0x04, 0xE4, 0x79, 0x3C, 0xBA, 0xDA, 0xE5, 0x90, 0x0E, 0xA8, 0x87, 0xA5, 0x25, 0x20, 0x13, 0xD2, 0x67, 0xFB, 0xA2, 0xCA, 0x5C, 0x4E, 0x08, 0x50, 0x89, 0x09, 0x73, 0x42, 0x6A, 0x36, 0x32, 0xF9, 0x44, 0xE7, 0x70, 0x3F, 0x26, 0x1A, 0x59, 0x81, 0x53, 0xB8, 0xF6, 0xF1, 0x68, 0x2C, 0x8F, 0x82, 0x0B, 0xC8, 0xBE, 0xBC, 0xDD, 0x5D, 0xD5, 0xE9, 0x0D, 
		    0x6A, 0x5A, 0x0D, 0x03, 0xB6, 0x05, 0x53, 0x7F, 0xF4, 0x0E, 0x84, 0x28, 0x6D, 0x41, 0x31, 0x4F, 0x49, 0xDE, 0x2E, 0xD1, 0xCB, 0x17, 0x8B, 0x7D, 0xE1, 0x92, 0xED, 0xA4, 0xC2, 0x33, 0xB7, 0x07, 0xE3, 0x40, 0x4E, 0xF3, 0x4A, 0x71, 0xC9, 0x30, 0x36, 0xC8, 0xAA, 0xF2, 0x85, 0xFB, 0x2B, 0x3D, 0x02, 0x0B, 0x04, 0x99, 0x51, 0xD3, 0x19, 0xBF, 0x1E, 0x89, 0xCE, 0x57, 0xB9, 0x74, 0x4D, 0xAE, 0x9C, 0xFD, 0xF8, 0x42, 0xB5, 0x8A, 0xAC, 0xCD, 0xA0, 0x83, 0x5D, 0x97, 0xE2, 0x9E, 0x00, 0x01, 0xFA, 0xB4, 0xEC, 0x18, 0x6B, 0xC6, 0x77, 0x50, 0xBB, 0xE9, 0xC5, 0x7E, 0x72, 0xD6, 0x27, 0xB0, 0x12, 0x52, 0xDA, 0xE5, 0xE7, 0x3C, 0x22, 0x64, 0x14, 0x9D, 0x55, 0x38, 0xB1, 0x93, 0xE0, 0x3A, 0x10, 0x61, 0xF5, 0xB8, 0xCA, 0x25, 0x98, 0xE4, 0x6F, 0x5E, 0xA2, 0x4B, 0x6E, 0xF7, 0x7C, 0x32, 0x56, 0xD5, 0x8F, 0xF6, 0x46, 0xD9, 0x44, 0x67, 0xDB, 0xB3, 0xE6, 0x1D, 0x8D, 0x39, 0x88, 0x70, 0x9B, 0x1A, 0x5F, 0x59, 0xCC, 0x86, 0xA8, 0x7A, 0xA3, 0x2A, 0x35, 0xBA, 0xEB, 0x58, 0xDD, 0xF1, 0x06, 0xB2, 0x21, 0x66, 0xC3, 0x3B, 0x2D, 0x4C, 0x0F, 0x37, 0x6C, 0x48, 0xC1, 0x73, 0xFE, 0xEA, 0x2F, 0xFF, 0x16, 0x0A, 0x1C, 0x54, 0x26, 0x94, 0x65, 0x81, 0x09, 0xC0, 0x13, 0x87, 0xFC, 0x3F, 0x8C, 0xA9, 0x47, 0x82, 0xBC, 0xEF, 0x08, 0xAB, 0xA5, 0x96, 0x5C, 0x43, 0xCF, 0xC7, 0x29, 0x79, 0x91, 0x78, 0x7B, 0xD8, 0xAD, 0x8E, 0x90, 0xF0, 0x20, 0x11, 0x75, 0x45, 0x2C, 0x95, 0x24, 0x34, 0x1B, 0x0C, 0xA6, 0xDF, 0x1F, 0xBD, 0xAF, 0xA1, 0xD2, 0x23, 0xC4, 0x69, 0xD4, 0xA7, 0x9A, 0xF9, 0xBE, 0x68, 0x62, 0xD7, 0x5B, 0x3E, 0x15, 0x76, 0xE8, 0x9F, 0xD0, 0x63, 0xDC, 0xEE, 0x80, 0x60, 
			
		    0xEB, 0x51, 0xD6, 0x3C, 0x0F, 0xDC, 0x84, 0x37, 0x40, 0xFD, 0x89, 0x90, 0x75, 0x20, 0xDB, 0x27, 0x2B, 0xD5, 0xB1, 0x1C, 0xCD, 0x01, 0x19, 0x42, 0x6F, 0xDD, 0x13, 0x22, 0x23, 0xF1, 0x08, 0xAF, 0x86, 0x74, 0x82, 0x8D, 0xC1, 0x0D, 0x9D, 0xCA, 0xFE, 0xC0, 0xBD, 0x72, 0xA5, 0xB9, 0xE4, 0x0A, 0xCF, 0xF5, 0x36, 0x55, 0x15, 0x02, 0x59, 0x71, 0xCC, 0x5C, 0x2F, 0xBE, 0xB5, 0xEE, 0x93, 0x11, 0x52, 0x7E, 0xEF, 0x33, 0x1E, 0x00, 0x17, 0x32, 0xFC, 0x70, 0x46, 0x45, 0x9A, 0xB4, 0x07, 0x12, 0xE2, 0x54, 0x5F, 0xD0, 0x57, 0xF2, 0x6D, 0xB0, 0x94, 0xFA, 0x1F, 0xEA, 0x58, 0x28, 0x44, 0xC5, 0xF6, 0xE8, 0x0C, 0xAE, 0xFF, 0xBC, 0x6E, 0x3A, 0x9C, 0x5A, 0xCE, 0xA8, 0x87, 0xEC, 0xA4, 0x16, 0xC2, 0x56, 0x8A, 0x38, 0x6B, 0x2D, 0x4B, 0x9F, 0x83, 0x76, 0x43, 0x79, 0x3E, 0x6A, 0x39, 0xC7, 0xA6, 0x7A, 0x49, 0xB7, 0xCB, 0xE9, 0x47, 0x2C, 0xD2, 0xD8, 0xD7, 0xC3, 0x26, 0x73, 0x05, 0x35, 0x0B, 0x3B, 0x10, 0x68, 0xF7, 0x85, 0xA7, 0xC8, 0x1A, 0xBF, 0x18, 0x61, 0xB8, 0x88, 0xD4, 0x92, 0xB2, 0xE3, 0xDF, 0x53, 0x21, 0x97, 0xBA, 0xA3, 0xAB, 0x67, 0x4C, 0x04, 0xE0, 0x03, 0x24, 0x34, 0xFB, 0x31, 0xD9, 0x0E, 0xDA, 0x06, 0x8B, 0x95, 0x3D, 0xAC, 0xE1, 0x25, 0x78, 0x62, 0x77, 0xB6, 0xC9, 0x8F, 0xED, 0x30, 0x41, 0xD3, 0xB3, 0x14, 0xE7, 0x80, 0x9E, 0x4A, 0x48, 0x5B, 0x64, 0x2E, 0x5D, 0x3F, 0xE5, 0xE6, 0xF0, 0xD1, 0xC6, 0x66, 0x1D, 0xA9, 0x09, 0x7F, 0x5E, 0x4D, 0xA0, 0xF9, 0x7D, 0x4F, 0x29, 0x63, 0x65, 0x7B, 0x9B, 0xA1, 0x81, 0x60, 0x98, 0x8C, 0x96, 0xA2, 0x7C, 0xDE, 0x99, 0x6C, 0x1B, 0xF3, 0x4E, 0x50, 0xAA, 0xAD, 0x91, 0x69, 0xBB, 0x8E, 0xF8, 0x2A, 0xC4, 0xF4, 
		    0x7C, 0xE5, 0x1A, 0xF1, 0x3E, 0x5C, 0x65, 0x79, 0x5D, 0xD6, 0x9D, 0x2B, 0x8B, 0xBC, 0x32, 0xA8, 0x8D, 0x81, 0xE6, 0x66, 0xAB, 0x7F, 0x82, 0x19, 0xE4, 0xCA, 0xAD, 0x64, 0x3F, 0x5E, 0x6A, 0x44, 0x10, 0x3B, 0x74, 0xCE, 0x08, 0x5B, 0xAE, 0x43, 0x00, 0x8E, 0x02, 0xFA, 0xCD, 0x48, 0xF0, 0x5F, 0x57, 0x1E, 0x0B, 0x6B, 0x6C, 0x88, 0xF2, 0xF3, 0x86, 0x97, 0xDB, 0xDA, 0x0C, 0xC2, 0xEA, 0x26, 0xC0, 0x93, 0x4F, 0xA5, 0xDC, 0x89, 0xD0, 0x62, 0x34, 0x9C, 0xEB, 0x24, 0xCF, 0x96, 0xEF, 0x04, 0x7D, 0xA0, 0x27, 0x76, 0x3A, 0x07, 0x6D, 0x29, 0x77, 0x9F, 0xBF, 0x1B, 0x17, 0xBA, 0xE1, 0xE7, 0xDE, 0xC8, 0xE3, 0xFB, 0x2D, 0xB9, 0xD8, 0x3C, 0x8F, 0xBB, 0x20, 0x71, 0x84, 0x1C, 0x63, 0xCB, 0x83, 0x2F, 0xFE, 0x52, 0x14, 0x51, 0x8C, 0x05, 0x4B, 0x39, 0x61, 0x75, 0xB8, 0x35, 0xFC, 0x4E, 0x06, 0x67, 0x37, 0x91, 0x46, 0xFD, 0xAC, 0x4D, 0x41, 0xE2, 0xB4, 0x47, 0x73, 0x7A, 0x69, 0x23, 0x25, 0x98, 0x54, 0x9E, 0xA1, 0xB2, 0xA4, 0xD3, 0xE0, 0xC9, 0xFF, 0x4C, 0x95, 0x30, 0x40, 0x0E, 0xC3, 0xD4, 0x3D, 0x15, 0xB6, 0x2A, 0x9A, 0xE8, 0xB7, 0x6E, 0xD1, 0xE9, 0x56, 0x53, 0xF8, 0x09, 0xB3, 0x38, 0xB0, 0x13, 0x6F, 0xDD, 0xA7, 0x01, 0x8A, 0x70, 0xB1, 0xED, 0x90, 0x5A, 0xB5, 0x99, 0x18, 0x33, 0xBE, 0x94, 0x21, 0x92, 0x4A, 0xD5, 0x28, 0x60, 0xD9, 0x58, 0x11, 0x9B, 0x0A, 0x42, 0x2E, 0x85, 0x55, 0xC5, 0xBD, 0xD7, 0xA9, 0x59, 0x22, 0x2C, 0x80, 0x50, 0xF5, 0xA6, 0x12, 0xD2, 0xAF, 0xEC, 0x1D, 0x78, 0xF9, 0x45, 0xEE, 0x0D, 0x1F, 0xF4, 0xF7, 0x03, 0x36, 0x7B, 0xA3, 0x68, 0xAA, 0x0F, 0x16, 0x49, 0xDF, 0xCC, 0xC6, 0xC7, 0xA2, 0xF6, 0x31, 0xC4, 0x7E, 0xC1, 0x72, 0x87, 
		    0x7B, 0xD5, 0x05, 0x40, 0xD7, 0x9A, 0xD0, 0x90, 0x1B, 0xBF, 0xBD, 0x3C, 0x6A, 0xD1, 0xC8, 0x60, 0x74, 0x0D, 0xA2, 0x69, 0xC3, 0x30, 0x6B, 0x59, 0xFC, 0xD2, 0x63, 0xE3, 0x1F, 0xF3, 0x84, 0xE1, 0xF5, 0xB7, 0x24, 0xFE, 0x7E, 0x46, 0x09, 0xD9, 0xF0, 0x5D, 0xFF, 0x58, 0x7C, 0xCB, 0x36, 0xA8, 0xA9, 0x8F, 0x4B, 0x32, 0x86, 0x64, 0xEC, 0xAC, 0x2F, 0x4E, 0x2D, 0x54, 0x10, 0x39, 0x42, 0x95, 0x70, 0xBA, 0xAF, 0xED, 0xB5, 0x3D, 0xB2, 0xC4, 0x72, 0x65, 0xEE, 0x01, 0xF1, 0x23, 0x7A, 0x8A, 0x16, 0x12, 0x93, 0x75, 0x9E, 0x3E, 0xD8, 0x78, 0x91, 0x06, 0x67, 0xDA, 0x7D, 0xF6, 0xA4, 0xE8, 0x1C, 0x27, 0x89, 0x79, 0x26, 0x9C, 0xCE, 0xA7, 0x73, 0x22, 0xFA, 0xB3, 0xC9, 0xCC, 0xC1, 0x00, 0x19, 0x3B, 0x33, 0x14, 0x62, 0x57, 0x0A, 0x3A, 0xA3, 0x3F, 0x94, 0x9F, 0xC6, 0xBB, 0x98, 0xB4, 0xDC, 0xF9, 0xD3, 0xE0, 0x31, 0x02, 0x5E, 0x2B, 0x4D, 0x9D, 0x1E, 0x17, 0xE7, 0x21, 0x51, 0xCF, 0x07, 0x38, 0x56, 0x66, 0xEB, 0x5F, 0xE4, 0x11, 0x61, 0x52, 0xAA, 0x96, 0x6F, 0x4C, 0x43, 0x45, 0x8C, 0x44, 0x34, 0x8D, 0x0E, 0x53, 0x03, 0xAB, 0x5A, 0xDD, 0xA1, 0xE6, 0xB8, 0x29, 0xB0, 0xC2, 0x48, 0x6C, 0xE5, 0x83, 0x47, 0xEA, 0x49, 0x55, 0x5C, 0xC7, 0xCA, 0xA6, 0x4A, 0xDE, 0x7F, 0xDF, 0xB6, 0x80, 0x2A, 0x18, 0x81, 0x71, 0x6E, 0x76, 0xAD, 0x41, 0x68, 0x1D, 0xC5, 0xD4, 0xF2, 0xA5, 0x85, 0x25, 0x88, 0x2C, 0x08, 0xE9, 0x1A, 0xF8, 0xF7, 0x97, 0xEF, 0xBC, 0x82, 0x04, 0xBE, 0xC0, 0xE2, 0xB1, 0x99, 0x92, 0x20, 0xD6, 0x6D, 0x77, 0x28, 0x8E, 0x87, 0x15, 0x5B, 0x4F, 0xDB, 0xF4, 0x0C, 0x9B, 0xCD, 0xAE, 0x37, 0x35, 0x0F, 0x8B, 0x50, 0xB9, 0xA0, 0xFD, 0x0B, 0xFB, 0x13, 0x2E, 
		    0xC2, 0x2F, 0x2A, 0x98, 0xBE, 0x4B, 0x05, 0x47, 0xCD, 0xF8, 0xC4, 0x81, 0xA9, 0xE8, 0x1E, 0x64, 0x48, 0x87, 0x36, 0xB8, 0xD0, 0x90, 0x01, 0x84, 0x9D, 0xB6, 0xFB, 0x28, 0x67, 0x55, 0x13, 0x44, 0x0F, 0x32, 0x80, 0xA3, 0x19, 0x7F, 0xCA, 0x18, 0xEC, 0x16, 0x2E, 0x34, 0x50, 0xE7, 0x58, 0x6D, 0x61, 0x1F, 0xFF, 0xE9, 0xA8, 0x12, 0x7E, 0xC9, 0x0B, 0x71, 0x5A, 0x94, 0x3C, 0xED, 0x3F, 0x5F, 0x45, 0x46, 0x25, 0xD9, 0x8B, 0xBB, 0x37, 0xBD, 0xFE, 0xC5, 0xE3, 0x59, 0x7B, 0xD2, 0xF4, 0x11, 0x8C, 0x03, 0x1B, 0xFD, 0x27, 0x24, 0x5D, 0x97, 0x38, 0x4D, 0x41, 0x8F, 0x51, 0x57, 0x2C, 0x56, 0xBF, 0x68, 0x53, 0x99, 0xCB, 0x1D, 0x91, 0x00, 0xD4, 0xA6, 0x88, 0x74, 0x0C, 0x54, 0x0D, 0xE6, 0xBC, 0x6B, 0x5E, 0xC3, 0x8D, 0x8A, 0x62, 0x15, 0xB5, 0x9F, 0x92, 0x09, 0xC8, 0xA5, 0x35, 0x17, 0x31, 0x7A, 0x20, 0x7C, 0x73, 0x86, 0xB1, 0x1A, 0x22, 0x3D, 0x89, 0x29, 0x9A, 0xC6, 0xB7, 0xF7, 0x8E, 0xDB, 0x1C, 0xB0, 0x5B, 0xD7, 0xF9, 0x3E, 0xA7, 0xDD, 0x7D, 0x95, 0xA4, 0xC7, 0xA2, 0x9C, 0x02, 0x04, 0x85, 0xF0, 0x0A, 0xE5, 0xCC, 0xD3, 0x6C, 0x2D, 0xAD, 0xEE, 0xE2, 0x66, 0x9B, 0x10, 0x08, 0x9E, 0x42, 0x63, 0xAE, 0xAC, 0x75, 0x30, 0x39, 0x5C, 0xA0, 0xDC, 0x14, 0xD1, 0xF5, 0xFA, 0x4F, 0xB3, 0xB2, 0xD8, 0xAA, 0x52, 0x2B, 0x4E, 0x76, 0x82, 0x4A, 0x4C, 0xD5, 0xC0, 0xFC, 0xB4, 0x0E, 0xF2, 0xAF, 0x3A, 0xE4, 0x78, 0xEB, 0xEF, 0xBA, 0xB9, 0x26, 0x60, 0x49, 0x65, 0xF3, 0xDA, 0xA1, 0xE1, 0x21, 0xF6, 0x23, 0x72, 0x69, 0xAB, 0xCF, 0xC1, 0x06, 0xD6, 0x40, 0x07, 0x43, 0x70, 0xE0, 0x3B, 0x77, 0xEA, 0x6E, 0xCE, 0x79, 0x96, 0x33, 0x6F, 0x83, 0x6A, 0xDE, 0x93, 0xDF, 0xF1, 
		    0xCA, 0xE6, 0x01, 0xF6, 0x36, 0x38, 0xBE, 0xF8, 0x09, 0x63, 0xFC, 0x4A, 0xEC, 0xA9, 0xAE, 0x5D, 0xD8, 0x46, 0x24, 0xB0, 0xC5, 0xB2, 0x88, 0xC6, 0x7C, 0x54, 0xFD, 0x8C, 0xA5, 0x95, 0x93, 0x28, 0x1A, 0x41, 0xF0, 0xAC, 0x0C, 0x15, 0x5B, 0xDA, 0x11, 0xAB, 0xD7, 0x35, 0xD9, 0x74, 0x94, 0x1E, 0x76, 0xA1, 0x8A, 0xDD, 0xD4, 0x03, 0xE1, 0x73, 0xF3, 0x33, 0xEA, 0x7D, 0xC4, 0x3C, 0x44, 0x6F, 0x68, 0x81, 0xB5, 0x5E, 0x13, 0x5F, 0x56, 0xFA, 0x90, 0xDF, 0x3E, 0x89, 0x0F, 0x9B, 0xF4, 0x1B, 0x99, 0x77, 0x71, 0x0E, 0xBC, 0x05, 0x0A, 0x3F, 0x43, 0x1F, 0x08, 0x27, 0x86, 0x45, 0x22, 0x66, 0x7F, 0x30, 0x97, 0xB6, 0x61, 0x02, 0x47, 0x1D, 0x37, 0xA8, 0xD0, 0xBB, 0xF5, 0xF1, 0xDE, 0x31, 0x53, 0x21, 0x2A, 0xCD, 0xC2, 0x59, 0x9D, 0x69, 0xC3, 0x6C, 0x4D, 0x3A, 0x3D, 0x16, 0x79, 0x0D, 0x2D, 0x8E, 0xD5, 0x4B, 0x84, 0x98, 0x55, 0xE5, 0xA4, 0x07, 0xF9, 0x7E, 0xB8, 0x17, 0xD3, 0x65, 0xB4, 0x75, 0x10, 0xA2, 0xE2, 0xB3, 0xCB, 0x2E, 0x4E, 0x5A, 0x23, 0x0B, 0x52, 0x87, 0x50, 0xEB, 0x20, 0x82, 0x92, 0x48, 0xC0, 0x80, 0x60, 0x96, 0xAA, 0x04, 0xB7, 0xD2, 0x4C, 0xED, 0x72, 0xCF, 0x8D, 0xE4, 0x7A, 0xA3, 0x70, 0xC7, 0x25, 0xF2, 0xEE, 0x1C, 0x6E, 0xFE, 0x18, 0xA0, 0xEF, 0x12, 0xD1, 0x40, 0x5C, 0x19, 0x7B, 0x83, 0x4F, 0xFF, 0x6D, 0xE9, 0xDC, 0x34, 0x14, 0x78, 0x51, 0x58, 0x2F, 0x3B, 0x8B, 0xB9, 0xCC, 0x9A, 0x42, 0xA6, 0x9F, 0xD6, 0x8F, 0x9C, 0xFB, 0x67, 0x6A, 0xBA, 0xB1, 0x2C, 0xCE, 0x2B, 0xE0, 0x57, 0xBF, 0xC8, 0x06, 0xC1, 0x64, 0xF7, 0x85, 0x29, 0x91, 0xBD, 0xC9, 0xAF, 0xE8, 0x00, 0xAD, 0xE7, 0x32, 0xE3, 0x39, 0x62, 0x26, 0xDB, 0x6B, 0x9E, 0x49, 0xA7, 
		    0x64, 0xBC, 0xEF, 0x49, 0x85, 0x07, 0x34, 0x0C, 0x21, 0x1F, 0x01, 0xFF, 0xCE, 0xA3, 0x79, 0xF3, 0xC1, 0x0A, 0x7B, 0xDD, 0x30, 0xE2, 0x59, 0x13, 0x8D, 0x32, 0xCA, 0xD4, 0xC7, 0xBB, 0x67, 0x88, 0xB5, 0x25, 0x81, 0x4B, 0x29, 0x09, 0xE3, 0xD5, 0x40, 0x45, 0x72, 0xA6, 0x4E, 0xAC, 0xC9, 0xD7, 0xB0, 0x35, 0x83, 0x97, 0xC3, 0xB3, 0x82, 0xF2, 0x43, 0xA7, 0x51, 0xF1, 0xD8, 0x95, 0x3A, 0x87, 0x7F, 0x16, 0x61, 0x2B, 0x54, 0x50, 0x5D, 0xCD, 0x48, 0x22, 0xC6, 0xEA, 0xC8, 0x28, 0x4F, 0x60, 0x3B, 0xA2, 0x2A, 0x9F, 0xC5, 0x90, 0x58, 0xB9, 0x31, 0x7D, 0x8B, 0xCF, 0x3F, 0x98, 0xD3, 0x89, 0x65, 0x66, 0x37, 0x6B, 0xFC, 0x42, 0x3E, 0x91, 0xB2, 0xD1, 0x68, 0x80, 0xBF, 0x69, 0x5C, 0xDC, 0x2D, 0x84, 0xA5, 0x47, 0xAB, 0x77, 0x38, 0xA8, 0x6E, 0xE1, 0x74, 0xAF, 0xAE, 0xD2, 0x5B, 0xF8, 0x8C, 0xB1, 0xB8, 0x1D, 0x02, 0xF6, 0x39, 0xDB, 0x57, 0xB6, 0x73, 0xC4, 0xAA, 0x93, 0x52, 0x2C, 0xEB, 0xF9, 0x10, 0xE7, 0x2F, 0x4C, 0x75, 0x94, 0x8F, 0xB4, 0x6C, 0x8E, 0x99, 0xE9, 0x11, 0xB7, 0xBA, 0xE0, 0xA4, 0x7E, 0x23, 0x6F, 0x9A, 0x6A, 0x26, 0x5A, 0x8A, 0xDE, 0x9C, 0xDF, 0x04, 0xBE, 0xFB, 0x36, 0x71, 0x03, 0x76, 0x1A, 0xCB, 0x7C, 0xA1, 0x0B, 0x27, 0xEC, 0x00, 0x33, 0x24, 0x5E, 0x41, 0x0D, 0x0F, 0x15, 0xBD, 0x9D, 0xD0, 0x78, 0xA0, 0xE5, 0x08, 0xC0, 0x96, 0x0E, 0xE8, 0x05, 0x6D, 0xF4, 0xF5, 0x12, 0x44, 0xAD, 0x86, 0x9E, 0xCC, 0x46, 0x3C, 0xE4, 0xED, 0x4D, 0x55, 0xD6, 0x7A, 0x1B, 0x63, 0x9B, 0x14, 0xFE, 0x1C, 0xFD, 0xF0, 0xD9, 0x3D, 0x70, 0xC2, 0xA9, 0x19, 0x18, 0xF7, 0x62, 0xFA, 0x56, 0x20, 0xE6, 0xEE, 0x5F, 0x06, 0x4A, 0x2E, 0x1E, 0x53, 0x17, 0xDA, 0x92, 
		    0x58, 0xD2, 0xED, 0x6E, 0xAB, 0x61, 0xBC, 0xB3, 0x0D, 0x5B, 0x30, 0x00, 0x15, 0x93, 0x34, 0xE4, 0xC2, 0x0A, 0xC9, 0x50, 0xD5, 0x3E, 0xCD, 0x25, 0x98, 0x6F, 0x0F, 0xEB, 0x78, 0x22, 0x8C, 0x08, 0x89, 0xB2, 0x2E, 0x07, 0x14, 0x90, 0x01, 0x92, 0x1C, 0xD7, 0x9D, 0x1E, 0x99, 0xA6, 0x3A, 0xDF, 0x17, 0x63, 0xC3, 0x83, 0x27, 0x76, 0x37, 0xA2, 0x6B, 0x81, 0x71, 0xAF, 0x33, 0x8A, 0x96, 0x85, 0x67, 0xA4, 0xD8, 0x6C, 0x91, 0xDB, 0xB0, 0x36, 0x57, 0xBE, 0xAE, 0xEA, 0x46, 0xE9, 0xE0, 0x3B, 0x48, 0x56, 0x02, 0xE2, 0xF3, 0x8F, 0xB9, 0xB5, 0x6A, 0x54, 0xDA, 0x68, 0x7F, 0x80, 0xAD, 0x9C, 0x1D, 0x7E, 0x10, 0x94, 0xC4, 0xC6, 0x5A, 0x75, 0x20, 0x2D, 0x1B, 0xF9, 0xD4, 0xE7, 0x2B, 0xE8, 0xB7, 0xDC, 0x9E, 0x4D, 0xA0, 0xFB, 0xC1, 0xCC, 0x41, 0xE1, 0xB1, 0x4B, 0x69, 0x84, 0xAA, 0x32, 0xA9, 0x7D, 0x55, 0x88, 0xDD, 0x52, 0x79, 0xCA, 0x49, 0x0E, 0x43, 0x38, 0x12, 0x62, 0xDE, 0x1F, 0x35, 0xB8, 0x74, 0x0B, 0xC7, 0x26, 0xA1, 0xBD, 0x7C, 0xBF, 0xFE, 0x9B, 0x82, 0x40, 0x5E, 0x3F, 0x1A, 0x19, 0x4F, 0xEE, 0x8D, 0xC8, 0x73, 0x7A, 0x2A, 0x2F, 0xCF, 0x4C, 0x9A, 0x03, 0x87, 0x5C, 0x23, 0x66, 0xEF, 0x28, 0x6D, 0xC5, 0x0C, 0x64, 0xAC, 0xA5, 0x7B, 0xB6, 0x5D, 0x5F, 0x11, 0xF7, 0x53, 0xD9, 0xFF, 0x4E, 0x18, 0x06, 0x8E, 0x65, 0xF4, 0x4A, 0x72, 0x8B, 0xF6, 0xF8, 0xD6, 0x09, 0xF5, 0x47, 0xF0, 0xD1, 0xE6, 0xE5, 0x51, 0xCB, 0x39, 0xF1, 0x95, 0x21, 0x05, 0xE3, 0xC0, 0x86, 0xBB, 0xB4, 0x44, 0x04, 0xA7, 0x24, 0x16, 0xBA, 0x3D, 0x42, 0x13, 0xFD, 0x45, 0xCE, 0x9F, 0x59, 0xEC, 0xA3, 0x31, 0xFC, 0x70, 0xD3, 0x77, 0x29, 0x2C, 0xA8, 0xF2, 0x60, 0x3C, 0xD0, 0xFA, 0x97, 
		    0x0A, 0x69, 0x56, 0x87, 0x27, 0x23, 0xC6, 0xB7, 0xA3, 0x59, 0xA8, 0x1C, 0x91, 0xB8, 0xB0, 0x07, 0x66, 0x7A, 0xCF, 0x5F, 0xDC, 0x85, 0x02, 0xF6, 0x67, 0xFB, 0x80, 0x1F, 0xD0, 0xBA, 0x15, 0xAE, 0x10, 0x35, 0x9C, 0xE5, 0x24, 0xD9, 0x31, 0x61, 0x2B, 0xAC, 0x48, 0x21, 0x3D, 0x76, 0xA6, 0xE1, 0x3B, 0xE3, 0x44, 0x57, 0xE0, 0xCE, 0x28, 0x4F, 0xC0, 0x3E, 0x2F, 0xF2, 0x3F, 0x01, 0xB1, 0xB5, 0x73, 0x13, 0x38, 0xBF, 0x08, 0x46, 0x86, 0xF1, 0xEE, 0xF0, 0x3A, 0xBB, 0x71, 0x98, 0x5E, 0x9D, 0xAF, 0x33, 0x97, 0x5A, 0x99, 0x37, 0x0D, 0x47, 0x18, 0x1B, 0x93, 0x2D, 0xBC, 0xAB, 0x32, 0xBD, 0x74, 0xCD, 0x40, 0x04, 0x6E, 0x4E, 0x14, 0xDD, 0xC9, 0x8D, 0x55, 0x50, 0xEA, 0xCB, 0x09, 0x3C, 0x78, 0x54, 0x4A, 0xED, 0xB9, 0x2C, 0x0F, 0x20, 0x82, 0x8F, 0xC4, 0xDE, 0xD1, 0x72, 0xE8, 0x6A, 0x2A, 0xB3, 0x51, 0x4C, 0x16, 0x39, 0x1E, 0x95, 0xF9, 0x81, 0xF8, 0xA2, 0x58, 0xFE, 0x60, 0x79, 0xC2, 0x7C, 0x2E, 0x8E, 0xE2, 0x11, 0xF7, 0xD5, 0x1D, 0x43, 0x8B, 0x36, 0xFF, 0x12, 0x0B, 0x8A, 0xEB, 0x03, 0xFA, 0xF3, 0x52, 0x53, 0x90, 0xD2, 0xD4, 0xAA, 0x6C, 0xBE, 0xEC, 0x0C, 0x6F, 0x9B, 0x88, 0x45, 0xDF, 0xFD, 0xA5, 0x6D, 0x9E, 0xE7, 0x92, 0x7D, 0xDA, 0x1A, 0x77, 0xB6, 0x89, 0xFC, 0x8C, 0xAD, 0x65, 0x64, 0x96, 0xC7, 0x0E, 0x25, 0xC8, 0x17, 0x05, 0x34, 0xA1, 0x62, 0x26, 0xE9, 0xA0, 0xA4, 0x6B, 0x83, 0x30, 0xC5, 0x22, 0x7F, 0xE4, 0x7E, 0x5D, 0x75, 0xB2, 0x19, 0x49, 0xD7, 0xF4, 0x63, 0x5B, 0x00, 0x9A, 0x68, 0xD3, 0xEF, 0x29, 0x94, 0xE6, 0xD6, 0xD8, 0x4B, 0xA9, 0xCC, 0xC1, 0x06, 0xF5, 0x42, 0xA7, 0x4D, 0x84, 0x5C, 0x70, 0x41, 0xB4, 0x9F, 0xC3, 0xDB, 0x7B, 0xCA, 


        	// Salt rows 31-48  
		    0xDE, 0x06, 0xBF, 0xB8, 0x51, 0xA8, 0xE4, 0x1A, 0x92, 0xA7, 0xB5, 0xA9, 0xDF, 0x20, 0x7C, 0xF3, 0x15, 0xE5, 0x1F, 0xC3, 0xCE, 0x26, 0x8F, 0xAF, 0x40, 0x74, 0x6E, 0x38, 0x31, 0x8A, 0x57, 0xAD, 0x2C, 0xAC, 0xB4, 0x2E, 0x5F, 0x5B, 0xAA, 0x83, 0x3D, 0xF1, 0xCC, 0x11, 0x05, 0x27, 0x72, 0xC0, 0x90, 0x0F, 0xED, 0xA5, 0xBB, 0xA6, 0xCB, 0x1C, 0x1E, 0x1D, 0x5E, 0x55, 0xAB, 0xD2, 0xF5, 0x82, 0x4D, 0xDB, 0x43, 0xF7, 0xFD, 0x17, 0x37, 0x22, 0x34, 0x35, 0xB1, 0xC5, 0x94, 0xB9, 0xC4, 0x46, 0xFF, 0x8E, 0xE9, 0x8C, 0xE7, 0xFC, 0x73, 0xE2, 0xA1, 0xFB, 0x6D, 0x1B, 0x2B, 0x7B, 0x5D, 0xD8, 0x60, 0x10, 0xD0, 0x77, 0x42, 0xBD, 0x18, 0x63, 0x0B, 0x6B, 0x97, 0x5C, 0x7D, 0x41, 0x7E, 0x99, 0x6F, 0xD1, 0xF6, 0x9C, 0xDC, 0x00, 0x48, 0x3F, 0x0D, 0xFE, 0x68, 0xE8, 0xAE, 0x86, 0x04, 0x89, 0x2D, 0xCA, 0x12, 0x23, 0xC7, 0x03, 0xD9, 0xB2, 0xEB, 0xE6, 0x36, 0x54, 0x0A, 0xB7, 0x4C, 0x3B, 0x52, 0x2A, 0xD7, 0x21, 0xA4, 0x16, 0x91, 0xEF, 0x3C, 0xBE, 0xF2, 0x5A, 0xEE, 0xFA, 0x24, 0xA2, 0xD5, 0x95, 0x81, 0x02, 0x13, 0xE1, 0x56, 0xB6, 0x93, 0x4A, 0xB0, 0x3A, 0x45, 0x85, 0xE3, 0x30, 0xCD, 0x9B, 0x6C, 0x09, 0x61, 0xC8, 0xF4, 0x9A, 0x58, 0x3E, 0x25, 0x4B, 0x62, 0xC1, 0xEC, 0x78, 0x44, 0x8B, 0x76, 0x59, 0xEA, 0x88, 0x6A, 0x39, 0x75, 0xDD, 0xD6, 0x65, 0x64, 0x19, 0x0C, 0xBC, 0x79, 0x87, 0x80, 0x70, 0xF8, 0x4E, 0x29, 0x07, 0x0E, 0x08, 0x49, 0xA3, 0xD4, 0x96, 0xC2, 0xDA, 0x84, 0x71, 0x33, 0x50, 0x9D, 0x32, 0x9F, 0x53, 0x66, 0xBA, 0x7F, 0x14, 0xD3, 0x2F, 0x67, 0x9E, 0x47, 0x8D, 0x4F, 0xA0, 0x28, 0x01, 0xC9, 0x98, 0xE0, 0x7A, 0xF9, 0xC6, 0xCF, 0x69, 0xB3, 0xF0, 
            0x03, 0xE2, 0x1B, 0xC5, 0xAF, 0x01, 0x47, 0x71, 0xFE, 0x28, 0xEE, 0x60, 0x7A, 0x11, 0x0D, 0xC6, 0xC4, 0x9A, 0x65, 0xE1, 0xDA, 0xF1, 0x53, 0xFB, 0xD5, 0xB4, 0x69, 0xEB, 0x67, 0x2E, 0xE3, 0x85, 0x8F, 0x13, 0x79, 0xF7, 0x08, 0x31, 0x12, 0x56, 0x76, 0xEC, 0xCD, 0x89, 0x05, 0x02, 0x1F, 0x0C, 0x84, 0x23, 0xDD, 0x37, 0x9D, 0xD1, 0xAA, 0xCE, 0x3F, 0xE9, 0x9B, 0xCC, 0x46, 0x07, 0xCA, 0x9F, 0xF0, 0x8C, 0x21, 0x90, 0xF5, 0x59, 0xE4, 0x83, 0x4D, 0xD9, 0x4A, 0x3B, 0x32, 0x34, 0x0F, 0xCB, 0x96, 0x15, 0xA1, 0xD0, 0xBC, 0xB2, 0x6F, 0x7B, 0x6A, 0x16, 0xA3, 0x3C, 0x7C, 0x1C, 0x9C, 0x52, 0x6C, 0x24, 0x5A, 0x27, 0x87, 0x54, 0xA0, 0x35, 0xF3, 0xB3, 0x30, 0x57, 0x44, 0xBB, 0x88, 0xA8, 0xDE, 0xC2, 0xA5, 0xA7, 0x4C, 0x66, 0x5E, 0x92, 0x99, 0x72, 0x5F, 0xAC, 0xC7, 0xD2, 0x51, 0xB8, 0x14, 0xDF, 0xC9, 0x50, 0x8B, 0x43, 0x74, 0xEA, 0xBD, 0x5D, 0x04, 0x97, 0x06, 0xDB, 0x78, 0x6B, 0x26, 0x1A, 0x62, 0x64, 0x1E, 0x10, 0x5B, 0x70, 0x8E, 0x6E, 0xDC, 0xD6, 0xE0, 0x8A, 0x93, 0xC3, 0x49, 0x7E, 0xA9, 0x80, 0x63, 0x3D, 0xAE, 0x29, 0x77, 0x7F, 0x4E, 0x86, 0xB0, 0x45, 0xF8, 0xFD, 0x68, 0xBE, 0xB5, 0x39, 0xC0, 0xEF, 0x2F, 0xD3, 0x82, 0xD4, 0xF4, 0x18, 0xCF, 0xB1, 0xBA, 0x1D, 0xAD, 0x94, 0x42, 0x3A, 0x2A, 0xE5, 0xF2, 0xA6, 0xE7, 0x8D, 0x38, 0x0B, 0x73, 0x48, 0x20, 0x2D, 0x2B, 0x6D, 0x25, 0x7D, 0x19, 0xB6, 0x36, 0x41, 0x9E, 0xFC, 0xFA, 0xE6, 0xED, 0xC1, 0x91, 0xF6, 0x3E, 0x5C, 0x2C, 0x00, 0x33, 0xB7, 0xB9, 0x09, 0xE8, 0xFF, 0xA2, 0x0E, 0x95, 0xD7, 0xAB, 0xBF, 0x61, 0x0A, 0x75, 0xA4, 0xC8, 0x22, 0xF9, 0x81, 0x40, 0x98, 0x4F, 0x4B, 0x58, 0x55, 0xD8, 0x17, 
            0x4A, 0x26, 0x00, 0xAA, 0x74, 0x07, 0x36, 0x7A, 0x43, 0x27, 0x57, 0x37, 0x1F, 0xB2, 0xB7, 0x9C, 0xFB, 0xBB, 0x53, 0x55, 0xED, 0xC3, 0x4F, 0xD4, 0x33, 0xA1, 0xEE, 0xD0, 0xC0, 0xE6, 0x45, 0xAF, 0xF4, 0x20, 0x66, 0x34, 0x75, 0x4B, 0xC5, 0x47, 0x86, 0x73, 0xA6, 0x9A, 0x50, 0xF3, 0x61, 0x9B, 0x0F, 0x81, 0x7E, 0x12, 0xE1, 0x9E, 0x21, 0x99, 0xDF, 0x10, 0x83, 0x51, 0xB0, 0xBF, 0x56, 0x5E, 0x42, 0x2B, 0x40, 0xBD, 0x60, 0x64, 0xF8, 0xDB, 0x1B, 0xAB, 0xFF, 0x4C, 0xB5, 0x70, 0xC2, 0x04, 0x92, 0x6B, 0x6F, 0x78, 0xCA, 0xDE, 0x2F, 0x69, 0xF0, 0x19, 0xE3, 0xFA, 0x80, 0x0E, 0xA2, 0x77, 0x05, 0xBE, 0xA7, 0x96, 0x6A, 0x62, 0x59, 0xC7, 0x2A, 0x5B, 0x5F, 0xAE, 0x3F, 0x95, 0x48, 0x15, 0x68, 0xC8, 0x0C, 0x85, 0xD8, 0xE4, 0xD3, 0xB3, 0xE0, 0xE2, 0x54, 0xAD, 0x29, 0x79, 0x09, 0xFC, 0xA3, 0xB8, 0x67, 0x71, 0xCD, 0xA0, 0xF7, 0x11, 0x0D, 0xFD, 0x3D, 0x3C, 0x6C, 0x6E, 0x82, 0xEA, 0x6D, 0x16, 0xA8, 0x46, 0x3A, 0x5C, 0x52, 0x1E, 0x90, 0x8E, 0x1D, 0xBC, 0x49, 0xEF, 0x31, 0x0A, 0x72, 0xA4, 0x88, 0xA5, 0xE9, 0x97, 0x4E, 0xC9, 0x38, 0x01, 0x28, 0x76, 0x22, 0xF1, 0xB6, 0x65, 0x17, 0x4D, 0x9F, 0x08, 0x30, 0x9D, 0x24, 0x1A, 0x03, 0xD6, 0xDD, 0x41, 0x91, 0x84, 0xF9, 0x98, 0xDC, 0x93, 0x44, 0x14, 0x35, 0x5A, 0x18, 0x23, 0x06, 0x58, 0x3E, 0xEB, 0x13, 0x8B, 0xD2, 0x5D, 0xC1, 0xEC, 0x2E, 0x63, 0xB9, 0xD7, 0xBA, 0xE7, 0xDA, 0xCF, 0x94, 0x0B, 0xFE, 0xB4, 0xE5, 0xD9, 0x32, 0xC4, 0xCE, 0xF6, 0x2C, 0x25, 0x39, 0x87, 0x7D, 0x7C, 0xD1, 0x8D, 0x3B, 0x2D, 0x1C, 0xC6, 0x8C, 0xD5, 0xE8, 0x7F, 0xCC, 0x89, 0xA9, 0x02, 0x8F, 0xF5, 0xCB, 0x8A, 0xAC, 0xB1, 0x7B, 0xF2, 
            0x45, 0xD5, 0x30, 0x57, 0x51, 0x9B, 0x3F, 0x3C, 0xF4, 0xF5, 0xEB, 0xBA, 0xED, 0x7A, 0x97, 0x87, 0x6C, 0xB8, 0x72, 0xCC, 0xBF, 0xA1, 0x4C, 0x92, 0xFC, 0xCF, 0xAE, 0xD9, 0x12, 0xD0, 0xD2, 0x23, 0x60, 0x36, 0x7D, 0x0F, 0x69, 0x89, 0xC1, 0x4E, 0xE6, 0xDB, 0xD3, 0xB9, 0xBD, 0x48, 0xEF, 0xF2, 0xD8, 0x55, 0x5F, 0x04, 0xAB, 0xFD, 0x79, 0x14, 0x17, 0x9D, 0xA5, 0xAF, 0xB2, 0x64, 0xF8, 0x5E, 0x65, 0x66, 0x4F, 0xE0, 0xBE, 0x0C, 0xBC, 0x8C, 0x01, 0x46, 0x31, 0x80, 0xDC, 0x5D, 0x29, 0x16, 0xC9, 0x7B, 0xE5, 0x1E, 0x06, 0x70, 0xC4, 0x11, 0xB4, 0x53, 0x07, 0xFB, 0xA4, 0x34, 0xDA, 0x1F, 0xFF, 0x61, 0x35, 0x42, 0xA0, 0xCD, 0xDF, 0x9E, 0x32, 0xC6, 0xEC, 0xD4, 0x6F, 0x1C, 0x73, 0xB7, 0x41, 0xD7, 0x9A, 0x63, 0x50, 0x8E, 0x86, 0x47, 0xAD, 0x68, 0xC0, 0xC5, 0x58, 0x76, 0x8A, 0x91, 0x74, 0x39, 0x37, 0xF3, 0x38, 0x3A, 0x0B, 0x95, 0x33, 0x0A, 0xE9, 0xB6, 0x49, 0x1A, 0x4B, 0x78, 0x93, 0x21, 0x9C, 0x24, 0x2C, 0x25, 0x7C, 0x5A, 0xB0, 0xC3, 0xA8, 0x6B, 0xB1, 0x09, 0x98, 0x67, 0x6A, 0xE1, 0x84, 0xEA, 0x77, 0x71, 0xCA, 0x10, 0xD1, 0x28, 0x18, 0x59, 0x3E, 0xC2, 0x6E, 0x5B, 0x26, 0x44, 0x82, 0x8D, 0xEE, 0x56, 0xA6, 0x1D, 0x90, 0x62, 0xE2, 0xCE, 0xC7, 0xA7, 0xF9, 0xA2, 0x2F, 0x2A, 0x2E, 0x83, 0x4D, 0x81, 0xC8, 0x96, 0x75, 0x40, 0xAC, 0x6D, 0x88, 0x22, 0x27, 0x13, 0x2D, 0xE4, 0x54, 0xE3, 0xAA, 0x00, 0x7E, 0x3B, 0xA3, 0x94, 0x43, 0x7F, 0x99, 0xF6, 0xF7, 0x0E, 0x15, 0x52, 0xDE, 0xE7, 0xFA, 0xCB, 0xD6, 0x1B, 0x85, 0xF1, 0xFE, 0xA9, 0x0D, 0xBB, 0x9F, 0x20, 0x5C, 0x4A, 0xB3, 0x19, 0x2B, 0x8F, 0xDD, 0xF0, 0xE8, 0x03, 0x02, 0x05, 0x8B, 0x08, 0x3D, 0xB5, 
            0xCC, 0x1E, 0xC8, 0x13, 0x07, 0x6F, 0x5E, 0x51, 0x0A, 0xE7, 0x4B, 0x2D, 0x82, 0x68, 0x53, 0x71, 0x6B, 0xDC, 0xAE, 0x57, 0xAA, 0xB0, 0x42, 0xF0, 0xFB, 0x77, 0x95, 0xCF, 0x0B, 0x03, 0x58, 0x99, 0xE3, 0xD9, 0x6C, 0xD5, 0x64, 0x45, 0xA1, 0x41, 0xF6, 0x12, 0xB5, 0x3C, 0x01, 0x10, 0x49, 0x62, 0x88, 0xBA, 0xCE, 0x97, 0x0C, 0x20, 0xF5, 0x81, 0xC1, 0x05, 0x5F, 0x2F, 0xA5, 0xA2, 0x6E, 0x2C, 0xDF, 0x0F, 0xCD, 0xA8, 0x7A, 0xC5, 0x7B, 0xC6, 0x38, 0xB4, 0x7F, 0x73, 0x4F, 0x9A, 0x36, 0x06, 0x1C, 0x15, 0xFD, 0x0E, 0x29, 0xCB, 0xEC, 0xD1, 0x46, 0x0D, 0xE0, 0x78, 0x74, 0x9D, 0x9E, 0x9F, 0x94, 0xE5, 0x02, 0x9C, 0x04, 0xD6, 0x98, 0xBC, 0x8D, 0x8A, 0xD7, 0x31, 0xB3, 0x2B, 0xE1, 0xBF, 0x92, 0x86, 0x4D, 0xC0, 0xB2, 0xC4, 0x5B, 0x55, 0x69, 0x4A, 0xF7, 0xDA, 0xAC, 0xAD, 0x54, 0x32, 0xD3, 0xAB, 0x67, 0xEF, 0x14, 0xEA, 0x35, 0x96, 0x70, 0xA3, 0x50, 0xE8, 0x5D, 0xF9, 0x7E, 0xDD, 0x2E, 0x7D, 0x1A, 0xCA, 0x30, 0xC9, 0xF8, 0x00, 0x66, 0x87, 0x5C, 0x91, 0x84, 0x26, 0x24, 0x47, 0x83, 0x8E, 0xF3, 0xDE, 0x3F, 0x3D, 0x59, 0x80, 0xFE, 0x93, 0xA7, 0x8F, 0xB9, 0xB8, 0x8B, 0xEE, 0x22, 0xF2, 0xBE, 0x4C, 0x79, 0xFA, 0x28, 0x09, 0x3A, 0x76, 0xA0, 0x16, 0x61, 0xDB, 0xEB, 0xE9, 0x85, 0xE6, 0x90, 0x3E, 0xD2, 0x6D, 0xC7, 0x65, 0x2A, 0x48, 0xFC, 0xBD, 0xA4, 0xAF, 0xFF, 0xA9, 0x72, 0x34, 0xB6, 0x60, 0x1D, 0x40, 0x4E, 0xB7, 0x44, 0x1B, 0x8C, 0xF4, 0x6A, 0xBB, 0x21, 0x39, 0xD8, 0xE4, 0x52, 0x3B, 0x89, 0x33, 0x7C, 0xD0, 0xF1, 0x27, 0x63, 0x9B, 0x1F, 0x23, 0x11, 0x75, 0x17, 0x56, 0xE2, 0x5A, 0x25, 0x19, 0xB1, 0xD4, 0xED, 0x08, 0x18, 0xA6, 0xC2, 0xC3, 0x37, 0x43, 
            0x91, 0x30, 0xEE, 0xAE, 0xBA, 0x69, 0x08, 0xEA, 0x58, 0xCF, 0x84, 0x2C, 0x0F, 0x7D, 0xF9, 0x5A, 0x98, 0xA2, 0xBD, 0x94, 0xE9, 0x06, 0x5D, 0xF5, 0x9C, 0x63, 0x25, 0xFA, 0x13, 0x38, 0xF2, 0xB3, 0xA9, 0x20, 0xD3, 0x23, 0x96, 0x14, 0x1B, 0x31, 0x33, 0x27, 0x24, 0x9D, 0xC8, 0x88, 0xE3, 0x8B, 0x82, 0x73, 0xE7, 0x47, 0x22, 0xBF, 0x1F, 0x93, 0xD7, 0x11, 0x16, 0x62, 0x18, 0x4B, 0x8D, 0x39, 0xF8, 0xC4, 0x40, 0xB2, 0x1A, 0x45, 0x46, 0x9E, 0x83, 0xEB, 0x59, 0x43, 0x8A, 0xA8, 0x65, 0x3E, 0xD2, 0xE5, 0xC2, 0x7A, 0x03, 0xDA, 0x79, 0x75, 0x6C, 0x4F, 0x6F, 0x5B, 0xCC, 0x57, 0xAC, 0x66, 0x56, 0xF7, 0xA7, 0x21, 0x44, 0xCA, 0xF1, 0xB1, 0xFE, 0x1D, 0x5C, 0x6E, 0xDF, 0x2A, 0x5F, 0xA6, 0xBE, 0x28, 0x99, 0x09, 0x89, 0x0D, 0xB6, 0xC9, 0x29, 0x9B, 0x19, 0x3F, 0xFC, 0xC5, 0x86, 0x1C, 0x53, 0xC6, 0x78, 0x74, 0xD5, 0x9F, 0x4A, 0xF0, 0x1E, 0x77, 0x2D, 0x37, 0xE8, 0x3C, 0x55, 0x4E, 0x0A, 0xF4, 0x02, 0x2E, 0x17, 0xA3, 0x64, 0x3B, 0xD9, 0x10, 0xEF, 0x12, 0x6D, 0x7C, 0xB4, 0xBB, 0xCE, 0x2B, 0x26, 0x48, 0xC3, 0x68, 0xD0, 0x51, 0x67, 0xD8, 0x72, 0xFD, 0x90, 0x0B, 0x7B, 0xBC, 0xA1, 0xEC, 0xCD, 0xD6, 0xD1, 0x01, 0x05, 0xFB, 0x49, 0xED, 0x3D, 0xB8, 0x8E, 0xB0, 0xC7, 0xB5, 0xAA, 0xE2, 0xF3, 0x97, 0x32, 0x15, 0xDD, 0xCB, 0x85, 0x41, 0x6A, 0x54, 0x61, 0x36, 0xDE, 0x5E, 0xA5, 0xFF, 0x76, 0x07, 0xDC, 0x2F, 0x87, 0x50, 0x3A, 0x60, 0x92, 0x0E, 0xE1, 0xDB, 0x7F, 0xB7, 0xC0, 0xE6, 0x34, 0x80, 0x04, 0x70, 0xB9, 0xE4, 0x4C, 0x6B, 0x00, 0x42, 0x95, 0xC1, 0x8F, 0xAD, 0x7E, 0x81, 0x4D, 0x71, 0x35, 0xE0, 0x0C, 0xA4, 0xF6, 0x9A, 0x8C, 0xA0, 0xAB, 0xAF, 0xD4, 0x52, 
            0x8A, 0x80, 0xCF, 0x13, 0xFA, 0x33, 0xA2, 0x22, 0xD4, 0x91, 0x0F, 0xB1, 0x84, 0x2E, 0x94, 0xE6, 0xEF, 0x2D, 0xFD, 0x05, 0xBB, 0x01, 0xC1, 0x39, 0x9F, 0x63, 0xC8, 0x32, 0xEB, 0x95, 0x4F, 0x69, 0x23, 0x38, 0x58, 0x85, 0x71, 0xE9, 0x4E, 0xDF, 0x2B, 0x3C, 0xFE, 0xAA, 0x90, 0xB2, 0x51, 0x1D, 0xA5, 0x7A, 0x00, 0x5F, 0x4A, 0x02, 0x73, 0x72, 0x1A, 0x86, 0x7C, 0xDC, 0xC4, 0x4D, 0x75, 0xEA, 0x35, 0xBC, 0x98, 0x9D, 0xC5, 0xD0, 0x65, 0xB8, 0xF1, 0xA8, 0x1F, 0xBE, 0x60, 0xCB, 0x26, 0x06, 0xA4, 0x55, 0xF2, 0x97, 0x62, 0xE5, 0x37, 0xB3, 0x6C, 0x6B, 0x1C, 0xB9, 0x7B, 0xCA, 0xB0, 0x0C, 0x40, 0x93, 0xDA, 0x5C, 0xAF, 0x5D, 0x3F, 0x41, 0xEE, 0xBD, 0x77, 0xA0, 0x61, 0x92, 0x8C, 0xD8, 0xAE, 0xB5, 0x83, 0x7D, 0x64, 0xFB, 0x78, 0xF9, 0x29, 0x5B, 0xC9, 0xF5, 0x08, 0x48, 0xED, 0xDB, 0xFC, 0xD1, 0x82, 0x87, 0xCC, 0x54, 0x74, 0x42, 0x16, 0xE7, 0xD5, 0xAC, 0xE3, 0x14, 0xDD, 0x79, 0x2C, 0x7E, 0x56, 0xF3, 0xCD, 0x27, 0xCE, 0x70, 0x76, 0x24, 0x67, 0xF7, 0xBA, 0x57, 0x53, 0x25, 0x81, 0xB4, 0xC7, 0x68, 0x10, 0xE8, 0x4B, 0x9E, 0x43, 0x9B, 0x04, 0x45, 0xC0, 0xC3, 0x03, 0xD2, 0x7F, 0xA7, 0x49, 0xF4, 0xB7, 0xA1, 0x8E, 0x96, 0x09, 0x6D, 0x0A, 0x47, 0x8D, 0x3D, 0xD6, 0xB6, 0x50, 0xFF, 0x9A, 0xAD, 0x07, 0x3E, 0x6F, 0x8F, 0xF6, 0x6E, 0xAB, 0xA3, 0x2F, 0x0B, 0xBF, 0xEC, 0xD7, 0x20, 0x99, 0xF8, 0x19, 0x0E, 0x8B, 0x44, 0x52, 0x46, 0x12, 0x0D, 0xDE, 0xE4, 0x31, 0xA9, 0x5E, 0x88, 0x15, 0x9C, 0x1E, 0xC2, 0x28, 0x6A, 0x89, 0xA6, 0x59, 0x1B, 0x18, 0xD9, 0xE2, 0xD3, 0x3A, 0x17, 0xC6, 0x3B, 0xF0, 0xE1, 0x36, 0x34, 0x4C, 0x5A, 0x66, 0x2A, 0xE0, 0x21, 0x11, 0x30, 
            0xDC, 0x18, 0x7C, 0xC3, 0xA7, 0x72, 0xED, 0x9D, 0x44, 0x6B, 0xC1, 0x27, 0x0F, 0x51, 0x50, 0xAE, 0xE5, 0x85, 0x22, 0xBD, 0x96, 0xA4, 0x79, 0x7A, 0x95, 0x74, 0xE0, 0xD8, 0xC4, 0x8A, 0x41, 0xF4, 0xB0, 0x63, 0x93, 0x31, 0xFA, 0xBB, 0x0C, 0xB9, 0xFC, 0x97, 0x61, 0xB1, 0xBE, 0x0D, 0x9E, 0xCA, 0x3D, 0x39, 0xBF, 0x5A, 0x0E, 0x10, 0x67, 0xC0, 0x58, 0x2F, 0xA0, 0x23, 0xD3, 0x09, 0xDF, 0xB6, 0x4F, 0xFF, 0x40, 0xD5, 0xD9, 0x16, 0x24, 0x8E, 0x3E, 0x28, 0xC6, 0x3A, 0x62, 0x42, 0xE2, 0x4C, 0x48, 0xAB, 0x37, 0xA2, 0x1D, 0xCF, 0xB4, 0x1A, 0x8D, 0x2D, 0x13, 0x94, 0x9F, 0xEB, 0x30, 0xB5, 0x20, 0xC2, 0x68, 0x87, 0x52, 0x04, 0xF2, 0xF1, 0x36, 0x0B, 0x33, 0xD0, 0xC7, 0x5B, 0x08, 0x78, 0xDA, 0xEF, 0x2A, 0x14, 0x64, 0x57, 0xF7, 0x49, 0xA1, 0xD6, 0xDB, 0x6A, 0x92, 0x19, 0xE8, 0xBA, 0x1C, 0xF6, 0x2E, 0x4E, 0xA8, 0x3C, 0x82, 0xE9, 0xB3, 0x80, 0xD2, 0xCD, 0x86, 0x59, 0xAD, 0xCB, 0x06, 0x70, 0x03, 0x66, 0x99, 0xF8, 0x5F, 0x32, 0x65, 0x47, 0x6C, 0x34, 0x69, 0x7F, 0xC9, 0x71, 0x12, 0x60, 0x91, 0xB8, 0x83, 0xE1, 0x45, 0xBC, 0xD7, 0xCE, 0x43, 0x5D, 0x25, 0xEE, 0xE4, 0xD1, 0xF9, 0xD4, 0x0A, 0x3B, 0x4A, 0x05, 0x17, 0xA5, 0x89, 0x90, 0x56, 0x01, 0x55, 0xE6, 0xE7, 0xDE, 0x88, 0xF5, 0xC8, 0x7D, 0x8B, 0x11, 0xA9, 0x73, 0x21, 0xF3, 0xAA, 0x8C, 0xC5, 0x07, 0xFB, 0xF0, 0xB7, 0x6D, 0x53, 0x7B, 0x38, 0x76, 0x02, 0x4B, 0x54, 0xDD, 0x7E, 0xE3, 0x9C, 0x46, 0x29, 0x84, 0x9B, 0x1B, 0x00, 0x26, 0x5C, 0xCC, 0x1E, 0x35, 0xEA, 0xEC, 0xFD, 0x98, 0xA6, 0x15, 0x3F, 0x2B, 0x4D, 0xAF, 0x77, 0x6F, 0x9A, 0xB2, 0x75, 0xAC, 0xFE, 0x6E, 0x81, 0x1F, 0xA3, 0x8F, 0x2C, 0x5E, 

            0xF3, 0xFD, 0xFC, 0xD1, 0xF1, 0x88, 0xB6, 0x9C, 0x77, 0x10, 0x03, 0x14, 0x43, 0xA5, 0x13, 0x07, 0xB2, 0x1C, 0x80, 0x42, 0x19, 0x94, 0x5D, 0xE7, 0x3D, 0x7A, 0x24, 0xB9, 0xE8, 0x45, 0x1B, 0x20, 0x87, 0x2B, 0x4C, 0x70, 0xD6, 0x0B, 0x68, 0xBD, 0xBA, 0x11, 0x8F, 0x32, 0x34, 0x6C, 0xC2, 0x40, 0x78, 0x54, 0xB1, 0xF0, 0x1A, 0xE5, 0x89, 0x79, 0x00, 0x3A, 0xCF, 0x46, 0x39, 0xE3, 0xA7, 0x66, 0x9E, 0x8B, 0x12, 0x7F, 0x82, 0xA2, 0x04, 0x5F, 0x73, 0x59, 0x91, 0xDC, 0x01, 0x0C, 0xFB, 0xC1, 0xF2, 0x1D, 0x05, 0x47, 0x75, 0x4D, 0xF4, 0x99, 0xC0, 0x62, 0x41, 0x95, 0x3B, 0x08, 0xCB, 0x2F, 0xEE, 0xB7, 0x8D, 0x49, 0xB5, 0xFF, 0xCC, 0xDB, 0xDA, 0xF6, 0x2C, 0x5B, 0x7C, 0x33, 0x60, 0xAF, 0x06, 0x6D, 0xB0, 0x5A, 0xD0, 0xEB, 0x51, 0xCA, 0x26, 0x96, 0x74, 0x9A, 0x55, 0xF5, 0x93, 0x3E, 0xBF, 0x15, 0xD2, 0x98, 0xC4, 0xC8, 0x35, 0x9D, 0x3F, 0xEF, 0x17, 0x2A, 0x63, 0x81, 0x8C, 0x72, 0x44, 0xF8, 0x58, 0xFE, 0xB4, 0xD7, 0xA4, 0x4E, 0xB3, 0x30, 0xCD, 0x83, 0x21, 0x85, 0x5E, 0x7E, 0x02, 0xC5, 0xC9, 0xAD, 0x50, 0x31, 0x8A, 0xA9, 0xDE, 0xE6, 0x7B, 0xEA, 0xEC, 0x4B, 0xE2, 0x92, 0xDD, 0x0A, 0xD4, 0x76, 0x1E, 0x0D, 0x52, 0xA6, 0x27, 0xD9, 0xDF, 0x90, 0xAC, 0x2E, 0xBE, 0x67, 0xF9, 0x36, 0x29, 0x6A, 0x9F, 0xAB, 0x86, 0x18, 0xA1, 0xE0, 0x69, 0xD3, 0x6F, 0x38, 0x3C, 0xA3, 0xD8, 0xC7, 0x48, 0xED, 0x53, 0x9B, 0x22, 0xC3, 0x56, 0xC6, 0xBC, 0x61, 0x6E, 0x57, 0x97, 0xE9, 0xB8, 0xAE, 0x84, 0x5C, 0x28, 0x8E, 0xA0, 0xE1, 0x37, 0x4A, 0xCE, 0x71, 0xF7, 0x2D, 0x23, 0xBB, 0x4F, 0xFA, 0x65, 0x0F, 0x7D, 0x1F, 0x64, 0x6B, 0x09, 0x16, 0x25, 0x0E, 0xE4, 0xA8, 0xAA, 0xD5, 
            0xC7, 0x53, 0x8A, 0xA1, 0x93, 0x88, 0x60, 0x1C, 0x1E, 0x5F, 0x46, 0x3E, 0x55, 0xDB, 0xE1, 0x7E, 0xCC, 0xEA, 0x2B, 0x1A, 0x83, 0xC8, 0x07, 0x2A, 0xFC, 0xC3, 0x3C, 0xAE, 0x97, 0x7D, 0x5D, 0xB0, 0xC9, 0x20, 0x63, 0xCE, 0x62, 0x78, 0x17, 0x28, 0xE7, 0x4F, 0x23, 0xA6, 0x81, 0x6A, 0xC2, 0xD6, 0xE4, 0x5C, 0xAC, 0xB5, 0x91, 0xF2, 0xE0, 0xA8, 0x39, 0x6D, 0xA4, 0x8B, 0x40, 0x37, 0x02, 0xA2, 0xE8, 0x06, 0xB2, 0x27, 0x0D, 0x44, 0x96, 0x35, 0xCF, 0xB7, 0x0E, 0xB8, 0xAA, 0xF4, 0xB4, 0x04, 0x75, 0xA0, 0x3B, 0xF7, 0x98, 0x79, 0xBA, 0xAF, 0x92, 0x29, 0xF0, 0x26, 0x59, 0x58, 0x61, 0xBC, 0xE2, 0x5A, 0x38, 0x7F, 0x89, 0xEE, 0x0B, 0x54, 0x2F, 0x8E, 0xF3, 0x77, 0x68, 0xCA, 0xEC, 0x0C, 0x8F, 0xB1, 0x0F, 0x84, 0x8C, 0x41, 0xFD, 0x50, 0xF9, 0x9A, 0x67, 0x1B, 0xDD, 0xE5, 0xD5, 0x56, 0x05, 0xF1, 0x1D, 0x48, 0xD0, 0xEF, 0x16, 0xFF, 0xAD, 0xDC, 0x8D, 0x25, 0xCD, 0xED, 0x12, 0x00, 0xC5, 0xC1, 0xF6, 0xDA, 0x95, 0x6E, 0x10, 0x3F, 0x99, 0xF5, 0x9E, 0x33, 0x72, 0xC0, 0x80, 0x74, 0xF8, 0x87, 0xFA, 0xC6, 0x11, 0x34, 0xE9, 0xEB, 0xCB, 0x3A, 0xA3, 0x2D, 0x57, 0x9C, 0xA9, 0xB6, 0x4E, 0xBD, 0x66, 0x36, 0x4D, 0x7C, 0x21, 0x32, 0x1F, 0x09, 0xB3, 0x6F, 0x2C, 0xC4, 0xB9, 0x30, 0x4C, 0x65, 0x70, 0x7B, 0x15, 0x08, 0x2E, 0xFE, 0x6B, 0x7A, 0x5B, 0xD9, 0xAB, 0xD8, 0xE6, 0xBB, 0x19, 0x5E, 0x03, 0xD1, 0x9D, 0xD4, 0xFB, 0x85, 0xDF, 0xD3, 0xD2, 0x49, 0x6C, 0x45, 0xA7, 0x76, 0x73, 0x94, 0xDE, 0x71, 0x51, 0xBF, 0xA5, 0x43, 0xE3, 0x01, 0x4A, 0x9B, 0x3D, 0x4B, 0x82, 0x52, 0x13, 0x31, 0x22, 0x9F, 0x18, 0x42, 0x90, 0x47, 0x24, 0x14, 0x0A, 0x69, 0xD7, 0x64, 0x86, 0xBE, 
            0xB7, 0x22, 0x29, 0xE0, 0x86, 0x3A, 0x14, 0x02, 0xC4, 0xEC, 0xAD, 0x6E, 0x8D, 0xB0, 0xDE, 0x7B, 0xE8, 0x8E, 0x6A, 0x34, 0x4D, 0xFC, 0xF7, 0x4C, 0xA6, 0x89, 0xB1, 0xDF, 0x13, 0xEB, 0x8B, 0xD7, 0x1E, 0x96, 0xE2, 0xFD, 0x9D, 0x40, 0x3B, 0x3C, 0x8F, 0x25, 0x51, 0x17, 0x61, 0xF6, 0x81, 0xE1, 0xEA, 0xBE, 0x5C, 0xC1, 0xE4, 0x1C, 0xA3, 0xC9, 0xAB, 0xC7, 0xA8, 0xA9, 0x2E, 0x4B, 0x2D, 0x54, 0x73, 0x6C, 0x0F, 0x36, 0x58, 0x11, 0x1B, 0xA1, 0x6F, 0x43, 0x79, 0x4E, 0x99, 0x62, 0xDD, 0x12, 0x72, 0x69, 0xBF, 0x44, 0x65, 0x3D, 0x42, 0xDA, 0x92, 0xE6, 0x63, 0x82, 0xF2, 0xE3, 0x80, 0x9C, 0x20, 0xBD, 0x0A, 0xF9, 0xF5, 0x37, 0x2B, 0xEE, 0x3E, 0x52, 0xD0, 0xCF, 0x00, 0xB4, 0x4A, 0xA2, 0xC3, 0x85, 0x2F, 0x71, 0xC6, 0xED, 0xCD, 0x5B, 0xFE, 0x10, 0xD6, 0x5E, 0x49, 0x1A, 0xC2, 0x19, 0xCC, 0x15, 0xC8, 0xEF, 0x06, 0x83, 0xC5, 0x7C, 0x95, 0x50, 0x7D, 0x68, 0xBC, 0x08, 0xB8, 0x74, 0x8A, 0x87, 0x0E, 0x27, 0xBB, 0xDB, 0x03, 0x1D, 0xD1, 0x21, 0x28, 0x01, 0xA0, 0x4F, 0xE9, 0x24, 0x31, 0x6D, 0xA7, 0x09, 0xD8, 0xF1, 0x77, 0xD5, 0x53, 0xC0, 0xD4, 0xA4, 0x9A, 0x04, 0xCE, 0xF8, 0x59, 0x33, 0x48, 0xD3, 0xCB, 0x7F, 0x0C, 0xE7, 0xAF, 0x46, 0xD9, 0xF0, 0x47, 0x07, 0xE5, 0x38, 0x1F, 0x93, 0x35, 0x98, 0x75, 0x41, 0x3F, 0x23, 0x9E, 0x18, 0x88, 0x7A, 0x94, 0x45, 0x67, 0xB6, 0x9B, 0x32, 0x57, 0x9F, 0x56, 0xBA, 0x66, 0xDC, 0xB9, 0xF4, 0xA5, 0x5D, 0x78, 0xD2, 0x91, 0x97, 0x16, 0xFF, 0xAA, 0x90, 0xCA, 0x2C, 0x05, 0x55, 0x84, 0xF3, 0xAE, 0x0B, 0x5F, 0xB2, 0x30, 0x6B, 0xFA, 0x0D, 0xFB, 0x64, 0x70, 0x7E, 0xB3, 0xAC, 0xB5, 0x76, 0x8C, 0x39, 0x26, 0x5A, 0x60, 0x2A, 
            0x9A, 0x36, 0xD6, 0xDA, 0x66, 0x28, 0x7E, 0x9E, 0x62, 0x8F, 0xFB, 0xE2, 0x87, 0xAA, 0x8D, 0xEF, 0x11, 0x71, 0x05, 0xA2, 0x41, 0xE8, 0xA5, 0x3F, 0xCB, 0x90, 0x89, 0x1A, 0x34, 0x16, 0x17, 0x92, 0xD8, 0x04, 0x70, 0x48, 0x0F, 0xA9, 0x98, 0x07, 0x8A, 0xF0, 0xDC, 0xBB, 0xDB, 0x1D, 0xB8, 0x2B, 0xD3, 0x63, 0x7A, 0xB4, 0xAE, 0x22, 0x5F, 0x75, 0xC1, 0xE7, 0x26, 0xE4, 0x72, 0x4C, 0x94, 0x55, 0xF6, 0x02, 0xBC, 0xEA, 0x3D, 0xF3, 0x18, 0x74, 0x8B, 0x84, 0x43, 0xB9, 0x53, 0x0C, 0xC4, 0x73, 0x27, 0xBF, 0x9B, 0xD5, 0x20, 0x01, 0xF2, 0x77, 0x44, 0x97, 0x54, 0x3C, 0xC8, 0x0D, 0xD0, 0x52, 0x15, 0x58, 0x5C, 0x2F, 0xB7, 0x0B, 0x5B, 0x31, 0xCC, 0x35, 0xD9, 0x64, 0x3A, 0x5D, 0xE3, 0x19, 0x33, 0x09, 0x57, 0x3B, 0x25, 0x4E, 0x0A, 0x60, 0x45, 0x6F, 0xD7, 0x5A, 0xEE, 0xA8, 0xF5, 0xF4, 0x10, 0xA1, 0x00, 0xA3, 0x88, 0xBE, 0x46, 0xC6, 0x51, 0x4F, 0xAF, 0xCE, 0x6A, 0x1B, 0x8E, 0x47, 0xA7, 0x1E, 0x03, 0x0E, 0xAD, 0xB0, 0xE9, 0xF1, 0x12, 0xFD, 0xDF, 0x80, 0x85, 0x79, 0x29, 0x08, 0x24, 0x7B, 0x06, 0x38, 0x65, 0x8C, 0xFA, 0x49, 0x86, 0x61, 0xB2, 0xED, 0xD4, 0xB6, 0xCD, 0x69, 0xEC, 0x9C, 0xF8, 0x99, 0x78, 0xC3, 0x83, 0xFC, 0x6E, 0x82, 0x4A, 0xA4, 0xB5, 0xBA, 0xDD, 0x4B, 0x40, 0x4D, 0xF7, 0xBD, 0xA0, 0x30, 0x9D, 0xEB, 0x2E, 0x67, 0x7F, 0xCF, 0xC9, 0xE6, 0xB3, 0x76, 0xE5, 0xE1, 0xC2, 0x32, 0x37, 0xA6, 0xB1, 0x56, 0xFF, 0x91, 0x21, 0x2D, 0x42, 0xD1, 0x13, 0xDE, 0x9F, 0xCA, 0x95, 0x2C, 0xC5, 0xAB, 0xC0, 0xC7, 0x1C, 0x2A, 0x23, 0x1F, 0x81, 0x3E, 0x59, 0x14, 0x6C, 0xAC, 0xF9, 0x96, 0x50, 0xD2, 0x39, 0x68, 0x93, 0xFE, 0x6B, 0x5E, 0x6D, 0xE0, 0x7C, 0x7D, 
            0x47, 0x69, 0x67, 0xC6, 0xF9, 0xC8, 0x61, 0x17, 0x1A, 0x05, 0x00, 0xD4, 0x2C, 0xA6, 0x2F, 0x5E, 0x75, 0x13, 0x28, 0x12, 0xBC, 0x88, 0x44, 0x2A, 0x46, 0x99, 0x29, 0x91, 0x14, 0xE3, 0x83, 0x70, 0x02, 0x03, 0x21, 0xEB, 0x94, 0x64, 0xDB, 0x82, 0xDC, 0xE5, 0x6B, 0x45, 0xD0, 0x38, 0xA8, 0xBE, 0x54, 0x60, 0x2B, 0xAD, 0xF2, 0xBF, 0x7D, 0x0A, 0x08, 0x63, 0x52, 0x79, 0xB0, 0x24, 0x7B, 0xDF, 0x5C, 0xB3, 0x1E, 0x93, 0x6D, 0xA9, 0x1C, 0x0E, 0xFE, 0x16, 0xB7, 0x2E, 0x53, 0x72, 0x37, 0xCE, 0x5F, 0x18, 0xC5, 0x96, 0x73, 0x76, 0x66, 0x89, 0x5D, 0xB4, 0xB1, 0x43, 0x3D, 0xFF, 0x74, 0x06, 0xC0, 0x40, 0x1B, 0x6E, 0x50, 0xF7, 0x8F, 0x3E, 0x32, 0x20, 0x9E, 0xCC, 0x9D, 0xFA, 0x1F, 0xA4, 0xA0, 0x58, 0x65, 0x33, 0xFC, 0x71, 0xD2, 0x77, 0x7E, 0x8B, 0xA7, 0x19, 0xEC, 0x6C, 0x1D, 0xF5, 0x68, 0x39, 0x92, 0xCA, 0xB6, 0xA5, 0x25, 0x81, 0x34, 0x8C, 0xE0, 0x51, 0x8D, 0x87, 0xD1, 0x11, 0xA2, 0xDD, 0x3F, 0xCB, 0xE2, 0xEE, 0x7F, 0xED, 0xFB, 0x42, 0x23, 0x48, 0xF1, 0xD5, 0x4D, 0x57, 0x01, 0xE4, 0x3A, 0xBA, 0xC3, 0x8A, 0x9F, 0x04, 0x5A, 0xB8, 0xDE, 0xE8, 0x09, 0x56, 0x4E, 0xFD, 0x41, 0xEA, 0x0F, 0xF6, 0xF4, 0xB2, 0xA1, 0xAC, 0xDA, 0x07, 0xCF, 0x10, 0xD8, 0xE9, 0xC9, 0x9C, 0x80, 0x4A, 0xF3, 0xF8, 0xB5, 0x8E, 0xAF, 0x55, 0xAE, 0x95, 0x97, 0x90, 0xD7, 0x9B, 0x49, 0x4F, 0x98, 0x9A, 0x26, 0x62, 0x2D, 0xAA, 0xC7, 0xE7, 0xD6, 0x4B, 0xCD, 0x78, 0x3B, 0xBD, 0xC2, 0xC4, 0x27, 0xEF, 0x6A, 0x4C, 0xBB, 0x22, 0xB9, 0x3C, 0xD9, 0xAB, 0xF0, 0x7A, 0x15, 0xE6, 0x36, 0xA3, 0x35, 0x31, 0x0C, 0x7C, 0x6F, 0x0B, 0x30, 0x0D, 0xD3, 0x86, 0x59, 0x84, 0x5B, 0x85, 0xE1, 0xC1, 
            0x7D, 0xB2, 0xD8, 0x77, 0x57, 0xDC, 0x02, 0xD7, 0xA0, 0x0D, 0x6C, 0x9E, 0x83, 0x87, 0x69, 0x9D, 0xA2, 0xC6, 0x07, 0xE3, 0x0A, 0x53, 0xEE, 0x61, 0xC2, 0xCA, 0xB3, 0xBB, 0x04, 0xDB, 0x88, 0x09, 0xA9, 0x1F, 0xDA, 0xBF, 0x65, 0x7C, 0x84, 0x2A, 0x43, 0xAF, 0x79, 0xBA, 0xDE, 0x60, 0x97, 0x4A, 0x72, 0x1E, 0xA4, 0xF1, 0xF0, 0x14, 0x44, 0xFC, 0x7B, 0x10, 0xA7, 0xD2, 0xC3, 0x73, 0x30, 0x50, 0x67, 0x2C, 0x51, 0xAD, 0x86, 0x0C, 0x95, 0xB6, 0x47, 0x3B, 0x0F, 0x93, 0x08, 0x35, 0x00, 0x12, 0xB7, 0x7F, 0xDD, 0x24, 0xB4, 0x26, 0x9C, 0xCE, 0x5C, 0x3D, 0x8E, 0x38, 0xEA, 0xF2, 0x55, 0x5D, 0xA3, 0x5E, 0x18, 0xF6, 0x13, 0x82, 0x75, 0xE1, 0xF3, 0x94, 0x52, 0x20, 0x80, 0xF8, 0x63, 0x54, 0xFB, 0x99, 0xEF, 0xD3, 0x39, 0x40, 0x5F, 0x1D, 0xD9, 0xD1, 0xC1, 0xE7, 0xC8, 0xA5, 0xED, 0x6F, 0x45, 0x9A, 0x62, 0xA1, 0xE8, 0xBC, 0xE4, 0xCC, 0x32, 0x8B, 0x48, 0x0E, 0xC7, 0xEC, 0x25, 0xB9, 0x19, 0x46, 0x58, 0x3A, 0x29, 0x03, 0xFF, 0x85, 0x4B, 0x6D, 0x5B, 0x37, 0x33, 0x8D, 0x36, 0x68, 0xEB, 0xCF, 0xAB, 0x8A, 0x41, 0x17, 0x89, 0xF9, 0x74, 0xDF, 0x7A, 0xBD, 0x8F, 0xCD, 0x05, 0x9B, 0xFA, 0x4E, 0xD6, 0xC4, 0xB1, 0x2F, 0x78, 0x01, 0x34, 0x66, 0xB0, 0x3E, 0xB8, 0xD5, 0x23, 0xC9, 0x64, 0x6A, 0xE2, 0xF7, 0x42, 0x4C, 0x11, 0xBE, 0xD0, 0xE9, 0x91, 0xAC, 0x96, 0xCB, 0x27, 0x5A, 0x16, 0x90, 0x6B, 0x59, 0x22, 0x6E, 0xD4, 0xAA, 0xE6, 0x2B, 0x15, 0xFE, 0xFD, 0x2E, 0x06, 0xC0, 0x2D, 0xF5, 0xAE, 0xF4, 0x92, 0xC5, 0x1A, 0x3C, 0x21, 0x3F, 0x31, 0x49, 0x81, 0xB5, 0x4D, 0x70, 0x56, 0x76, 0xE5, 0xA8, 0x1C, 0x7E, 0x9F, 0xA6, 0x0B, 0x8C, 0x71, 0xE0, 0x98, 0x1B, 0x28, 0x4F, 
            0xB5, 0x50, 0x3D, 0xDE, 0xA6, 0xFD, 0xF4, 0xD0, 0xDD, 0xF2, 0xE4, 0x3A, 0x4A, 0x92, 0xBB, 0x7B, 0xF6, 0x34, 0xAD, 0x17, 0xF7, 0x55, 0x0E, 0x97, 0x21, 0x6D, 0x64, 0x32, 0xC7, 0x11, 0x45, 0xE0, 0x20, 0x04, 0xB0, 0xC6, 0xFA, 0x43, 0x35, 0xAC, 0xBA, 0xC5, 0x9E, 0xCD, 0x84, 0x8C, 0xA5, 0x19, 0x51, 0xF5, 0x86, 0x74, 0xBD, 0x5D, 0x73, 0x9F, 0x29, 0x71, 0x6E, 0xAF, 0x3C, 0xE5, 0x49, 0x5F, 0x01, 0xA8, 0x0C, 0x2B, 0x98, 0x31, 0xBF, 0xEB, 0xDC, 0xE2, 0x7C, 0x53, 0x44, 0x33, 0xC3, 0x09, 0x82, 0x2D, 0xCE, 0x70, 0xE7, 0x07, 0x1B, 0xA7, 0x0A, 0x65, 0xDA, 0x9A, 0xC8, 0x1E, 0xB6, 0x40, 0x4D, 0x0F, 0x8E, 0x24, 0x36, 0xF0, 0x56, 0xB7, 0x8F, 0x7A, 0x00, 0xA4, 0x59, 0x8A, 0xC2, 0x66, 0x4C, 0x2A, 0x08, 0xBE, 0xCB, 0x1F, 0x69, 0x5A, 0xD6, 0xFF, 0xCC, 0xC1, 0xD7, 0x77, 0x0D, 0x38, 0x2E, 0x46, 0x79, 0xD8, 0x96, 0x6F, 0x93, 0x6B, 0x3E, 0xC9, 0x3F, 0xFB, 0x9B, 0x16, 0x94, 0x8D, 0x87, 0xAE, 0x7D, 0x30, 0xD9, 0xF3, 0xDF, 0x8B, 0x63, 0xFC, 0x6A, 0x05, 0x23, 0x83, 0x06, 0xA1, 0x5B, 0xC4, 0x5E, 0xED, 0x85, 0x4F, 0xB3, 0x10, 0xF9, 0xD4, 0x41, 0x7E, 0x2C, 0xCA, 0xE9, 0xAA, 0x81, 0x91, 0xE3, 0x99, 0xC0, 0x68, 0x7F, 0x22, 0xD5, 0x61, 0x5C, 0x95, 0x15, 0xE1, 0x62, 0xF1, 0x75, 0xEC, 0x28, 0x88, 0x12, 0xF8, 0xE8, 0x1D, 0xA0, 0xEA, 0xD3, 0x42, 0xB8, 0xEF, 0x60, 0xE6, 0x25, 0xB9, 0x78, 0x6C, 0x80, 0xA3, 0xB4, 0x9D, 0x52, 0x47, 0x72, 0x13, 0x03, 0xA2, 0xAB, 0x57, 0xB1, 0x27, 0xBC, 0x89, 0x67, 0x54, 0x4B, 0x4E, 0xB2, 0x1C, 0x58, 0x18, 0x3B, 0x48, 0x9C, 0x1A, 0xD1, 0xD2, 0xEE, 0xA9, 0x39, 0x2F, 0xCF, 0xFE, 0x0B, 0x90, 0x02, 0x26, 0x37, 0x76, 0x14, 0xDB, 
            0x1B, 0x09, 0xD7, 0x67, 0x57, 0x19, 0x15, 0x00, 0xD5, 0x6F, 0xE3, 0x81, 0x6B, 0xE4, 0x52, 0xFA, 0xB8, 0xB4, 0x91, 0xBF, 0x4F, 0x9D, 0x32, 0x9B, 0xA7, 0x28, 0x97, 0xDD, 0x13, 0xF4, 0xE0, 0x87, 0x7F, 0x6C, 0x53, 0x3D, 0x99, 0x12, 0xED, 0xE2, 0xEA, 0x20, 0x29, 0xD6, 0x8F, 0xF5, 0x9E, 0xDB, 0xDA, 0xC8, 0xCB, 0xE8, 0xAE, 0xD8, 0x10, 0x35, 0x85, 0xD2, 0x43, 0x5A, 0x86, 0x66, 0xC2, 0x62, 0x3E, 0xB6, 0xF0, 0x31, 0x42, 0x22, 0x5F, 0xB0, 0x8A, 0x38, 0xF8, 0x05, 0xCD, 0x23, 0x5E, 0xBD, 0xA1, 0xD3, 0x56, 0x26, 0xD4, 0xEB, 0x7A, 0x72, 0x71, 0x0B, 0x90, 0x77, 0x98, 0x6D, 0xCE, 0x73, 0x6E, 0x24, 0xF2, 0x75, 0xE9, 0x0A, 0xF6, 0x37, 0x88, 0x14, 0xCA, 0xB2, 0x7E, 0x82, 0x4C, 0xB5, 0x2E, 0x74, 0x5D, 0x47, 0x79, 0x48, 0x49, 0x1C, 0x9A, 0xC0, 0xF7, 0x4A, 0x45, 0xDE, 0xAD, 0xAF, 0xD0, 0xFC, 0x65, 0xFE, 0x40, 0x03, 0x0D, 0xA0, 0x33, 0xC1, 0x59, 0xE5, 0x3C, 0x30, 0x34, 0xAA, 0xA9, 0x46, 0x3F, 0x2D, 0x8D, 0xC3, 0xC5, 0xA4, 0xA8, 0xC9, 0x94, 0xDF, 0x02, 0x7C, 0x08, 0x21, 0x76, 0xA6, 0x2F, 0x54, 0x06, 0x4B, 0xE7, 0xC7, 0x18, 0x89, 0x8E, 0xEF, 0x92, 0x63, 0x7D, 0x61, 0x8B, 0x16, 0x2A, 0xCC, 0x11, 0x5C, 0x60, 0x64, 0x27, 0x7B, 0x55, 0xC4, 0x4D, 0xC6, 0xFF, 0x95, 0x0C, 0x1F, 0x36, 0x51, 0xA2, 0xEC, 0xBB, 0xAC, 0x39, 0xB3, 0x8C, 0xCF, 0x07, 0xB1, 0x84, 0x1A, 0x69, 0x80, 0xBE, 0x25, 0x1E, 0x96, 0xF3, 0x01, 0x83, 0x9C, 0xFB, 0x0F, 0x41, 0x6A, 0xF1, 0xD1, 0xE6, 0xF9, 0xA3, 0x68, 0x3B, 0xFD, 0x9F, 0x3A, 0x70, 0xB9, 0x44, 0xBC, 0x4E, 0x58, 0xD9, 0x2C, 0x50, 0x17, 0xBA, 0x0E, 0xAB, 0xB7, 0x04, 0xEE, 0x1D, 0xDC, 0x78, 0xA5, 0x2B, 0xE1, 0x93, 0x5B, 


            // Salt rows 49-63
		    0x5E, 0xC0, 0x11, 0x8D, 0x22, 0x69, 0x51, 0xD8, 0x92, 0x3D, 0x6F, 0x72, 0x03, 0x56, 0x3C, 0x6B, 0xDB, 0x44, 0x34, 0x4A, 0x6C, 0x68, 0xB4, 0xC4, 0x08, 0xE9, 0xC5, 0xF7, 0x61, 0x4C, 0x4B, 0x6A, 0xDC, 0x60, 0x81, 0xA6, 0x45, 0xC7, 0x35, 0x98, 0x06, 0xE8, 0x63, 0xC6, 0x00, 0xCD, 0xA8, 0x12, 0x01, 0xAC, 0xAF, 0x14, 0xCB, 0xEF, 0x40, 0x7A, 0x5A, 0x43, 0x6E, 0xE4, 0xC3, 0x05, 0xCC, 0xA5, 0xB1, 0x99, 0xE5, 0xA0, 0x30, 0xAB, 0xD5, 0x2A, 0xB7, 0x09, 0xD7, 0xC8, 0x17, 0xA9, 0x87, 0x0B, 0x7F, 0xBD, 0x9C, 0x7E, 0x25, 0x19, 0x57, 0x0F, 0x8F, 0x5F, 0x2E, 0xE6, 0x1F, 0xBE, 0x0A, 0x2B, 0xB6, 0x26, 0x41, 0xED, 0xB2, 0xFD, 0x23, 0xB9, 0x9D, 0x21, 0xD4, 0xD3, 0x5C, 0x64, 0x94, 0xFB, 0x70, 0xA4, 0x04, 0xFE, 0x2D, 0x31, 0x48, 0xFC, 0x90, 0xB8, 0xF0, 0xC2, 0x1A, 0x8E, 0x9A, 0x6D, 0xEC, 0xEA, 0x29, 0x0D, 0x9E, 0x07, 0xD1, 0x7D, 0x49, 0x32, 0x1D, 0x39, 0x50, 0xBA, 0xF8, 0x3F, 0x78, 0x36, 0x4E, 0xBC, 0x71, 0xE7, 0xE2, 0xC9, 0xD6, 0x47, 0x2C, 0xEB, 0x2F, 0x66, 0xDD, 0x52, 0x4F, 0xF9, 0x27, 0x79, 0x3E, 0x91, 0x28, 0x88, 0x02, 0x37, 0x54, 0x3A, 0x13, 0xF2, 0x58, 0x16, 0x0E, 0xFA, 0x0C, 0xF5, 0x38, 0x93, 0x3B, 0xDE, 0x4D, 0x62, 0x76, 0x1C, 0xB0, 0xF3, 0x33, 0x97, 0x55, 0x9F, 0x84, 0xE1, 0x15, 0x53, 0xDF, 0xD0, 0x9B, 0x75, 0xD9, 0x80, 0xE0, 0x89, 0xBB, 0x24, 0xA1, 0x67, 0x18, 0x8C, 0x5D, 0xCA, 0x59, 0xCF, 0xEE, 0xAA, 0x1E, 0xBF, 0xB3, 0x83, 0x85, 0x77, 0x10, 0xDA, 0xF6, 0x20, 0x7C, 0x46, 0xF4, 0x73, 0x95, 0x5B, 0x82, 0xAE, 0x96, 0xB5, 0x1B, 0x86, 0xD2, 0xA3, 0xA7, 0xCE, 0x42, 0xC1, 0xE3, 0x65, 0x8A, 0xF1, 0x74, 0x8B, 0x7B, 0xAD, 0xFF, 0xA2, 
            0xA0, 0x6B, 0x65, 0xE8, 0x21, 0xEB, 0x3B, 0xAA, 0x7E, 0x3C, 0xE7, 0x61, 0xC5, 0x3E, 0x78, 0xD3, 0x04, 0x2D, 0x67, 0x4A, 0xB3, 0xD8, 0xB8, 0xFB, 0xCA, 0xDC, 0xFA, 0x47, 0xEA, 0x3A, 0x83, 0xB1, 0xD5, 0xCC, 0x31, 0x03, 0x1E, 0xC8, 0x2A, 0xBC, 0xFD, 0xF6, 0xA1, 0xAB, 0xC3, 0xA4, 0x63, 0xFC, 0x60, 0x7A, 0x45, 0x35, 0xBE, 0xB2, 0x6E, 0x2E, 0x77, 0x1D, 0x00, 0x0A, 0x85, 0x69, 0xA2, 0x30, 0x8E, 0x52, 0x90, 0xB6, 0x0E, 0x66, 0x5C, 0x84, 0x59, 0x95, 0x24, 0x73, 0xBB, 0x9D, 0x01, 0x2F, 0x5D, 0x75, 0xAF, 0x1A, 0x4B, 0xC9, 0x1C, 0x74, 0x1F, 0x70, 0x28, 0x09, 0xCB, 0x0F, 0xEF, 0xB0, 0x2B, 0xBF, 0x0D, 0xF3, 0xAC, 0x0C, 0xD1, 0x07, 0x9B, 0x08, 0xCD, 0x58, 0x96, 0x8A, 0xEC, 0x39, 0x10, 0x8D, 0x02, 0xED, 0xB7, 0x7D, 0x92, 0x54, 0x87, 0xB4, 0x79, 0xE0, 0xA3, 0x13, 0xDD, 0xBA, 0xD6, 0xF4, 0x19, 0xFF, 0xD4, 0x29, 0x05, 0x18, 0xB9, 0x32, 0x9C, 0xD2, 0x4E, 0x7F, 0xD9, 0x26, 0xE2, 0x12, 0x34, 0xC6, 0xE6, 0xF5, 0xC4, 0x6C, 0xF9, 0x36, 0x37, 0xF0, 0x14, 0x55, 0xEE, 0x20, 0xAE, 0x9A, 0x1B, 0x48, 0xF1, 0x57, 0xA5, 0xF8, 0x98, 0xE9, 0x8F, 0xB5, 0x33, 0x5A, 0xE5, 0x7B, 0x42, 0x64, 0xC1, 0x22, 0xF7, 0x25, 0x06, 0x5E, 0xDF, 0x9F, 0x82, 0xD0, 0xDE, 0x46, 0x3F, 0x93, 0xDA, 0x41, 0x15, 0xDB, 0x8B, 0xE1, 0x5F, 0xFE, 0x44, 0xC2, 0x3D, 0x94, 0xA6, 0x62, 0x27, 0x6A, 0x71, 0x81, 0x38, 0x6D, 0xCF, 0x99, 0xBD, 0x91, 0xCE, 0xE4, 0x49, 0xA8, 0x6F, 0x11, 0x76, 0x50, 0x16, 0x72, 0xC7, 0xE3, 0x53, 0x40, 0x4C, 0x5B, 0xD7, 0xA7, 0x97, 0x43, 0x88, 0x4D, 0x9E, 0xF2, 0x89, 0x0B, 0x4F, 0xA9, 0x51, 0x68, 0x23, 0x56, 0x8C, 0x2C, 0x86, 0x7C, 0xC0, 0x80, 0xAD, 0x17, 
            0xA7, 0x89, 0x35, 0x08, 0x44, 0xE5, 0xFA, 0xCC, 0x01, 0x71, 0xB2, 0x5C, 0x25, 0x79, 0xBC, 0xA9, 0x05, 0x93, 0xB8, 0x8A, 0xE4, 0x16, 0xE1, 0xD1, 0xD0, 0xCB, 0x43, 0xE9, 0xA6, 0x29, 0x1B, 0x60, 0x34, 0x96, 0x50, 0x66, 0x84, 0xCD, 0x0A, 0xD3, 0x42, 0xC0, 0x5B, 0x6E, 0x24, 0x3D, 0x23, 0x91, 0x47, 0xF3, 0x15, 0x17, 0xDA, 0x0E, 0x63, 0xF5, 0xC7, 0x1C, 0x03, 0x7C, 0x39, 0xF8, 0x2E, 0xEE, 0xEB, 0xD2, 0x18, 0xE8, 0x7A, 0x69, 0xAF, 0x7E, 0x98, 0x4E, 0x64, 0xD5, 0xC3, 0x99, 0xE7, 0x2B, 0xDB, 0xE6, 0xF0, 0xB5, 0xF6, 0xC4, 0x51, 0xCA, 0xFB, 0x5F, 0x22, 0xEA, 0x4F, 0x33, 0x92, 0x67, 0xBE, 0x21, 0x8F, 0x3A, 0x37, 0x6D, 0x4C, 0xCE, 0x38, 0x97, 0xB1, 0x7F, 0x45, 0x13, 0xF1, 0xBB, 0xDD, 0xF2, 0x1F, 0x68, 0xD4, 0x52, 0x5A, 0xD9, 0xC5, 0x85, 0x53, 0x19, 0xED, 0x74, 0x54, 0x49, 0xD6, 0xAD, 0x9A, 0xFE, 0xE2, 0x9F, 0x75, 0xDE, 0xC2, 0x0F, 0x1E, 0xA4, 0x2F, 0x09, 0xBA, 0x10, 0x3F, 0x48, 0x2C, 0x73, 0x59, 0xA3, 0x3B, 0xB0, 0x1D, 0x4D, 0x41, 0x80, 0xB9, 0x26, 0xD8, 0x76, 0xAC, 0xFC, 0x06, 0xC6, 0xA5, 0x20, 0x9C, 0xE0, 0x0B, 0x95, 0x9B, 0xFF, 0x9E, 0xF9, 0x87, 0xB3, 0x04, 0x27, 0x7B, 0x62, 0x07, 0x81, 0xA1, 0x6A, 0xA8, 0x78, 0x57, 0x9D, 0x56, 0x90, 0x65, 0x46, 0xDC, 0x0C, 0xD7, 0xF7, 0xC8, 0x32, 0x2D, 0xAA, 0x28, 0xA2, 0x36, 0x2A, 0xB6, 0x02, 0x55, 0xFD, 0x86, 0x14, 0xBD, 0x6F, 0xB4, 0xDF, 0x83, 0xCF, 0x8C, 0x58, 0x5E, 0x82, 0x94, 0xEC, 0x40, 0xA0, 0x1A, 0x8B, 0xBF, 0x31, 0xF4, 0x0D, 0x6B, 0xAB, 0x6C, 0x12, 0x88, 0x30, 0x4A, 0x8E, 0x3C, 0x61, 0x8D, 0x7D, 0x72, 0x00, 0xB7, 0xE3, 0x77, 0x70, 0x3E, 0xC9, 0x4B, 0xC1, 0xEF, 0xAE, 0x11, 0x5D, 
            0xB9, 0x9E, 0x1F, 0xDD, 0x12, 0x0D, 0x84, 0x65, 0x82, 0x35, 0xF4, 0xE9, 0xD0, 0xCF, 0x6C, 0xDE, 0x7D, 0x54, 0xF3, 0xC4, 0x78, 0xD4, 0x77, 0x2A, 0x5C, 0x9B, 0x10, 0xA2, 0xF8, 0x19, 0xC1, 0x7E, 0xDA, 0x67, 0xEB, 0x56, 0x8B, 0x89, 0x4B, 0xE3, 0xBD, 0x83, 0xE6, 0xD7, 0xD5, 0xB1, 0xA9, 0xA6, 0x60, 0xDC, 0x4E, 0x08, 0xFD, 0xFE, 0xE0, 0xE1, 0x2D, 0x76, 0xBE, 0x0A, 0x79, 0xCE, 0x3D, 0xB7, 0x2E, 0x71, 0x05, 0xF6, 0x5B, 0x59, 0x5F, 0x3B, 0xAC, 0x3E, 0x43, 0x94, 0x52, 0x53, 0x0C, 0xE7, 0xCD, 0x6A, 0x25, 0x36, 0xEF, 0xF1, 0xA1, 0xE4, 0xAE, 0x06, 0x91, 0x86, 0x69, 0xEC, 0x44, 0xB2, 0xD8, 0xD2, 0xB3, 0x62, 0x66, 0xA5, 0x17, 0x0F, 0xC6, 0x45, 0x38, 0x00, 0x03, 0x1B, 0x61, 0x39, 0x85, 0xB8, 0xA3, 0xFB, 0x49, 0x37, 0x8E, 0x88, 0x1C, 0x2F, 0x8F, 0x33, 0x24, 0x01, 0xE5, 0xF7, 0x95, 0x09, 0xB0, 0xFA, 0xEA, 0xF2, 0x07, 0x63, 0x41, 0x1D, 0x7A, 0xFC, 0xC5, 0xAB, 0xE8, 0x9F, 0xB6, 0x5D, 0x9D, 0x90, 0x97, 0x23, 0x5A, 0x8D, 0x32, 0x7F, 0xA8, 0x4D, 0x64, 0x68, 0x9A, 0xD6, 0x26, 0xA0, 0x87, 0x3A, 0xF0, 0x98, 0x3F, 0x1A, 0xBF, 0xC3, 0x7B, 0xF9, 0x02, 0x04, 0xA7, 0x0B, 0xBA, 0xED, 0x6F, 0x6B, 0x74, 0x70, 0x29, 0x28, 0xB5, 0x58, 0xBC, 0xC7, 0xF5, 0xD9, 0xAA, 0x46, 0x80, 0xCC, 0x0E, 0x13, 0x99, 0x20, 0x48, 0xEE, 0x30, 0x5E, 0x4C, 0x22, 0x21, 0x55, 0x42, 0xE2, 0xC0, 0x92, 0xD3, 0x72, 0xD1, 0xFF, 0x57, 0x9C, 0x51, 0xBB, 0x18, 0x14, 0x31, 0x2B, 0x34, 0xCA, 0x3C, 0x4F, 0x11, 0xC8, 0x50, 0x6E, 0xAF, 0x1E, 0xC9, 0x2C, 0xDB, 0x47, 0x4A, 0xAD, 0x6D, 0x75, 0x8C, 0x8A, 0x40, 0x27, 0xB4, 0x96, 0xA4, 0x15, 0xDF, 0xCB, 0x93, 0x73, 0x16, 0x81, 0xC2, 0x7C, 
            0xF1, 0x1A, 0xAC, 0xED, 0xD7, 0xE7, 0xD3, 0x8D, 0x9D, 0x32, 0x27, 0x3E, 0x0D, 0xD8, 0xCA, 0x46, 0xB8, 0x08, 0x3D, 0x04, 0x3A, 0xA9, 0x75, 0x99, 0x77, 0xB6, 0x02, 0xFD, 0x83, 0x8B, 0x61, 0x01, 0x4D, 0x9A, 0xE9, 0x60, 0xBF, 0x5F, 0x36, 0xFF, 0xAB, 0xE2, 0x6B, 0x86, 0xF7, 0x33, 0xB5, 0x7C, 0x5B, 0xCE, 0x2E, 0x09, 0xF8, 0xC9, 0x2F, 0x37, 0x05, 0x98, 0x03, 0x50, 0x70, 0x9C, 0x30, 0x53, 0x95, 0xA8, 0xA5, 0xBB, 0x64, 0x1C, 0x5A, 0x20, 0xCC, 0x88, 0xEB, 0xAA, 0x1F, 0x56, 0x79, 0xF3, 0xCB, 0x57, 0x4E, 0xC3, 0x63, 0x6A, 0x18, 0x91, 0xD2, 0x51, 0x38, 0xBC, 0x0B, 0xA1, 0xE1, 0x2A, 0x9F, 0x25, 0xDF, 0x1B, 0x6C, 0xF4, 0x69, 0xDB, 0xFA, 0x0C, 0x92, 0x2D, 0xEF, 0x17, 0x14, 0x84, 0x5E, 0x6F, 0x19, 0x42, 0x67, 0x24, 0x45, 0x0E, 0x87, 0xF0, 0x1E, 0xC4, 0x22, 0x3F, 0x55, 0x7B, 0xB9, 0xE8, 0xCF, 0xFC, 0x26, 0x5D, 0x34, 0x06, 0xB3, 0x10, 0xFB, 0xC1, 0x9E, 0x80, 0x82, 0xDC, 0x39, 0x8F, 0xB2, 0x7A, 0xBD, 0xA4, 0xF5, 0xA2, 0x54, 0x94, 0x8E, 0x59, 0xA7, 0x21, 0x15, 0xFE, 0x3B, 0xC8, 0x4A, 0xF2, 0x7E, 0x97, 0x66, 0x47, 0xA3, 0xC7, 0x58, 0x85, 0x4C, 0x12, 0xE0, 0xB4, 0xE3, 0x4F, 0x40, 0xC0, 0x65, 0xB0, 0xBA, 0x62, 0xC6, 0x5C, 0x90, 0x41, 0xD9, 0x73, 0x8C, 0x44, 0x89, 0xAF, 0x1D, 0x11, 0x0A, 0x29, 0x6D, 0x31, 0x16, 0x78, 0xC5, 0xEE, 0x93, 0x49, 0xEC, 0x28, 0x71, 0xD5, 0xBE, 0x9B, 0xDA, 0xC2, 0xDE, 0xEA, 0xB1, 0xB7, 0x00, 0xD4, 0x68, 0xE4, 0x2C, 0xCD, 0x6E, 0xA0, 0x96, 0x72, 0xF6, 0x43, 0xD6, 0x8A, 0x7F, 0x74, 0x0F, 0xDD, 0xE6, 0x7D, 0xAE, 0x07, 0x76, 0x4B, 0xF9, 0x35, 0x52, 0x2B, 0xD1, 0xD0, 0x48, 0x13, 0xA6, 0x3C, 0x81, 0x23, 0xE5, 0xAD, 
            0x6A, 0xB0, 0x01, 0x8F, 0x9D, 0xF7, 0xA5, 0xB1, 0x5B, 0xFF, 0x54, 0xED, 0xEB, 0xEF, 0x72, 0xA1, 0xFE, 0xF4, 0xDD, 0xAB, 0x9B, 0xF8, 0x31, 0x95, 0x2A, 0x27, 0xC7, 0x29, 0xB6, 0x36, 0x3A, 0x68, 0x65, 0xA6, 0xDC, 0xDA, 0xCB, 0x0B, 0x81, 0x3F, 0x06, 0xAE, 0x20, 0x78, 0x79, 0x0C, 0x26, 0xE6, 0xCA, 0xF6, 0xC5, 0xE9, 0xE1, 0x3D, 0x7E, 0x1D, 0x19, 0x80, 0x6D, 0x13, 0x22, 0x1C, 0x07, 0x0A, 0x0F, 0xC9, 0x6F, 0x9F, 0xB7, 0x1E, 0xD2, 0x03, 0x84, 0x35, 0x77, 0x33, 0xFC, 0x8D, 0xE4, 0xBA, 0xA4, 0x3C, 0xFD, 0x67, 0xE0, 0x61, 0x02, 0xCE, 0x51, 0x59, 0x2E, 0x89, 0xE2, 0x8E, 0xBB, 0x41, 0x6C, 0x76, 0x43, 0x17, 0x09, 0x9C, 0x05, 0x9E, 0xA8, 0xBE, 0xE3, 0xC2, 0xCD, 0x24, 0x64, 0x7A, 0x38, 0x2B, 0x60, 0x39, 0xEC, 0xD3, 0x86, 0x28, 0x6B, 0x82, 0x37, 0xEE, 0xA9, 0x93, 0xB8, 0x6E, 0xA7, 0xD6, 0xD1, 0x15, 0x0E, 0x7D, 0xCC, 0x58, 0xA3, 0x30, 0x23, 0x9A, 0x8A, 0xFA, 0x14, 0x8B, 0x46, 0x92, 0xDF, 0x49, 0x1B, 0xBD, 0xE5, 0xB9, 0xB5, 0x4B, 0x7F, 0xB2, 0x0D, 0xA0, 0x18, 0x3E, 0x5F, 0x94, 0xF9, 0x74, 0x55, 0xF5, 0xD9, 0x1F, 0xC1, 0x32, 0x8C, 0xE7, 0x44, 0x5A, 0x04, 0xD8, 0x1A, 0x75, 0xF2, 0x66, 0x90, 0xD7, 0x85, 0x4F, 0xC8, 0xBF, 0x7B, 0x4D, 0x4A, 0xCF, 0xE8, 0xDE, 0x4C, 0x96, 0xAD, 0xAF, 0x47, 0x11, 0x87, 0x45, 0x91, 0x88, 0xF3, 0xC4, 0x69, 0xAA, 0xC3, 0x98, 0x21, 0x83, 0x71, 0xF1, 0xD5, 0x08, 0xB3, 0x25, 0xF0, 0xD4, 0x5D, 0x10, 0xC6, 0x52, 0xC0, 0x99, 0x57, 0x48, 0x4E, 0x53, 0x5C, 0xBC, 0xB4, 0x73, 0x16, 0xFB, 0x2D, 0xAC, 0x62, 0x2C, 0x7C, 0x12, 0x2F, 0x42, 0x50, 0x00, 0x97, 0xD0, 0xEA, 0x34, 0x56, 0x5E, 0x63, 0x70, 0x40, 0xDB, 0x3B, 0xA2, 
            0xD2, 0xDF, 0x5D, 0xA8, 0x9D, 0xE1, 0x73, 0x69, 0x89, 0x15, 0x8E, 0x6C, 0xEE, 0xFE, 0x95, 0x13, 0x42, 0x88, 0xE7, 0x9E, 0x0D, 0xED, 0x27, 0xC0, 0x00, 0xA5, 0x24, 0x80, 0x41, 0xA2, 0xB6, 0x19, 0xE5, 0x78, 0xAF, 0x79, 0x14, 0xC7, 0x21, 0x6A, 0xD7, 0x8C, 0x48, 0x28, 0x5E, 0xD4, 0x06, 0xC1, 0x1E, 0x91, 0xA1, 0x1C, 0xAB, 0x4D, 0x8B, 0x47, 0xD8, 0xD0, 0x35, 0xD5, 0xDD, 0xEF, 0x4F, 0x1F, 0xB9, 0x8A, 0xFB, 0x68, 0xE4, 0x2B, 0x90, 0xE6, 0x46, 0xC2, 0x4C, 0xEC, 0xB2, 0xA7, 0xE8, 0x39, 0x4B, 0xF7, 0xF3, 0x2C, 0xFC, 0xBD, 0xA0, 0x0E, 0x3A, 0xD1, 0x05, 0x7F, 0xF9, 0x34, 0x8D, 0x81, 0xC3, 0x43, 0x53, 0x3F, 0x0C, 0xAA, 0x82, 0x99, 0x92, 0x26, 0xC8, 0xA3, 0xCA, 0x9F, 0x59, 0xCD, 0xEB, 0x18, 0xE0, 0x20, 0xCE, 0x7C, 0x6B, 0x86, 0x98, 0x7D, 0xB7, 0xFD, 0xBA, 0xBF, 0x87, 0xC4, 0x4E, 0x66, 0x7E, 0x11, 0x1B, 0xDC, 0xB5, 0xDB, 0xCB, 0xE9, 0xA6, 0x67, 0x3C, 0x77, 0x65, 0xDE, 0x93, 0x71, 0x0F, 0x63, 0x31, 0x9B, 0x6D, 0x7B, 0x75, 0xFA, 0x60, 0xEA, 0x57, 0x2A, 0xAE, 0x55, 0xF6, 0x5C, 0xDA, 0x07, 0x9C, 0x04, 0x6F, 0x32, 0x2F, 0xF5, 0x3B, 0xA4, 0x33, 0x5F, 0xD6, 0x38, 0x22, 0xBE, 0x10, 0xB3, 0xC6, 0xB1, 0xC9, 0x02, 0xAC, 0x72, 0xE2, 0x54, 0x94, 0xF8, 0x4A, 0xCF, 0xB4, 0x5A, 0x16, 0x62, 0xAD, 0x17, 0x64, 0x1A, 0x76, 0x8F, 0x70, 0x30, 0x25, 0xB0, 0x83, 0x61, 0xF1, 0x44, 0x52, 0x45, 0x01, 0xF4, 0x58, 0x2E, 0xBC, 0x03, 0x3E, 0xD3, 0xB8, 0x49, 0x40, 0x50, 0x08, 0x29, 0xA9, 0x23, 0x0B, 0xD9, 0x09, 0x51, 0xCC, 0x97, 0xF2, 0x12, 0x56, 0x36, 0x74, 0x37, 0xC5, 0x0A, 0x85, 0xBB, 0x1D, 0xE3, 0x96, 0x84, 0x9A, 0x3D, 0xFF, 0xF0, 0x6E, 0x5B, 0x2D, 0x7A, 
            0x65, 0x24, 0x7A, 0xE9, 0x55, 0x2E, 0x17, 0xC4, 0x5A, 0xCD, 0x37, 0x3E, 0x1A, 0x44, 0x78, 0xB5, 0xDE, 0x2D, 0x1C, 0x80, 0x10, 0x16, 0x73, 0xDB, 0x08, 0xDF, 0x77, 0xCF, 0x42, 0x3C, 0x8A, 0xD4, 0xBA, 0x26, 0x33, 0x4D, 0x8D, 0x86, 0x29, 0x67, 0xBD, 0xFD, 0x83, 0x1D, 0xC2, 0x43, 0x69, 0xD9, 0x6E, 0xD7, 0x1E, 0xA5, 0x2C, 0x6F, 0x9E, 0x01, 0x38, 0x00, 0x35, 0x45, 0x20, 0x46, 0x4E, 0xB6, 0x7D, 0xA8, 0x95, 0x9F, 0x48, 0x71, 0xB0, 0xAF, 0xAA, 0xFE, 0xAD, 0xF2, 0x0D, 0x5F, 0xEA, 0x0A, 0x41, 0x5C, 0x3F, 0xF0, 0x62, 0xF8, 0xE2, 0x0B, 0xB1, 0xF1, 0x5B, 0x54, 0x74, 0x4F, 0x8B, 0x7E, 0xBB, 0xA3, 0xC7, 0x3B, 0xA7, 0xED, 0xE8, 0x8C, 0x07, 0x52, 0x49, 0x64, 0xAE, 0xAB, 0x9D, 0x2B, 0xE1, 0x4B, 0xA4, 0xB4, 0x40, 0xA1, 0xE0, 0xE3, 0xB3, 0xF4, 0xC8, 0x1B, 0xC5, 0x13, 0x28, 0x57, 0x61, 0x02, 0x06, 0x6A, 0xE5, 0x12, 0x0E, 0xC1, 0xFA, 0x39, 0xD2, 0x0F, 0x84, 0x2A, 0xEF, 0xF5, 0xCE, 0xBF, 0x50, 0x30, 0x72, 0xA2, 0x96, 0x79, 0x47, 0xBC, 0x9B, 0x0C, 0x6D, 0x7C, 0xAC, 0xDC, 0x9A, 0x11, 0x68, 0xF3, 0x82, 0x32, 0xCA, 0xCC, 0xDD, 0x27, 0xEB, 0x6B, 0x59, 0x04, 0xF9, 0x76, 0xA0, 0xD8, 0x36, 0x4A, 0xC9, 0xD3, 0x51, 0xCB, 0x75, 0xD0, 0x63, 0x60, 0x18, 0x94, 0xB9, 0xA6, 0x91, 0xE4, 0x66, 0x88, 0xEE, 0xDA, 0x7B, 0xD6, 0xD1, 0x3A, 0xB7, 0x22, 0x1F, 0x93, 0x19, 0xD5, 0xF7, 0xC3, 0x8F, 0x25, 0xF6, 0x34, 0xB8, 0x5E, 0x9C, 0xEC, 0x05, 0xE7, 0x8E, 0x92, 0x81, 0xC6, 0x5D, 0x2F, 0x3D, 0x56, 0x87, 0x98, 0x7F, 0x15, 0xBE, 0x21, 0x70, 0x14, 0x31, 0x23, 0x89, 0x03, 0xFB, 0x85, 0x58, 0x97, 0xA9, 0x09, 0xC0, 0xE6, 0xFF, 0x90, 0x99, 0x6C, 0x53, 0x4C, 0xFC, 0xB2, 

            0xE6, 0xC6, 0x88, 0x3E, 0x7C, 0x33, 0x5C, 0xFA, 0xF6, 0x1D, 0x26, 0xD2, 0x96, 0xF0, 0xB2, 0x3C, 0x3B, 0xDE, 0x90, 0x89, 0x4B, 0xC2, 0x83, 0xB5, 0xC7, 0x10, 0x43, 0x53, 0xBD, 0x6D, 0x64, 0x58, 0xAD, 0x8B, 0x0E, 0x94, 0xC8, 0x14, 0xDA, 0x8F, 0xB8, 0x1A, 0xAC, 0xE5, 0x38, 0x76, 0x46, 0xF5, 0xEC, 0xE3, 0x93, 0x6B, 0x74, 0x2C, 0x99, 0x34, 0x25, 0x8A, 0x79, 0x66, 0x47, 0x18, 0xD8, 0xE9, 0xD9, 0xDF, 0x0D, 0xEA, 0x24, 0xCE, 0x3F, 0x4A, 0x85, 0x04, 0x01, 0xE0, 0xF3, 0x07, 0x52, 0xD0, 0xA3, 0x29, 0x97, 0xEF, 0x91, 0xCD, 0xC0, 0xA6, 0x71, 0xD3, 0x67, 0xCB, 0x5A, 0xF9, 0x77, 0x68, 0x0B, 0x41, 0x69, 0x75, 0xFD, 0xB3, 0xDC, 0x82, 0xBB, 0x6C, 0xCA, 0x7A, 0x0C, 0x0F, 0x57, 0xFC, 0x9C, 0x02, 0xB4, 0x55, 0xC3, 0x5B, 0x00, 0x3A, 0x56, 0xAF, 0x19, 0xB7, 0x0A, 0x42, 0x2A, 0x11, 0x5F, 0x72, 0x9E, 0xA5, 0x03, 0x8D, 0xE7, 0xC5, 0x8C, 0x7F, 0xC4, 0x65, 0x40, 0x09, 0x59, 0x9B, 0x28, 0x86, 0x1B, 0x27, 0xCF, 0xC1, 0x6F, 0xA1, 0xA4, 0x35, 0x23, 0x16, 0x1F, 0x7E, 0x13, 0x7B, 0x5D, 0xBE, 0xAA, 0x2D, 0x6E, 0x54, 0x9A, 0xB9, 0x84, 0x8E, 0x21, 0xAE, 0x98, 0xA8, 0xF1, 0xFE, 0x05, 0x3D, 0xFF, 0xEB, 0x49, 0x60, 0x15, 0xF8, 0xA7, 0xEE, 0xC9, 0x32, 0xF7, 0x4C, 0x2E, 0xB1, 0x61, 0xFB, 0x48, 0xA0, 0x20, 0x31, 0xD4, 0x37, 0xF2, 0x78, 0x87, 0x22, 0x4D, 0xD5, 0xCC, 0x9F, 0x80, 0x92, 0xD1, 0x2F, 0x45, 0xDB, 0xBC, 0x08, 0x6A, 0x9D, 0xD7, 0xDD, 0x39, 0x95, 0xD6, 0xE1, 0x30, 0xBF, 0x7D, 0x06, 0x50, 0x73, 0x51, 0xED, 0x1E, 0x62, 0x1C, 0x17, 0xF4, 0x70, 0x81, 0x5E, 0xB6, 0xA9, 0x36, 0xBA, 0x12, 0x2B, 0xAB, 0x4E, 0xB0, 0xE2, 0xE8, 0xA2, 0x4F, 0x63, 0x44, 0xE4, 
            0x73, 0x53, 0xD2, 0x76, 0xF5, 0xE5, 0x5A, 0x58, 0xF4, 0xBF, 0xDF, 0x49, 0x59, 0x1D, 0x5C, 0x44, 0xE6, 0x6F, 0x56, 0xF3, 0x7E, 0xC4, 0x31, 0xF9, 0xB6, 0x92, 0x30, 0x8F, 0x50, 0xC7, 0x9F, 0xA8, 0xB2, 0x88, 0x11, 0xAD, 0xC2, 0x8B, 0xAC, 0x2A, 0x6E, 0x6C, 0x5D, 0x35, 0x84, 0x72, 0x03, 0x52, 0xB5, 0xD6, 0x6D, 0x07, 0x95, 0x1A, 0x0B, 0x3C, 0xD4, 0xB0, 0x02, 0x40, 0xC3, 0xCC, 0x7F, 0x2B, 0xB7, 0x60, 0xB8, 0xD5, 0xE3, 0x3F, 0x1F, 0xDD, 0xC5, 0x42, 0x97, 0x8D, 0x1B, 0x4B, 0x21, 0xFE, 0x01, 0x4C, 0x93, 0x32, 0x15, 0xF8, 0xC1, 0x99, 0x39, 0x87, 0x16, 0xC6, 0x3B, 0x3A, 0x4F, 0xF7, 0xAF, 0x94, 0x77, 0xE8, 0x8C, 0xF1, 0xC8, 0x04, 0xED, 0x46, 0xF2, 0x8A, 0xAA, 0x1C, 0x62, 0xC9, 0x81, 0xFF, 0x06, 0xBB, 0x7A, 0xE4, 0x90, 0x23, 0xDA, 0x0E, 0xEC, 0x5F, 0x09, 0x41, 0x9B, 0x86, 0x28, 0x8E, 0x33, 0x82, 0xFD, 0x2D, 0xEB, 0x48, 0x19, 0xB3, 0x08, 0x96, 0xA2, 0x0A, 0x0D, 0x2E, 0x2F, 0xBE, 0x13, 0x3D, 0x4D, 0x7C, 0x70, 0x85, 0xA7, 0xA1, 0x3E, 0x66, 0xEA, 0x9C, 0xB9, 0x12, 0x80, 0x69, 0x25, 0x83, 0x27, 0xBD, 0x67, 0xCE, 0x14, 0xA6, 0x61, 0x6B, 0x0F, 0xFA, 0xF6, 0x45, 0x79, 0xFC, 0xE7, 0xEF, 0x4E, 0xD7, 0x5E, 0x6A, 0x29, 0x5B, 0x05, 0x22, 0xD3, 0x18, 0xD0, 0x43, 0x63, 0xE9, 0xCD, 0xEE, 0xCB, 0x37, 0x75, 0x1E, 0xD9, 0x78, 0x89, 0x10, 0xA4, 0x98, 0x38, 0x57, 0x34, 0xBC, 0xDE, 0xB4, 0xFB, 0xD1, 0x74, 0xA3, 0x24, 0xA0, 0x55, 0x0C, 0x9E, 0xDC, 0x26, 0xCF, 0x54, 0xC0, 0xE2, 0x68, 0x17, 0xAB, 0x71, 0xA9, 0x47, 0xF0, 0x51, 0x36, 0x64, 0xB1, 0xE1, 0xA5, 0x00, 0x91, 0x9A, 0x9D, 0x7D, 0x7B, 0xBA, 0x20, 0x4A, 0xCA, 0xE0, 0xDB, 0xD8, 0x2C, 0x65, 0xAE, 
            0xE7, 0x2E, 0xCE, 0x1F, 0xD2, 0xD4, 0xBD, 0x6F, 0xD1, 0x16, 0x24, 0xD7, 0xEA, 0x79, 0x5B, 0x81, 0xE1, 0x58, 0xBE, 0xC2, 0x18, 0xE4, 0xD5, 0x78, 0xFE, 0xA0, 0x26, 0x8D, 0x41, 0x00, 0xBB, 0x6E, 0x0A, 0xB3, 0xCB, 0xF0, 0x07, 0x6C, 0xB5, 0x83, 0x5F, 0x03, 0x7C, 0x1E, 0x88, 0xC6, 0x0D, 0x52, 0x4D, 0xDD, 0x51, 0xF8, 0x7B, 0x74, 0x0C, 0xF4, 0x9E, 0x27, 0xAD, 0xB8, 0x50, 0x90, 0x11, 0x19, 0x75, 0x7E, 0x64, 0x3D, 0x4E, 0xC3, 0xD8, 0x09, 0x68, 0x80, 0xA5, 0x73, 0x12, 0x22, 0x15, 0x36, 0xF6, 0xAA, 0xF5, 0x34, 0x89, 0xEC, 0x28, 0xEB, 0xB2, 0xA9, 0x17, 0x0E, 0x85, 0x97, 0xCC, 0x56, 0xA7, 0xA3, 0x0B, 0x4B, 0x8E, 0x59, 0xCD, 0xD0, 0x8A, 0x84, 0xF9, 0x71, 0xA1, 0x42, 0xA2, 0x72, 0xC0, 0x82, 0xBF, 0x69, 0xE9, 0x77, 0x54, 0x5A, 0xA6, 0xF3, 0xB6, 0x23, 0x8C, 0x6B, 0x35, 0x49, 0xE8, 0x1C, 0x8B, 0x3A, 0x47, 0x96, 0x1A, 0xF7, 0xB1, 0x6A, 0xC7, 0x0F, 0xD3, 0x4A, 0x10, 0x53, 0xD6, 0xAC, 0x7D, 0x37, 0x32, 0x57, 0x5C, 0x60, 0x67, 0x2F, 0x6D, 0xFF, 0xC5, 0x06, 0x33, 0x61, 0xB9, 0x8F, 0x3E, 0xE3, 0xDC, 0x9C, 0xCA, 0x66, 0x29, 0x55, 0x3F, 0xF2, 0x95, 0x31, 0x25, 0x65, 0xAE, 0x45, 0x70, 0x1B, 0x38, 0xBA, 0xD9, 0xC4, 0x13, 0xED, 0x2A, 0x9B, 0x02, 0x98, 0xC9, 0xB0, 0xEE, 0x94, 0xDA, 0xDE, 0x91, 0x62, 0xFC, 0xB7, 0xF1, 0x63, 0x5E, 0x43, 0x46, 0x9F, 0x01, 0x39, 0x48, 0x4C, 0x21, 0x86, 0xEF, 0xFB, 0xDB, 0xBC, 0x08, 0x2C, 0x93, 0xFD, 0x05, 0xC8, 0xE5, 0xC1, 0x30, 0xAF, 0x7A, 0x92, 0xA8, 0xE0, 0xE2, 0x4F, 0xFA, 0x9A, 0x3B, 0x7F, 0xE6, 0xA4, 0x3C, 0x1D, 0xCF, 0xAB, 0x40, 0x20, 0x2D, 0x9D, 0x99, 0x76, 0x87, 0x5D, 0x04, 0xDF, 0x14, 0x2B, 0xB4, 0x44, 
            0x64, 0x2B, 0x69, 0xDE, 0x3C, 0xC0, 0xCA, 0xFB, 0x14, 0x47, 0x48, 0x4B, 0xCD, 0x62, 0x7B, 0x87, 0x29, 0xAC, 0xF9, 0x0E, 0xAF, 0x95, 0xE6, 0x70, 0x89, 0x8E, 0x4E, 0xB9, 0xCB, 0xC3, 0x58, 0x78, 0x0A, 0x9C, 0xC5, 0xB5, 0x2E, 0xC4, 0x8D, 0x97, 0xDA, 0x86, 0x17, 0xC9, 0xD1, 0xB2, 0x6B, 0xA2, 0x73, 0xF6, 0x9E, 0xD8, 0x39, 0x67, 0xEE, 0x18, 0x90, 0xE9, 0x34, 0xBF, 0xAB, 0x16, 0x94, 0x20, 0x4A, 0x1A, 0x66, 0x93, 0xB8, 0x7A, 0x52, 0x91, 0x72, 0x00, 0x31, 0x55, 0x7E, 0x4C, 0x9A, 0x22, 0x5C, 0xDF, 0x33, 0xB7, 0x19, 0x30, 0x8B, 0x21, 0x98, 0x42, 0x57, 0x24, 0xE7, 0xA3, 0x3F, 0x32, 0x43, 0xF2, 0x3A, 0xD2, 0x11, 0x63, 0xE0, 0xAD, 0xD4, 0x41, 0x0C, 0xF1, 0x2C, 0xCC, 0x8F, 0x28, 0x0B, 0xFC, 0xBA, 0xD3, 0x74, 0xD6, 0x25, 0xC1, 0x6C, 0x9D, 0x04, 0xCF, 0x59, 0x4D, 0xE2, 0xEF, 0x13, 0x06, 0xD9, 0x6F, 0xD7, 0x1F, 0xF4, 0x60, 0x85, 0xC8, 0x6A, 0x6D, 0xA9, 0x40, 0x99, 0x6E, 0x5E, 0x05, 0xD0, 0x61, 0x1E, 0x3E, 0x84, 0x4F, 0x7D, 0x5F, 0xA7, 0xFF, 0x68, 0x01, 0x76, 0x08, 0xB4, 0xB6, 0x5B, 0x79, 0x1D, 0xE8, 0x82, 0xC2, 0xCE, 0xDC, 0xB3, 0x23, 0xBC, 0x3B, 0xEA, 0x80, 0x92, 0x27, 0xFE, 0xEC, 0xBD, 0xA0, 0x45, 0x7C, 0x9F, 0x07, 0x03, 0x10, 0xF8, 0xA5, 0x02, 0x1B, 0x3D, 0x37, 0x50, 0x1C, 0xF5, 0x77, 0xBB, 0xE4, 0xE1, 0xD5, 0x5D, 0xB0, 0xC7, 0xA6, 0x75, 0x36, 0xED, 0x44, 0xA1, 0x2A, 0xE5, 0xEB, 0x51, 0x0D, 0xBE, 0x8C, 0xAE, 0x26, 0x96, 0x15, 0x12, 0x53, 0xA8, 0xDB, 0x49, 0x9B, 0x35, 0xDD, 0xAA, 0x5A, 0xF7, 0x71, 0x65, 0x38, 0xF0, 0x7F, 0xA4, 0x2D, 0x88, 0x81, 0x54, 0xFA, 0x46, 0xC6, 0xB1, 0x8A, 0x56, 0xF3, 0x09, 0xE3, 0x0F, 0xFD, 0x83, 0x2F, 
            0xBF, 0xB0, 0x03, 0xD5, 0x30, 0x3B, 0x94, 0x24, 0xB1, 0x1A, 0xAF, 0xE3, 0xD0, 0x98, 0x35, 0xE0, 0x0A, 0x9C, 0x45, 0x82, 0x0E, 0x19, 0xD8, 0x3F, 0x77, 0xB5, 0x89, 0x08, 0xEC, 0x52, 0x4F, 0x40, 0x4E, 0xF2, 0xBC, 0x5D, 0xA7, 0x5F, 0xA0, 0x71, 0xBE, 0x4A, 0xBA, 0x7B, 0x4B, 0x39, 0xE1, 0x56, 0x26, 0x8D, 0x60, 0xB2, 0xE7, 0x13, 0xD3, 0xCE, 0x2B, 0xDC, 0x2A, 0x4D, 0x38, 0x50, 0xF6, 0x96, 0x7E, 0x23, 0x4C, 0xF9, 0x00, 0x47, 0xAE, 0xC4, 0x84, 0xF5, 0xCC, 0x79, 0xA2, 0xD7, 0xF4, 0xE5, 0x9A, 0x55, 0xD2, 0x49, 0xBB, 0x99, 0x68, 0xCF, 0xEB, 0xDA, 0x1E, 0xFC, 0xDF, 0x42, 0xAC, 0xC2, 0x57, 0x74, 0x65, 0x1C, 0x73, 0x6B, 0x29, 0x8A, 0xCD, 0xC9, 0xE9, 0x46, 0x69, 0xC8, 0x3C, 0x70, 0x06, 0x21, 0x61, 0xAD, 0x41, 0xF1, 0x44, 0xE6, 0x86, 0xD1, 0x14, 0xEE, 0x3A, 0x6E, 0xF7, 0xA3, 0x64, 0x72, 0x12, 0xB8, 0x0C, 0x31, 0x43, 0x78, 0xF0, 0x5C, 0x33, 0xDD, 0x58, 0xBD, 0xFF, 0xA8, 0xFD, 0x10, 0x1B, 0x2D, 0xB7, 0x37, 0xC7, 0xA5, 0x7F, 0x32, 0xFA, 0xED, 0xA1, 0xC0, 0x48, 0x5E, 0x9E, 0xC5, 0x54, 0x93, 0xAB, 0x02, 0x63, 0x62, 0x59, 0xD6, 0xEA, 0x22, 0x8E, 0x7A, 0x15, 0xE8, 0x1D, 0x6F, 0x9D, 0xC6, 0xB9, 0x6D, 0xCA, 0x5B, 0xCB, 0x3E, 0x8F, 0x18, 0xE4, 0x3D, 0x28, 0x53, 0xF8, 0x67, 0xFE, 0x66, 0x17, 0xDB, 0x11, 0x09, 0x5A, 0x7D, 0xAA, 0xA9, 0x85, 0x83, 0x2F, 0x6C, 0x81, 0x20, 0x87, 0x27, 0x34, 0x9B, 0xFB, 0xB4, 0x16, 0x51, 0x07, 0x90, 0xC3, 0xE2, 0x0B, 0xD9, 0x2C, 0xF3, 0xD4, 0x95, 0x76, 0xC1, 0x88, 0xA4, 0x92, 0x0F, 0xB6, 0x1F, 0x97, 0x8C, 0x91, 0x0D, 0x05, 0x25, 0xA6, 0x9F, 0xEF, 0x6A, 0x36, 0x01, 0x7C, 0x2E, 0x8B, 0xDE, 0x04, 0x80, 0xB3, 0x75, 
            0x4E, 0xE0, 0xE4, 0x92, 0x67, 0xB0, 0xB1, 0xE8, 0xE2, 0x3E, 0x1A, 0x0D, 0x57, 0xBF, 0x28, 0x3B, 0xA6, 0x02, 0xD5, 0x18, 0x1D, 0xE9, 0xF3, 0x5C, 0xFC, 0x33, 0x63, 0x88, 0xAC, 0x5F, 0x70, 0xB2, 0x16, 0x37, 0xCF, 0x0C, 0x8D, 0xBD, 0xCE, 0x6C, 0x1E, 0x9F, 0x17, 0xB8, 0xF5, 0xB5, 0x21, 0xC0, 0x9C, 0x7C, 0x24, 0x66, 0x8A, 0x1F, 0xEA, 0x30, 0x8F, 0xDB, 0x46, 0x65, 0x03, 0x29, 0xB4, 0xEC, 0x01, 0x3D, 0x40, 0x9E, 0xAE, 0x85, 0x0B, 0x93, 0x90, 0x2A, 0x83, 0xE7, 0x2E, 0x14, 0xDC, 0x4D, 0x54, 0xE5, 0x73, 0xB7, 0x45, 0xEB, 0x96, 0xA0, 0xFF, 0xA4, 0xC4, 0x34, 0x4F, 0x0A, 0x22, 0x2D, 0xC9, 0x19, 0xFD, 0xDE, 0xCA, 0x49, 0xC2, 0x44, 0x20, 0xC5, 0x38, 0x00, 0xC1, 0x61, 0x11, 0xDF, 0xFB, 0x07, 0x08, 0x6F, 0x47, 0xDA, 0xC8, 0x5A, 0x59, 0x32, 0x2C, 0xCD, 0x13, 0xE1, 0x9B, 0x58, 0x62, 0x4B, 0xBC, 0x3A, 0xCC, 0x27, 0x74, 0x55, 0x81, 0xD0, 0xBE, 0x75, 0xED, 0x77, 0xB3, 0xDD, 0xD1, 0x1B, 0x8C, 0xA2, 0x09, 0xEF, 0x87, 0x39, 0xD8, 0xAF, 0xE3, 0xD2, 0x7E, 0xF1, 0xF6, 0x48, 0xB9, 0xB6, 0xFE, 0xE6, 0x80, 0x42, 0xF7, 0xAB, 0x35, 0x4C, 0x6E, 0xA5, 0xA7, 0x95, 0x79, 0xC3, 0x1C, 0x5E, 0x7A, 0xA3, 0x3C, 0x84, 0x5B, 0xBB, 0x6A, 0x71, 0xC6, 0xD6, 0x25, 0x7D, 0x9D, 0x2B, 0x10, 0x53, 0xD4, 0xF4, 0x68, 0x0E, 0x8E, 0xA9, 0x60, 0x04, 0xA1, 0x82, 0x31, 0x86, 0x41, 0xAD, 0x6B, 0x99, 0x91, 0x52, 0x78, 0x50, 0x72, 0xCB, 0xF9, 0x8B, 0x7B, 0xFA, 0x06, 0xEE, 0xC7, 0x3F, 0x36, 0xF2, 0xA8, 0x23, 0x2F, 0x98, 0x7F, 0x64, 0x56, 0x0F, 0xD3, 0x6D, 0xF8, 0x69, 0x4A, 0x94, 0xBA, 0x76, 0x9A, 0x12, 0xD7, 0xF0, 0x15, 0xAA, 0x5D, 0x51, 0x43, 0x89, 0x26, 0x97, 0xD9, 0x05, 
            0x8D, 0x1B, 0x87, 0xD7, 0x48, 0x04, 0x02, 0xBF, 0xB1, 0x4D, 0x1F, 0x90, 0x59, 0x05, 0x22, 0x7D, 0x31, 0x1E, 0x68, 0x63, 0x43, 0x6E, 0x24, 0xE0, 0x8A, 0xD1, 0x99, 0x71, 0xFA, 0x5E, 0x13, 0xBC, 0x3C, 0x30, 0xAF, 0xDA, 0x7F, 0x27, 0xAD, 0x97, 0x49, 0xA7, 0x6B, 0xF2, 0x18, 0x82, 0x10, 0x50, 0xC5, 0x34, 0x5B, 0x8C, 0xF9, 0x3B, 0x2B, 0xAE, 0x9C, 0x9E, 0xE9, 0x26, 0xD4, 0xAA, 0xB9, 0x9B, 0xFD, 0xBE, 0x3E, 0x1C, 0x08, 0xD0, 0x8B, 0xC3, 0xF8, 0x29, 0xDD, 0x62, 0xB3, 0x00, 0x46, 0xA8, 0x81, 0xC6, 0xC2, 0xBA, 0xB0, 0x41, 0x3A, 0x6A, 0xAC, 0x03, 0x7A, 0x47, 0xF3, 0x3F, 0x0F, 0x4C, 0xE6, 0xF4, 0xFF, 0xC8, 0xF5, 0x67, 0x93, 0xBD, 0xE8, 0x96, 0xC4, 0x8E, 0xFE, 0x01, 0xA4, 0x44, 0x70, 0xD9, 0x4F, 0x53, 0xCF, 0x2F, 0x5D, 0x77, 0x60, 0x1A, 0x6F, 0xA3, 0x4B, 0x57, 0xCC, 0x9D, 0x72, 0xEE, 0x78, 0x73, 0xD6, 0x6C, 0x4A, 0xE5, 0xAB, 0x7E, 0xEF, 0x12, 0x52, 0x1D, 0xA2, 0x39, 0x2C, 0xF6, 0x28, 0x06, 0x94, 0xD5, 0x17, 0x0B, 0x38, 0xE1, 0x75, 0x9A, 0x32, 0xB7, 0x45, 0x95, 0xC1, 0x76, 0x69, 0x42, 0xC9, 0xCE, 0x98, 0x3D, 0xFB, 0x9F, 0x89, 0x20, 0x5A, 0xA9, 0x25, 0x2E, 0x19, 0x07, 0x85, 0xB2, 0x84, 0xEA, 0xA1, 0xA0, 0x14, 0x40, 0xE3, 0x88, 0x15, 0xA5, 0xF1, 0x2A, 0x21, 0x80, 0x74, 0x36, 0xB4, 0x65, 0x7C, 0xDF, 0xCA, 0xB6, 0x79, 0x0C, 0xED, 0x23, 0x64, 0x35, 0xE2, 0x8F, 0xBB, 0x37, 0x33, 0x09, 0xDE, 0xDC, 0xCB, 0x91, 0xEC, 0x4E, 0x58, 0xB8, 0x55, 0xFC, 0xD8, 0xD2, 0xE7, 0x83, 0x66, 0x61, 0x0E, 0xEB, 0xA6, 0xC7, 0xCD, 0xD3, 0x86, 0xB5, 0x6D, 0xDB, 0x7B, 0x0D, 0x5F, 0x11, 0xF0, 0x92, 0x16, 0xF7, 0x2D, 0x56, 0xE4, 0x0A, 0x51, 0x5C, 0xC0, 0x54, 
            0xEF, 0x96, 0x36, 0xE8, 0x47, 0xA3, 0xCC, 0xAC, 0x1E, 0xF5, 0xD1, 0x08, 0xAB, 0x50, 0x71, 0x8C, 0x43, 0x2B, 0x5C, 0xC6, 0x85, 0x32, 0xEC, 0xB6, 0xE5, 0xB3, 0xCE, 0x86, 0x56, 0xBA, 0x4E, 0x7C, 0x5E, 0x9E, 0x73, 0xF3, 0x4B, 0x7F, 0x78, 0x67, 0x9F, 0x40, 0xC0, 0xBB, 0x8F, 0xC7, 0x79, 0x0F, 0xC1, 0x20, 0x42, 0xCB, 0x33, 0xD4, 0x3E, 0x6B, 0x51, 0x6D, 0x87, 0xD2, 0x63, 0x9B, 0xDC, 0xF1, 0xD8, 0x0D, 0x5A, 0x14, 0x1B, 0x6E, 0x64, 0xFD, 0xAA, 0xD7, 0x77, 0x8D, 0x97, 0x2C, 0xF0, 0x1C, 0x17, 0x39, 0x6F, 0xD0, 0x57, 0x24, 0x94, 0x13, 0xF9, 0x06, 0xC2, 0xE9, 0xE4, 0xE7, 0x98, 0x2F, 0x09, 0xCD, 0xFE, 0x92, 0x2A, 0xA9, 0xFC, 0xA8, 0x61, 0x38, 0x7A, 0x69, 0xC9, 0x0B, 0x8B, 0x0C, 0x68, 0xE3, 0x2D, 0x04, 0xFF, 0x18, 0x55, 0x72, 0x41, 0x26, 0x83, 0x59, 0x74, 0x93, 0xD3, 0x3F, 0xBC, 0x48, 0xE2, 0x0A, 0xB9, 0xC3, 0x25, 0x8A, 0x6C, 0xB0, 0x5B, 0x9C, 0x4D, 0xE6, 0x81, 0x88, 0x65, 0xE0, 0x1F, 0x35, 0x03, 0x05, 0x23, 0x7D, 0xBD, 0xE1, 0xB7, 0xDA, 0x10, 0x75, 0xD5, 0xB5, 0xDF, 0xDE, 0x37, 0x6A, 0x07, 0x84, 0xA7, 0x80, 0x9D, 0x53, 0x3C, 0x49, 0x01, 0xF8, 0x52, 0x3D, 0xED, 0xCF, 0x76, 0x7B, 0x5F, 0x62, 0x3B, 0xEB, 0x11, 0x1A, 0x3A, 0x7E, 0x4A, 0xF2, 0xB1, 0xF7, 0xDB, 0xEA, 0xF4, 0xB4, 0x44, 0xC4, 0x15, 0x28, 0x19, 0x60, 0xC5, 0xB8, 0x91, 0x29, 0x16, 0x21, 0xFA, 0x46, 0x00, 0x22, 0xF6, 0xA2, 0x2E, 0xA1, 0xB2, 0x4F, 0xCA, 0xA4, 0x45, 0x5D, 0x89, 0xAF, 0x90, 0xC8, 0xAE, 0xA5, 0x9A, 0xBF, 0xBE, 0xFB, 0x34, 0xA6, 0x99, 0x8E, 0x30, 0xEE, 0x54, 0xD6, 0x82, 0x27, 0x31, 0x0E, 0x70, 0x1D, 0x66, 0xAD, 0x95, 0x4C, 0x12, 0x02, 0x58, 0xD9, 0xA0, 0xDD
        };


        // Shuffle array for inserting password.  Pick one of 256 rows and use for password insertion.  Each row contains 0-63 in a random permutation.
        // Verified 29/4/2015 that each row contains 0 - 63 only.
        private static byte[] Shuffle = 
		{
		    // Shuffle Rows 1-16	Each row now 64 bytes long		
		    0x3B, 0x29, 0x2A, 0x1D, 0x36, 0x16, 0x18, 0x09, 0x1E, 0x3D, 0x30, 0x2C, 0x2F, 0x3F, 0x2B, 0x02, 0x3C, 0x1F, 0x01, 0x1B, 0x1C, 0x24, 0x04, 0x37, 0x2D, 0x2E, 0x23, 0x0B, 0x11, 0x3E, 0x32, 0x3A, 0x38, 0x0D, 0x0A, 0x34, 0x07, 0x39, 0x14, 0x10, 0x06, 0x0E, 0x13, 0x20, 0x33, 0x17, 0x21, 0x12, 0x1A, 0x31, 0x03, 0x25, 0x08, 0x05, 0x35, 0x26, 0x28, 0x22, 0x0C, 0x15, 0x19, 0x0F, 0x27, 0x00, 
            0x0E, 0x13, 0x17, 0x31, 0x2A, 0x20, 0x38, 0x2E, 0x14, 0x10, 0x0D, 0x29, 0x27, 0x1E, 0x06, 0x24, 0x02, 0x1D, 0x2B, 0x15, 0x3B, 0x22, 0x19, 0x0C, 0x36, 0x3A, 0x25, 0x2F, 0x18, 0x35, 0x28, 0x00, 0x1F, 0x04, 0x33, 0x11, 0x26, 0x23, 0x2C, 0x0F, 0x0B, 0x12, 0x1A, 0x32, 0x08, 0x01, 0x30, 0x3E, 0x07, 0x1B, 0x03, 0x16, 0x09, 0x21, 0x39, 0x0A, 0x2D, 0x34, 0x37, 0x3F, 0x1C, 0x3C, 0x3D, 0x05, 
            0x30, 0x38, 0x19, 0x34, 0x21, 0x3D, 0x1B, 0x1D, 0x2E, 0x2C, 0x2D, 0x37, 0x07, 0x23, 0x35, 0x36, 0x13, 0x1F, 0x27, 0x39, 0x18, 0x05, 0x15, 0x04, 0x3E, 0x17, 0x01, 0x2B, 0x1E, 0x25, 0x28, 0x22, 0x3A, 0x3F, 0x0C, 0x0D, 0x09, 0x00, 0x11, 0x10, 0x12, 0x0F, 0x02, 0x20, 0x26, 0x2F, 0x1C, 0x0A, 0x32, 0x0B, 0x06, 0x16, 0x29, 0x2A, 0x08, 0x14, 0x31, 0x3B, 0x1A, 0x3C, 0x24, 0x0E, 0x03, 0x33, 
            0x14, 0x1A, 0x38, 0x0C, 0x0D, 0x12, 0x3E, 0x18, 0x1E, 0x39, 0x3D, 0x1F, 0x3F, 0x37, 0x27, 0x32, 0x0E, 0x2D, 0x16, 0x3C, 0x25, 0x02, 0x33, 0x35, 0x11, 0x1D, 0x2C, 0x24, 0x13, 0x03, 0x2A, 0x22, 0x28, 0x2B, 0x08, 0x19, 0x20, 0x17, 0x1C, 0x3B, 0x3A, 0x2F, 0x15, 0x0F, 0x05, 0x09, 0x04, 0x00, 0x21, 0x30, 0x07, 0x0A, 0x31, 0x0B, 0x26, 0x2E, 0x34, 0x23, 0x1B, 0x10, 0x29, 0x01, 0x36, 0x06, 
            0x13, 0x26, 0x21, 0x01, 0x22, 0x2D, 0x3F, 0x38, 0x30, 0x07, 0x17, 0x2C, 0x2A, 0x0D, 0x31, 0x1C, 0x25, 0x03, 0x3C, 0x2B, 0x39, 0x20, 0x08, 0x28, 0x2F, 0x37, 0x14, 0x29, 0x16, 0x09, 0x0B, 0x0E, 0x06, 0x27, 0x00, 0x1B, 0x3E, 0x24, 0x34, 0x1A, 0x3B, 0x35, 0x12, 0x0A, 0x05, 0x1F, 0x2E, 0x11, 0x18, 0x32, 0x0C, 0x04, 0x3A, 0x23, 0x02, 0x1D, 0x33, 0x1E, 0x3D, 0x15, 0x0F, 0x19, 0x10, 0x36, 
            0x3D, 0x30, 0x34, 0x05, 0x39, 0x06, 0x25, 0x16, 0x3A, 0x1B, 0x33, 0x28, 0x24, 0x0F, 0x35, 0x20, 0x08, 0x11, 0x26, 0x29, 0x21, 0x2F, 0x2E, 0x14, 0x2B, 0x3B, 0x0C, 0x01, 0x31, 0x12, 0x03, 0x1F, 0x13, 0x27, 0x38, 0x00, 0x0A, 0x3F, 0x02, 0x2C, 0x04, 0x0D, 0x1E, 0x09, 0x3E, 0x37, 0x3C, 0x1D, 0x1A, 0x32, 0x0E, 0x2A, 0x23, 0x17, 0x36, 0x1C, 0x22, 0x18, 0x15, 0x07, 0x10, 0x2D, 0x0B, 0x19, 
            0x0D, 0x06, 0x19, 0x38, 0x13, 0x05, 0x00, 0x35, 0x27, 0x0A, 0x32, 0x21, 0x3D, 0x24, 0x3E, 0x17, 0x14, 0x3B, 0x04, 0x0F, 0x0C, 0x2F, 0x12, 0x3F, 0x11, 0x03, 0x2D, 0x16, 0x33, 0x26, 0x30, 0x1D, 0x0B, 0x2E, 0x3A, 0x0E, 0x1C, 0x29, 0x28, 0x10, 0x01, 0x31, 0x02, 0x1F, 0x34, 0x1B, 0x25, 0x3C, 0x1E, 0x22, 0x23, 0x37, 0x09, 0x18, 0x2C, 0x2A, 0x1A, 0x2B, 0x07, 0x08, 0x36, 0x39, 0x20, 0x15, 
            0x27, 0x23, 0x14, 0x1F, 0x35, 0x09, 0x03, 0x1E, 0x00, 0x15, 0x0F, 0x19, 0x11, 0x08, 0x2F, 0x2C, 0x02, 0x2D, 0x04, 0x17, 0x33, 0x29, 0x3D, 0x22, 0x07, 0x0A, 0x31, 0x3B, 0x2E, 0x32, 0x3C, 0x01, 0x26, 0x2A, 0x24, 0x3F, 0x34, 0x16, 0x2B, 0x37, 0x39, 0x18, 0x0C, 0x05, 0x38, 0x0B, 0x20, 0x3E, 0x13, 0x0D, 0x12, 0x30, 0x36, 0x21, 0x10, 0x1B, 0x06, 0x28, 0x1C, 0x1D, 0x25, 0x0E, 0x3A, 0x1A, 
            
            0x01, 0x08, 0x06, 0x11, 0x12, 0x0E, 0x39, 0x22, 0x1D, 0x03, 0x1A, 0x31, 0x02, 0x1E, 0x26, 0x00, 0x3B, 0x17, 0x1C, 0x2A, 0x34, 0x33, 0x24, 0x15, 0x30, 0x36, 0x09, 0x3A, 0x2C, 0x2B, 0x0D, 0x2D, 0x1B, 0x0B, 0x3F, 0x16, 0x27, 0x0F, 0x3E, 0x14, 0x3D, 0x21, 0x35, 0x13, 0x10, 0x28, 0x05, 0x29, 0x0A, 0x32, 0x25, 0x18, 0x2E, 0x19, 0x20, 0x1F, 0x04, 0x38, 0x07, 0x3C, 0x23, 0x0C, 0x2F, 0x37, 
            0x09, 0x39, 0x07, 0x3A, 0x0D, 0x22, 0x01, 0x0B, 0x2D, 0x0F, 0x17, 0x28, 0x3B, 0x2C, 0x15, 0x2A, 0x32, 0x21, 0x25, 0x34, 0x29, 0x3F, 0x0C, 0x26, 0x2E, 0x2F, 0x24, 0x03, 0x1C, 0x1A, 0x00, 0x0A, 0x1F, 0x38, 0x14, 0x3C, 0x37, 0x3E, 0x30, 0x20, 0x04, 0x23, 0x05, 0x12, 0x18, 0x1B, 0x11, 0x10, 0x3D, 0x08, 0x35, 0x06, 0x27, 0x13, 0x1E, 0x31, 0x02, 0x2B, 0x1D, 0x36, 0x19, 0x16, 0x33, 0x0E, 
            0x1E, 0x2C, 0x0D, 0x37, 0x00, 0x3E, 0x12, 0x0E, 0x29, 0x13, 0x3A, 0x0B, 0x2B, 0x09, 0x03, 0x07, 0x08, 0x30, 0x05, 0x17, 0x35, 0x18, 0x0C, 0x28, 0x36, 0x06, 0x10, 0x0A, 0x24, 0x15, 0x2D, 0x34, 0x1C, 0x2E, 0x3F, 0x14, 0x33, 0x1F, 0x02, 0x25, 0x1A, 0x31, 0x26, 0x2A, 0x01, 0x32, 0x2F, 0x23, 0x39, 0x22, 0x20, 0x0F, 0x27, 0x16, 0x11, 0x1B, 0x38, 0x3B, 0x3D, 0x1D, 0x3C, 0x19, 0x21, 0x04, 
            0x2C, 0x24, 0x09, 0x3F, 0x21, 0x3E, 0x36, 0x07, 0x3B, 0x08, 0x17, 0x1D, 0x30, 0x23, 0x0A, 0x15, 0x20, 0x2F, 0x3A, 0x25, 0x39, 0x0F, 0x11, 0x32, 0x05, 0x01, 0x26, 0x1C, 0x03, 0x33, 0x27, 0x0E, 0x0D, 0x35, 0x37, 0x3D, 0x1A, 0x0B, 0x00, 0x3C, 0x2E, 0x13, 0x0C, 0x34, 0x1F, 0x2A, 0x38, 0x12, 0x16, 0x2B, 0x22, 0x19, 0x31, 0x28, 0x29, 0x1B, 0x18, 0x14, 0x04, 0x02, 0x1E, 0x10, 0x06, 0x2D, 
            0x08, 0x33, 0x2F, 0x2A, 0x3F, 0x1F, 0x39, 0x1D, 0x2B, 0x24, 0x07, 0x14, 0x35, 0x3E, 0x0F, 0x0E, 0x02, 0x28, 0x00, 0x25, 0x16, 0x13, 0x09, 0x01, 0x03, 0x12, 0x15, 0x0C, 0x37, 0x32, 0x1A, 0x0B, 0x04, 0x17, 0x06, 0x1B, 0x38, 0x20, 0x05, 0x3B, 0x10, 0x19, 0x27, 0x21, 0x0D, 0x3C, 0x11, 0x22, 0x2E, 0x3D, 0x30, 0x26, 0x3A, 0x29, 0x31, 0x18, 0x0A, 0x1C, 0x34, 0x23, 0x2C, 0x1E, 0x2D, 0x36, 
            0x25, 0x31, 0x30, 0x1E, 0x09, 0x27, 0x05, 0x1F, 0x02, 0x2B, 0x21, 0x08, 0x33, 0x19, 0x37, 0x16, 0x2E, 0x26, 0x2C, 0x1C, 0x12, 0x15, 0x0D, 0x35, 0x3F, 0x18, 0x3B, 0x03, 0x10, 0x0B, 0x34, 0x0F, 0x32, 0x39, 0x0C, 0x06, 0x1B, 0x17, 0x2F, 0x0E, 0x22, 0x13, 0x36, 0x29, 0x20, 0x01, 0x3E, 0x3A, 0x0A, 0x14, 0x2A, 0x2D, 0x07, 0x04, 0x1D, 0x38, 0x00, 0x24, 0x3D, 0x28, 0x3C, 0x23, 0x11, 0x1A, 
            0x26, 0x0D, 0x21, 0x15, 0x0E, 0x03, 0x01, 0x1F, 0x1B, 0x2D, 0x36, 0x07, 0x33, 0x10, 0x3A, 0x35, 0x3B, 0x34, 0x18, 0x04, 0x2B, 0x39, 0x37, 0x16, 0x27, 0x0F, 0x1C, 0x28, 0x3E, 0x3F, 0x31, 0x3D, 0x0B, 0x25, 0x22, 0x23, 0x14, 0x2F, 0x00, 0x12, 0x1E, 0x1A, 0x11, 0x24, 0x02, 0x17, 0x1D, 0x20, 0x38, 0x2C, 0x32, 0x08, 0x2E, 0x0A, 0x13, 0x30, 0x19, 0x2A, 0x09, 0x3C, 0x29, 0x06, 0x0C, 0x05, 
            0x3C, 0x12, 0x39, 0x04, 0x1A, 0x11, 0x3F, 0x05, 0x23, 0x00, 0x35, 0x3B, 0x1E, 0x0E, 0x15, 0x27, 0x25, 0x14, 0x2E, 0x02, 0x18, 0x0C, 0x1F, 0x0D, 0x3A, 0x28, 0x24, 0x22, 0x1B, 0x31, 0x20, 0x17, 0x36, 0x3D, 0x30, 0x38, 0x37, 0x0F, 0x2B, 0x0A, 0x26, 0x10, 0x32, 0x03, 0x2D, 0x2F, 0x2C, 0x21, 0x13, 0x08, 0x09, 0x3E, 0x0B, 0x2A, 0x1C, 0x1D, 0x16, 0x19, 0x34, 0x33, 0x07, 0x01, 0x29, 0x06, 

		
		    // Shuffle	Rows 17-32			
		    0x10, 0x14, 0x12, 0x3B, 0x34, 0x38, 0x17, 0x0E, 0x06, 0x32, 0x36, 0x21, 0x1B, 0x26, 0x35, 0x04, 0x0C, 0x11, 0x00, 0x3D, 0x37, 0x2D, 0x02, 0x18, 0x13, 0x08, 0x05, 0x1F, 0x0D, 0x20, 0x16, 0x0F, 0x29, 0x19, 0x31, 0x27, 0x1A, 0x1C, 0x23, 0x0B, 0x15, 0x09, 0x3A, 0x1D, 0x39, 0x3E, 0x2C, 0x1E, 0x28, 0x07, 0x2A, 0x03, 0x30, 0x25, 0x2E, 0x2F, 0x01, 0x2B, 0x3F, 0x0A, 0x24, 0x22, 0x3C, 0x33, 
            0x15, 0x2A, 0x35, 0x31, 0x0A, 0x36, 0x2C, 0x1E, 0x34, 0x06, 0x25, 0x11, 0x0B, 0x22, 0x21, 0x08, 0x3B, 0x02, 0x1F, 0x24, 0x01, 0x1C, 0x3C, 0x0E, 0x05, 0x27, 0x12, 0x19, 0x2B, 0x03, 0x0C, 0x0D, 0x09, 0x32, 0x3E, 0x1A, 0x23, 0x14, 0x1D, 0x20, 0x39, 0x17, 0x3A, 0x29, 0x3D, 0x30, 0x16, 0x04, 0x2E, 0x13, 0x00, 0x2D, 0x2F, 0x07, 0x26, 0x10, 0x33, 0x28, 0x3F, 0x1B, 0x37, 0x0F, 0x38, 0x18, 
            0x0F, 0x01, 0x28, 0x03, 0x34, 0x21, 0x36, 0x05, 0x2C, 0x31, 0x3E, 0x2F, 0x16, 0x18, 0x2A, 0x26, 0x07, 0x0B, 0x10, 0x08, 0x1E, 0x11, 0x2E, 0x17, 0x09, 0x12, 0x2D, 0x2B, 0x3A, 0x3C, 0x1B, 0x1C, 0x0C, 0x3D, 0x0E, 0x14, 0x33, 0x39, 0x22, 0x23, 0x0A, 0x04, 0x3F, 0x32, 0x15, 0x25, 0x19, 0x1A, 0x29, 0x24, 0x37, 0x3B, 0x27, 0x35, 0x06, 0x30, 0x13, 0x0D, 0x1D, 0x20, 0x38, 0x1F, 0x02, 0x00, 
            0x0D, 0x03, 0x32, 0x02, 0x07, 0x0E, 0x20, 0x21, 0x3E, 0x33, 0x2F, 0x0A, 0x38, 0x29, 0x12, 0x19, 0x1C, 0x28, 0x26, 0x2D, 0x3A, 0x2C, 0x2B, 0x15, 0x39, 0x3C, 0x3F, 0x01, 0x1F, 0x22, 0x1B, 0x3D, 0x05, 0x08, 0x16, 0x2E, 0x0C, 0x37, 0x0F, 0x36, 0x09, 0x23, 0x13, 0x10, 0x3B, 0x11, 0x00, 0x1A, 0x24, 0x18, 0x1E, 0x31, 0x25, 0x35, 0x27, 0x04, 0x1D, 0x0B, 0x14, 0x2A, 0x06, 0x34, 0x30, 0x17, 
            0x0E, 0x08, 0x35, 0x23, 0x06, 0x18, 0x3D, 0x38, 0x29, 0x30, 0x3C, 0x01, 0x3E, 0x0B, 0x2B, 0x17, 0x21, 0x20, 0x16, 0x0A, 0x3A, 0x36, 0x15, 0x11, 0x33, 0x3B, 0x22, 0x0D, 0x27, 0x19, 0x1C, 0x13, 0x2A, 0x12, 0x34, 0x2E, 0x09, 0x14, 0x00, 0x24, 0x25, 0x26, 0x2C, 0x0F, 0x05, 0x1E, 0x39, 0x3F, 0x07, 0x32, 0x1A, 0x1B, 0x02, 0x28, 0x2F, 0x2D, 0x04, 0x31, 0x03, 0x0C, 0x1F, 0x37, 0x10, 0x1D, 
            0x21, 0x20, 0x07, 0x04, 0x24, 0x32, 0x16, 0x18, 0x3B, 0x2A, 0x19, 0x0A, 0x38, 0x01, 0x05, 0x08, 0x3E, 0x27, 0x2E, 0x35, 0x0F, 0x03, 0x1E, 0x3D, 0x17, 0x14, 0x1F, 0x2C, 0x02, 0x36, 0x1C, 0x1A, 0x3A, 0x26, 0x29, 0x30, 0x09, 0x15, 0x0B, 0x10, 0x12, 0x3F, 0x0D, 0x00, 0x1D, 0x25, 0x1B, 0x2F, 0x2B, 0x34, 0x33, 0x0E, 0x2D, 0x39, 0x31, 0x3C, 0x23, 0x37, 0x13, 0x06, 0x28, 0x11, 0x22, 0x0C, 
            0x1B, 0x03, 0x3C, 0x08, 0x3D, 0x18, 0x0B, 0x3A, 0x23, 0x39, 0x1D, 0x3F, 0x00, 0x0E, 0x25, 0x0F, 0x14, 0x2E, 0x2F, 0x1E, 0x32, 0x15, 0x31, 0x26, 0x36, 0x38, 0x04, 0x33, 0x19, 0x27, 0x20, 0x06, 0x01, 0x3B, 0x2D, 0x2C, 0x22, 0x34, 0x21, 0x1C, 0x17, 0x1F, 0x07, 0x30, 0x13, 0x0D, 0x35, 0x02, 0x10, 0x37, 0x2B, 0x0C, 0x2A, 0x28, 0x16, 0x12, 0x29, 0x3E, 0x09, 0x05, 0x1A, 0x0A, 0x11, 0x24, 
            0x06, 0x31, 0x0D, 0x35, 0x1C, 0x32, 0x05, 0x2B, 0x0A, 0x39, 0x36, 0x27, 0x0E, 0x00, 0x38, 0x37, 0x22, 0x26, 0x14, 0x3C, 0x07, 0x2A, 0x1F, 0x02, 0x1A, 0x3E, 0x09, 0x29, 0x30, 0x3A, 0x33, 0x01, 0x17, 0x1B, 0x20, 0x3D, 0x2C, 0x15, 0x10, 0x2D, 0x34, 0x16, 0x0C, 0x19, 0x08, 0x13, 0x2E, 0x18, 0x12, 0x1E, 0x2F, 0x0B, 0x28, 0x23, 0x3F, 0x25, 0x21, 0x03, 0x04, 0x11, 0x3B, 0x24, 0x0F, 0x1D, 
		
		    0x36, 0x21, 0x34, 0x0C, 0x1F, 0x10, 0x04, 0x22, 0x23, 0x2B, 0x08, 0x17, 0x3F, 0x0D, 0x24, 0x0E, 0x3D, 0x28, 0x0A, 0x2C, 0x11, 0x3B, 0x1C, 0x2E, 0x12, 0x09, 0x03, 0x29, 0x1D, 0x07, 0x39, 0x27, 0x2D, 0x06, 0x01, 0x25, 0x26, 0x38, 0x05, 0x16, 0x02, 0x0F, 0x15, 0x1A, 0x3C, 0x0B, 0x37, 0x1E, 0x2A, 0x35, 0x1B, 0x19, 0x3A, 0x2F, 0x33, 0x00, 0x20, 0x30, 0x18, 0x14, 0x32, 0x3E, 0x13, 0x31, 
            0x1A, 0x23, 0x21, 0x00, 0x16, 0x3B, 0x0A, 0x19, 0x38, 0x3F, 0x24, 0x2C, 0x10, 0x05, 0x30, 0x26, 0x1C, 0x0E, 0x02, 0x28, 0x27, 0x0C, 0x12, 0x20, 0x2F, 0x37, 0x2A, 0x0D, 0x07, 0x1F, 0x0B, 0x3C, 0x3E, 0x15, 0x1B, 0x39, 0x2D, 0x06, 0x09, 0x36, 0x01, 0x32, 0x33, 0x25, 0x04, 0x2B, 0x1D, 0x29, 0x31, 0x22, 0x11, 0x2E, 0x3D, 0x17, 0x34, 0x1E, 0x08, 0x18, 0x03, 0x13, 0x14, 0x3A, 0x35, 0x0F, 
            0x3C, 0x1A, 0x24, 0x01, 0x06, 0x3F, 0x2A, 0x0C, 0x25, 0x09, 0x05, 0x00, 0x1E, 0x11, 0x17, 0x21, 0x12, 0x14, 0x23, 0x26, 0x22, 0x0D, 0x33, 0x2B, 0x0A, 0x0E, 0x20, 0x1C, 0x04, 0x36, 0x1B, 0x15, 0x39, 0x3B, 0x02, 0x07, 0x35, 0x38, 0x30, 0x16, 0x1F, 0x18, 0x28, 0x31, 0x03, 0x3D, 0x37, 0x2E, 0x08, 0x27, 0x32, 0x2C, 0x29, 0x2F, 0x3A, 0x3E, 0x0F, 0x19, 0x1D, 0x2D, 0x13, 0x10, 0x34, 0x0B, 
            0x0E, 0x1C, 0x1D, 0x3C, 0x36, 0x2C, 0x24, 0x2B, 0x17, 0x11, 0x25, 0x07, 0x0D, 0x29, 0x10, 0x2D, 0x33, 0x30, 0x19, 0x1B, 0x0C, 0x12, 0x00, 0x05, 0x35, 0x0B, 0x08, 0x26, 0x3E, 0x09, 0x0F, 0x16, 0x21, 0x3D, 0x3B, 0x2F, 0x3F, 0x3A, 0x20, 0x32, 0x06, 0x1E, 0x28, 0x01, 0x23, 0x34, 0x2A, 0x39, 0x03, 0x22, 0x15, 0x18, 0x04, 0x31, 0x13, 0x0A, 0x37, 0x2E, 0x1F, 0x1A, 0x02, 0x38, 0x14, 0x27, 
            0x37, 0x27, 0x39, 0x18, 0x2A, 0x02, 0x25, 0x35, 0x3F, 0x1E, 0x2E, 0x3D, 0x2F, 0x05, 0x34, 0x0C, 0x28, 0x3E, 0x16, 0x19, 0x09, 0x1F, 0x10, 0x36, 0x33, 0x07, 0x06, 0x23, 0x3C, 0x2C, 0x00, 0x1A, 0x1B, 0x24, 0x14, 0x1C, 0x2B, 0x04, 0x26, 0x20, 0x0B, 0x12, 0x30, 0x3A, 0x0F, 0x13, 0x31, 0x22, 0x32, 0x15, 0x11, 0x03, 0x08, 0x1D, 0x29, 0x0D, 0x0E, 0x3B, 0x2D, 0x17, 0x01, 0x21, 0x38, 0x0A, 
            0x3F, 0x0E, 0x39, 0x29, 0x37, 0x1E, 0x32, 0x24, 0x26, 0x18, 0x25, 0x10, 0x06, 0x17, 0x02, 0x0B, 0x36, 0x30, 0x12, 0x00, 0x03, 0x2E, 0x2C, 0x1C, 0x28, 0x1B, 0x2F, 0x0D, 0x08, 0x01, 0x07, 0x1D, 0x09, 0x21, 0x22, 0x35, 0x0F, 0x16, 0x15, 0x34, 0x3E, 0x2A, 0x2D, 0x1F, 0x04, 0x2B, 0x19, 0x3C, 0x31, 0x3D, 0x05, 0x11, 0x0A, 0x1A, 0x3A, 0x27, 0x33, 0x14, 0x3B, 0x23, 0x20, 0x13, 0x38, 0x0C, 
            0x03, 0x2B, 0x18, 0x2C, 0x00, 0x14, 0x3E, 0x31, 0x0D, 0x1A, 0x13, 0x36, 0x11, 0x22, 0x3C, 0x29, 0x1F, 0x16, 0x01, 0x02, 0x32, 0x37, 0x21, 0x19, 0x07, 0x34, 0x1C, 0x39, 0x2F, 0x2D, 0x1D, 0x20, 0x12, 0x23, 0x30, 0x2A, 0x04, 0x17, 0x28, 0x3F, 0x33, 0x3A, 0x15, 0x25, 0x1E, 0x2E, 0x0A, 0x05, 0x35, 0x26, 0x0F, 0x1B, 0x3D, 0x0E, 0x06, 0x0B, 0x27, 0x09, 0x3B, 0x38, 0x24, 0x0C, 0x10, 0x08, 
            0x3A, 0x0F, 0x1B, 0x2D, 0x13, 0x37, 0x2B, 0x3C, 0x11, 0x33, 0x35, 0x22, 0x1F, 0x2C, 0x29, 0x34, 0x09, 0x31, 0x36, 0x05, 0x08, 0x2F, 0x0D, 0x0B, 0x19, 0x10, 0x38, 0x1E, 0x01, 0x02, 0x24, 0x28, 0x17, 0x32, 0x3F, 0x25, 0x27, 0x0C, 0x14, 0x12, 0x0E, 0x2A, 0x39, 0x1C, 0x06, 0x15, 0x2E, 0x23, 0x00, 0x30, 0x03, 0x3B, 0x21, 0x0A, 0x1D, 0x26, 0x3D, 0x1A, 0x3E, 0x07, 0x16, 0x04, 0x18, 0x20, 
		
		
		    // Shuffle	Rows 33-48			
		    0x3A, 0x1E, 0x2C, 0x03, 0x1B, 0x32, 0x3F, 0x16, 0x14, 0x28, 0x0B, 0x04, 0x24, 0x2E, 0x1C, 0x22, 0x0D, 0x1A, 0x23, 0x2A, 0x2B, 0x25, 0x01, 0x2F, 0x26, 0x39, 0x34, 0x3E, 0x18, 0x2D, 0x3D, 0x3B, 0x29, 0x00, 0x06, 0x36, 0x17, 0x07, 0x1F, 0x38, 0x37, 0x08, 0x3C, 0x19, 0x20, 0x31, 0x21, 0x12, 0x11, 0x0E, 0x35, 0x02, 0x0C, 0x10, 0x0F, 0x09, 0x27, 0x05, 0x1D, 0x15, 0x0A, 0x13, 0x33, 0x30, 
            0x21, 0x00, 0x2D, 0x2F, 0x22, 0x14, 0x2A, 0x1F, 0x29, 0x26, 0x12, 0x1B, 0x02, 0x36, 0x24, 0x2E, 0x1A, 0x09, 0x0D, 0x27, 0x30, 0x19, 0x25, 0x17, 0x32, 0x1E, 0x03, 0x01, 0x0F, 0x2B, 0x13, 0x23, 0x3F, 0x33, 0x06, 0x0E, 0x10, 0x18, 0x2C, 0x0C, 0x3C, 0x20, 0x1C, 0x38, 0x34, 0x35, 0x28, 0x3B, 0x04, 0x37, 0x16, 0x31, 0x3D, 0x0B, 0x08, 0x0A, 0x05, 0x3A, 0x07, 0x39, 0x15, 0x11, 0x1D, 0x3E, 
            0x13, 0x0B, 0x3B, 0x3A, 0x29, 0x0C, 0x0D, 0x09, 0x37, 0x33, 0x20, 0x16, 0x3F, 0x19, 0x1C, 0x3D, 0x3C, 0x00, 0x36, 0x32, 0x05, 0x1E, 0x10, 0x1A, 0x06, 0x23, 0x15, 0x0F, 0x1D, 0x17, 0x04, 0x2E, 0x2A, 0x08, 0x39, 0x22, 0x01, 0x3E, 0x2C, 0x2F, 0x1B, 0x14, 0x03, 0x31, 0x25, 0x07, 0x02, 0x30, 0x2D, 0x28, 0x0A, 0x24, 0x38, 0x21, 0x27, 0x12, 0x11, 0x18, 0x0E, 0x34, 0x26, 0x35, 0x1F, 0x2B, 
            0x07, 0x27, 0x04, 0x11, 0x24, 0x0D, 0x1A, 0x05, 0x32, 0x2E, 0x1C, 0x15, 0x39, 0x1E, 0x14, 0x3A, 0x01, 0x34, 0x09, 0x10, 0x0F, 0x0C, 0x26, 0x16, 0x33, 0x3F, 0x08, 0x3C, 0x2C, 0x02, 0x20, 0x2F, 0x0B, 0x1D, 0x03, 0x37, 0x1F, 0x06, 0x19, 0x17, 0x2D, 0x25, 0x3E, 0x36, 0x1B, 0x35, 0x38, 0x00, 0x31, 0x22, 0x18, 0x3B, 0x2B, 0x0E, 0x28, 0x0A, 0x13, 0x30, 0x23, 0x21, 0x3D, 0x2A, 0x29, 0x12, 
            0x26, 0x34, 0x06, 0x19, 0x39, 0x12, 0x11, 0x3A, 0x16, 0x07, 0x3F, 0x28, 0x3C, 0x3D, 0x38, 0x3B, 0x2D, 0x0C, 0x37, 0x31, 0x1D, 0x13, 0x29, 0x30, 0x1B, 0x32, 0x03, 0x2C, 0x3E, 0x2E, 0x05, 0x01, 0x08, 0x04, 0x14, 0x1C, 0x1F, 0x23, 0x21, 0x1E, 0x10, 0x20, 0x2B, 0x27, 0x1A, 0x33, 0x00, 0x0D, 0x22, 0x25, 0x02, 0x35, 0x36, 0x0A, 0x18, 0x15, 0x09, 0x2F, 0x24, 0x17, 0x2A, 0x0E, 0x0F, 0x0B, 
            0x0A, 0x00, 0x21, 0x0F, 0x13, 0x15, 0x11, 0x08, 0x37, 0x26, 0x35, 0x22, 0x14, 0x0B, 0x1A, 0x31, 0x0E, 0x1E, 0x2E, 0x10, 0x32, 0x30, 0x29, 0x2B, 0x09, 0x2A, 0x36, 0x01, 0x20, 0x02, 0x3A, 0x1D, 0x16, 0x1C, 0x18, 0x38, 0x39, 0x3C, 0x03, 0x07, 0x3D, 0x0C, 0x33, 0x19, 0x2F, 0x05, 0x04, 0x1F, 0x23, 0x34, 0x1B, 0x24, 0x12, 0x2C, 0x25, 0x27, 0x17, 0x2D, 0x3B, 0x06, 0x0D, 0x28, 0x3F, 0x3E, 
            0x24, 0x1E, 0x1B, 0x33, 0x19, 0x06, 0x00, 0x10, 0x31, 0x29, 0x26, 0x13, 0x0E, 0x25, 0x30, 0x11, 0x20, 0x2C, 0x3F, 0x3D, 0x07, 0x0F, 0x16, 0x2A, 0x18, 0x12, 0x01, 0x28, 0x0B, 0x3A, 0x34, 0x08, 0x1C, 0x3C, 0x35, 0x1F, 0x02, 0x38, 0x2F, 0x3B, 0x05, 0x0D, 0x1A, 0x27, 0x39, 0x3E, 0x1D, 0x04, 0x22, 0x0A, 0x2E, 0x23, 0x03, 0x0C, 0x14, 0x21, 0x15, 0x37, 0x17, 0x2B, 0x2D, 0x36, 0x09, 0x32, 
            0x19, 0x04, 0x2C, 0x21, 0x12, 0x11, 0x3B, 0x1A, 0x10, 0x37, 0x39, 0x00, 0x33, 0x31, 0x14, 0x2D, 0x01, 0x2E, 0x18, 0x29, 0x02, 0x3C, 0x35, 0x25, 0x36, 0x30, 0x0A, 0x22, 0x1B, 0x17, 0x08, 0x2B, 0x3D, 0x09, 0x34, 0x23, 0x24, 0x0F, 0x2F, 0x07, 0x1D, 0x27, 0x15, 0x0B, 0x05, 0x03, 0x1F, 0x3F, 0x38, 0x1C, 0x2A, 0x20, 0x1E, 0x3A, 0x32, 0x26, 0x0E, 0x3E, 0x16, 0x28, 0x0C, 0x06, 0x13, 0x0D, 
		
		    0x1A, 0x29, 0x2F, 0x34, 0x2D, 0x19, 0x01, 0x3F, 0x1C, 0x26, 0x10, 0x23, 0x0B, 0x33, 0x14, 0x0A, 0x0C, 0x24, 0x22, 0x1F, 0x2E, 0x04, 0x28, 0x1D, 0x3B, 0x03, 0x11, 0x31, 0x1E, 0x36, 0x30, 0x15, 0x32, 0x17, 0x08, 0x0E, 0x21, 0x06, 0x39, 0x13, 0x18, 0x2B, 0x3C, 0x05, 0x00, 0x35, 0x25, 0x3D, 0x16, 0x2C, 0x02, 0x37, 0x27, 0x12, 0x09, 0x3E, 0x1B, 0x2A, 0x38, 0x07, 0x0D, 0x0F, 0x20, 0x3A, 
            0x3E, 0x2C, 0x19, 0x0C, 0x38, 0x04, 0x0D, 0x1A, 0x26, 0x35, 0x21, 0x01, 0x1B, 0x18, 0x11, 0x33, 0x2E, 0x13, 0x3D, 0x22, 0x2B, 0x06, 0x31, 0x39, 0x00, 0x08, 0x15, 0x27, 0x0F, 0x09, 0x0A, 0x30, 0x20, 0x34, 0x07, 0x17, 0x25, 0x1D, 0x29, 0x3B, 0x02, 0x03, 0x24, 0x3C, 0x1C, 0x1F, 0x16, 0x3A, 0x1E, 0x0E, 0x36, 0x23, 0x3F, 0x32, 0x05, 0x10, 0x12, 0x2D, 0x2F, 0x14, 0x0B, 0x28, 0x2A, 0x37, 
            0x10, 0x3B, 0x33, 0x38, 0x0B, 0x3E, 0x02, 0x14, 0x15, 0x2C, 0x28, 0x0E, 0x25, 0x01, 0x03, 0x36, 0x35, 0x2B, 0x20, 0x23, 0x21, 0x05, 0x1A, 0x04, 0x24, 0x32, 0x31, 0x06, 0x1C, 0x09, 0x1F, 0x3D, 0x1D, 0x07, 0x0D, 0x34, 0x22, 0x1E, 0x3F, 0x30, 0x29, 0x16, 0x13, 0x18, 0x19, 0x2F, 0x27, 0x08, 0x26, 0x2E, 0x0A, 0x3C, 0x12, 0x39, 0x00, 0x2D, 0x17, 0x0C, 0x3A, 0x11, 0x0F, 0x2A, 0x1B, 0x37, 
            0x32, 0x19, 0x02, 0x03, 0x31, 0x1E, 0x01, 0x28, 0x14, 0x36, 0x08, 0x1F, 0x07, 0x2A, 0x23, 0x16, 0x34, 0x15, 0x30, 0x33, 0x0A, 0x3B, 0x3C, 0x1B, 0x1D, 0x09, 0x25, 0x2C, 0x17, 0x11, 0x0E, 0x35, 0x37, 0x05, 0x2E, 0x0F, 0x3D, 0x24, 0x0B, 0x2B, 0x2F, 0x10, 0x04, 0x22, 0x06, 0x1C, 0x1A, 0x20, 0x38, 0x39, 0x3F, 0x3E, 0x29, 0x12, 0x0C, 0x26, 0x3A, 0x21, 0x2D, 0x13, 0x27, 0x0D, 0x00, 0x18, 
            0x21, 0x03, 0x3A, 0x27, 0x39, 0x17, 0x01, 0x09, 0x08, 0x3E, 0x20, 0x15, 0x34, 0x16, 0x00, 0x37, 0x0F, 0x0C, 0x1E, 0x07, 0x2F, 0x14, 0x1D, 0x2A, 0x0A, 0x26, 0x29, 0x12, 0x1C, 0x18, 0x1B, 0x0D, 0x04, 0x2D, 0x3D, 0x0E, 0x1F, 0x13, 0x25, 0x36, 0x19, 0x24, 0x1A, 0x11, 0x33, 0x2C, 0x28, 0x2B, 0x3C, 0x32, 0x31, 0x23, 0x06, 0x05, 0x3B, 0x02, 0x3F, 0x30, 0x38, 0x35, 0x10, 0x22, 0x2E, 0x0B, 
            0x23, 0x37, 0x21, 0x3E, 0x34, 0x02, 0x0F, 0x2A, 0x0A, 0x38, 0x25, 0x01, 0x07, 0x13, 0x30, 0x0B, 0x29, 0x10, 0x2E, 0x16, 0x31, 0x3C, 0x0C, 0x2B, 0x35, 0x28, 0x15, 0x1E, 0x1F, 0x22, 0x09, 0x11, 0x20, 0x39, 0x0D, 0x1C, 0x1B, 0x2D, 0x33, 0x03, 0x12, 0x1D, 0x19, 0x1A, 0x24, 0x2F, 0x3D, 0x05, 0x27, 0x00, 0x04, 0x14, 0x36, 0x3A, 0x06, 0x3F, 0x0E, 0x3B, 0x2C, 0x26, 0x32, 0x18, 0x08, 0x17, 
            0x25, 0x3D, 0x1D, 0x0E, 0x38, 0x07, 0x3F, 0x30, 0x00, 0x2B, 0x2D, 0x05, 0x02, 0x34, 0x3C, 0x29, 0x32, 0x1B, 0x10, 0x15, 0x16, 0x09, 0x1E, 0x04, 0x0B, 0x0C, 0x3B, 0x06, 0x31, 0x03, 0x1C, 0x1F, 0x2F, 0x0F, 0x3E, 0x11, 0x33, 0x20, 0x27, 0x0A, 0x28, 0x19, 0x3A, 0x37, 0x1A, 0x13, 0x08, 0x12, 0x23, 0x2C, 0x39, 0x22, 0x18, 0x21, 0x01, 0x0D, 0x14, 0x2A, 0x2E, 0x36, 0x24, 0x26, 0x35, 0x17, 
            0x0B, 0x38, 0x29, 0x15, 0x2E, 0x09, 0x19, 0x13, 0x2B, 0x27, 0x0D, 0x33, 0x1A, 0x32, 0x1D, 0x39, 0x11, 0x2F, 0x3B, 0x2C, 0x2D, 0x23, 0x31, 0x25, 0x20, 0x0E, 0x24, 0x28, 0x1B, 0x1C, 0x36, 0x21, 0x18, 0x35, 0x30, 0x14, 0x17, 0x05, 0x07, 0x3C, 0x03, 0x37, 0x3D, 0x08, 0x26, 0x16, 0x1E, 0x04, 0x00, 0x2A, 0x02, 0x3A, 0x06, 0x0C, 0x0A, 0x12, 0x1F, 0x0F, 0x3F, 0x01, 0x34, 0x3E, 0x22, 0x10, 
		
		
		    // Shuffle	Rows 49-64			
		    0x10, 0x05, 0x3C, 0x3A, 0x1D, 0x14, 0x01, 0x1A, 0x02, 0x03, 0x2A, 0x0A, 0x36, 0x2E, 0x26, 0x27, 0x16, 0x38, 0x06, 0x17, 0x19, 0x07, 0x0C, 0x00, 0x1E, 0x34, 0x3B, 0x28, 0x3F, 0x0E, 0x0B, 0x39, 0x31, 0x2F, 0x32, 0x20, 0x2B, 0x18, 0x37, 0x2C, 0x3E, 0x30, 0x1C, 0x21, 0x33, 0x12, 0x09, 0x35, 0x2D, 0x23, 0x11, 0x15, 0x04, 0x3D, 0x1F, 0x0D, 0x08, 0x25, 0x22, 0x13, 0x1B, 0x24, 0x29, 0x0F, 
            0x11, 0x0F, 0x06, 0x37, 0x27, 0x1A, 0x35, 0x18, 0x05, 0x0C, 0x02, 0x2B, 0x12, 0x20, 0x3B, 0x1D, 0x08, 0x30, 0x2C, 0x19, 0x10, 0x28, 0x3A, 0x2A, 0x3E, 0x15, 0x09, 0x01, 0x2F, 0x1C, 0x3F, 0x1B, 0x03, 0x38, 0x0D, 0x29, 0x1F, 0x39, 0x04, 0x2E, 0x3D, 0x36, 0x23, 0x33, 0x17, 0x3C, 0x31, 0x1E, 0x07, 0x14, 0x25, 0x26, 0x16, 0x00, 0x24, 0x0A, 0x13, 0x21, 0x0E, 0x34, 0x2D, 0x0B, 0x32, 0x22, 
            0x18, 0x09, 0x04, 0x2D, 0x3F, 0x0C, 0x35, 0x1A, 0x36, 0x22, 0x01, 0x1F, 0x2E, 0x15, 0x39, 0x08, 0x0A, 0x27, 0x37, 0x25, 0x34, 0x26, 0x24, 0x06, 0x2F, 0x23, 0x05, 0x2C, 0x10, 0x3B, 0x17, 0x32, 0x07, 0x0B, 0x02, 0x31, 0x0E, 0x28, 0x21, 0x11, 0x19, 0x1D, 0x16, 0x29, 0x00, 0x1B, 0x3D, 0x1C, 0x03, 0x30, 0x13, 0x2B, 0x3E, 0x0F, 0x0D, 0x33, 0x20, 0x2A, 0x38, 0x1E, 0x3C, 0x3A, 0x14, 0x12, 
            0x0C, 0x1A, 0x3A, 0x2F, 0x10, 0x09, 0x36, 0x22, 0x21, 0x1C, 0x25, 0x08, 0x2D, 0x07, 0x01, 0x12, 0x38, 0x1B, 0x05, 0x2C, 0x1D, 0x0E, 0x23, 0x0A, 0x14, 0x30, 0x03, 0x2A, 0x0B, 0x18, 0x02, 0x37, 0x2E, 0x06, 0x39, 0x15, 0x29, 0x32, 0x33, 0x16, 0x19, 0x24, 0x00, 0x31, 0x0D, 0x2B, 0x0F, 0x3C, 0x1F, 0x3D, 0x20, 0x13, 0x3B, 0x3F, 0x26, 0x04, 0x17, 0x3E, 0x11, 0x28, 0x35, 0x27, 0x1E, 0x34, 
            0x1B, 0x0D, 0x26, 0x12, 0x0C, 0x2C, 0x18, 0x2A, 0x34, 0x36, 0x29, 0x15, 0x3C, 0x2E, 0x3A, 0x21, 0x01, 0x14, 0x2D, 0x1D, 0x2F, 0x08, 0x27, 0x2B, 0x17, 0x00, 0x35, 0x38, 0x3B, 0x06, 0x0F, 0x1A, 0x1F, 0x3D, 0x09, 0x39, 0x07, 0x04, 0x33, 0x0A, 0x25, 0x1C, 0x16, 0x24, 0x02, 0x10, 0x13, 0x11, 0x05, 0x3E, 0x28, 0x20, 0x32, 0x19, 0x37, 0x1E, 0x31, 0x3F, 0x22, 0x0E, 0x03, 0x0B, 0x23, 0x30, 
            0x22, 0x31, 0x1D, 0x36, 0x15, 0x11, 0x03, 0x04, 0x3C, 0x08, 0x0A, 0x02, 0x26, 0x27, 0x16, 0x2E, 0x0B, 0x25, 0x3D, 0x0F, 0x0D, 0x10, 0x07, 0x00, 0x33, 0x14, 0x1F, 0x09, 0x2D, 0x3A, 0x2A, 0x19, 0x2B, 0x1E, 0x3E, 0x17, 0x2C, 0x24, 0x34, 0x29, 0x0E, 0x01, 0x12, 0x35, 0x30, 0x38, 0x28, 0x39, 0x20, 0x13, 0x3F, 0x2F, 0x0C, 0x1B, 0x18, 0x1C, 0x05, 0x3B, 0x23, 0x37, 0x06, 0x1A, 0x21, 0x32, 
            0x11, 0x2E, 0x26, 0x39, 0x33, 0x0D, 0x04, 0x01, 0x15, 0x3D, 0x23, 0x2C, 0x12, 0x19, 0x3F, 0x38, 0x00, 0x35, 0x30, 0x14, 0x20, 0x03, 0x07, 0x28, 0x1F, 0x3B, 0x24, 0x1E, 0x2B, 0x22, 0x18, 0x08, 0x27, 0x32, 0x34, 0x0C, 0x1C, 0x0A, 0x10, 0x1B, 0x05, 0x06, 0x3E, 0x31, 0x0E, 0x1A, 0x09, 0x0B, 0x02, 0x3C, 0x1D, 0x37, 0x17, 0x25, 0x2D, 0x0F, 0x16, 0x29, 0x2F, 0x13, 0x36, 0x3A, 0x2A, 0x21, 
            0x3B, 0x0F, 0x30, 0x36, 0x2C, 0x2E, 0x33, 0x05, 0x10, 0x29, 0x1F, 0x12, 0x0A, 0x09, 0x08, 0x3F, 0x1E, 0x37, 0x20, 0x39, 0x16, 0x18, 0x07, 0x3E, 0x2D, 0x26, 0x23, 0x3C, 0x34, 0x32, 0x2A, 0x27, 0x38, 0x2F, 0x0E, 0x1C, 0x03, 0x13, 0x1B, 0x11, 0x15, 0x01, 0x0B, 0x21, 0x17, 0x1A, 0x19, 0x31, 0x06, 0x00, 0x02, 0x04, 0x0C, 0x14, 0x1D, 0x0D, 0x25, 0x2B, 0x3A, 0x3D, 0x35, 0x24, 0x22, 0x28, 

		    0x26, 0x22, 0x2A, 0x29, 0x2F, 0x19, 0x39, 0x27, 0x09, 0x0F, 0x0E, 0x37, 0x04, 0x3C, 0x35, 0x01, 0x05, 0x07, 0x21, 0x33, 0x03, 0x28, 0x06, 0x0B, 0x16, 0x34, 0x17, 0x32, 0x1A, 0x1C, 0x15, 0x0C, 0x14, 0x20, 0x3F, 0x11, 0x08, 0x1D, 0x12, 0x1E, 0x30, 0x10, 0x2B, 0x13, 0x0A, 0x25, 0x2E, 0x18, 0x1B, 0x00, 0x2C, 0x3A, 0x1F, 0x23, 0x36, 0x2D, 0x38, 0x3E, 0x02, 0x0D, 0x3B, 0x31, 0x3D, 0x24, 
            0x28, 0x2E, 0x38, 0x26, 0x25, 0x31, 0x17, 0x0F, 0x33, 0x2A, 0x2D, 0x2C, 0x35, 0x22, 0x3F, 0x1F, 0x2B, 0x1E, 0x29, 0x36, 0x23, 0x06, 0x24, 0x13, 0x34, 0x20, 0x05, 0x3C, 0x0D, 0x03, 0x1B, 0x32, 0x0A, 0x2F, 0x09, 0x12, 0x19, 0x07, 0x0E, 0x3B, 0x0C, 0x30, 0x08, 0x16, 0x01, 0x15, 0x21, 0x04, 0x1A, 0x02, 0x39, 0x3D, 0x1D, 0x3E, 0x37, 0x00, 0x11, 0x18, 0x0B, 0x3A, 0x27, 0x10, 0x14, 0x1C, 
            0x01, 0x36, 0x19, 0x17, 0x2D, 0x26, 0x1E, 0x39, 0x1A, 0x3C, 0x2C, 0x1D, 0x3B, 0x16, 0x0D, 0x0F, 0x24, 0x05, 0x1B, 0x23, 0x08, 0x12, 0x25, 0x32, 0x14, 0x0A, 0x3D, 0x22, 0x2B, 0x03, 0x27, 0x1C, 0x09, 0x3F, 0x18, 0x30, 0x33, 0x04, 0x34, 0x2A, 0x00, 0x0E, 0x02, 0x37, 0x0B, 0x0C, 0x29, 0x21, 0x07, 0x3A, 0x31, 0x1F, 0x11, 0x3E, 0x13, 0x38, 0x2E, 0x06, 0x15, 0x20, 0x2F, 0x35, 0x28, 0x10, 
            0x1A, 0x07, 0x25, 0x36, 0x24, 0x39, 0x04, 0x20, 0x30, 0x27, 0x08, 0x22, 0x16, 0x10, 0x11, 0x37, 0x01, 0x2C, 0x02, 0x3D, 0x1F, 0x32, 0x2A, 0x15, 0x3E, 0x1D, 0x3F, 0x17, 0x03, 0x2D, 0x31, 0x09, 0x0A, 0x28, 0x0C, 0x2E, 0x1E, 0x1C, 0x06, 0x33, 0x14, 0x35, 0x00, 0x3A, 0x05, 0x23, 0x0F, 0x0D, 0x12, 0x38, 0x2F, 0x19, 0x34, 0x21, 0x2B, 0x3B, 0x29, 0x3C, 0x0E, 0x0B, 0x1B, 0x26, 0x13, 0x18, 
            0x24, 0x34, 0x35, 0x06, 0x0E, 0x3D, 0x1B, 0x29, 0x09, 0x0B, 0x0D, 0x05, 0x13, 0x31, 0x00, 0x0A, 0x2A, 0x32, 0x22, 0x21, 0x38, 0x3F, 0x2D, 0x19, 0x16, 0x0F, 0x36, 0x2F, 0x39, 0x17, 0x12, 0x3B, 0x1C, 0x28, 0x02, 0x27, 0x3A, 0x30, 0x1A, 0x2B, 0x07, 0x25, 0x1D, 0x2E, 0x08, 0x18, 0x20, 0x03, 0x10, 0x3C, 0x14, 0x2C, 0x37, 0x15, 0x0C, 0x33, 0x01, 0x3E, 0x26, 0x1F, 0x11, 0x23, 0x1E, 0x04, 
            0x04, 0x26, 0x08, 0x23, 0x22, 0x15, 0x31, 0x28, 0x3D, 0x07, 0x17, 0x35, 0x19, 0x1F, 0x30, 0x0C, 0x21, 0x18, 0x33, 0x1E, 0x2F, 0x3A, 0x1A, 0x27, 0x3B, 0x29, 0x2A, 0x00, 0x37, 0x32, 0x1D, 0x05, 0x06, 0x39, 0x0A, 0x14, 0x25, 0x13, 0x2C, 0x0D, 0x09, 0x0F, 0x16, 0x38, 0x12, 0x03, 0x3F, 0x2E, 0x34, 0x02, 0x01, 0x11, 0x2D, 0x10, 0x24, 0x2B, 0x1B, 0x3C, 0x3E, 0x1C, 0x0E, 0x20, 0x36, 0x0B, 
            0x37, 0x28, 0x3B, 0x1A, 0x2E, 0x27, 0x39, 0x32, 0x04, 0x07, 0x3D, 0x1D, 0x0D, 0x25, 0x29, 0x12, 0x11, 0x05, 0x00, 0x08, 0x30, 0x10, 0x21, 0x31, 0x0F, 0x17, 0x36, 0x2F, 0x33, 0x35, 0x2C, 0x18, 0x19, 0x38, 0x03, 0x23, 0x20, 0x13, 0x0A, 0x3C, 0x34, 0x2D, 0x24, 0x0C, 0x1E, 0x3F, 0x0E, 0x0B, 0x22, 0x3A, 0x09, 0x1C, 0x01, 0x06, 0x1B, 0x2A, 0x15, 0x1F, 0x16, 0x2B, 0x02, 0x14, 0x3E, 0x26, 
            0x1D, 0x16, 0x38, 0x0E, 0x02, 0x07, 0x25, 0x1F, 0x33, 0x2C, 0x35, 0x10, 0x18, 0x05, 0x13, 0x24, 0x1C, 0x29, 0x0B, 0x26, 0x12, 0x04, 0x19, 0x00, 0x27, 0x17, 0x14, 0x2A, 0x03, 0x0D, 0x39, 0x34, 0x15, 0x31, 0x09, 0x37, 0x01, 0x30, 0x3B, 0x3C, 0x3E, 0x20, 0x22, 0x3D, 0x06, 0x2D, 0x36, 0x21, 0x2F, 0x1E, 0x0C, 0x2B, 0x1B, 0x3F, 0x0A, 0x11, 0x2E, 0x08, 0x1A, 0x3A, 0x32, 0x23, 0x0F, 0x28, 
            
		
		    // Shuffle	Rows 65-80			
		    0x2D, 0x13, 0x37, 0x0B, 0x03, 0x18, 0x3E, 0x26, 0x1F, 0x29, 0x3C, 0x06, 0x21, 0x23, 0x0A, 0x39, 0x1B, 0x2A, 0x10, 0x04, 0x0C, 0x34, 0x31, 0x36, 0x00, 0x05, 0x0E, 0x01, 0x12, 0x19, 0x28, 0x32, 0x16, 0x20, 0x1A, 0x08, 0x1C, 0x0F, 0x2E, 0x2B, 0x30, 0x3D, 0x22, 0x1E, 0x15, 0x17, 0x25, 0x33, 0x07, 0x3A, 0x38, 0x11, 0x02, 0x3B, 0x3F, 0x14, 0x2F, 0x27, 0x2C, 0x35, 0x0D, 0x09, 0x24, 0x1D, 
            0x3F, 0x3B, 0x12, 0x04, 0x14, 0x13, 0x37, 0x39, 0x34, 0x0C, 0x2B, 0x1C, 0x09, 0x2F, 0x3C, 0x1B, 0x24, 0x3D, 0x36, 0x2E, 0x19, 0x18, 0x08, 0x22, 0x10, 0x31, 0x30, 0x3E, 0x38, 0x32, 0x07, 0x23, 0x0A, 0x0E, 0x05, 0x29, 0x25, 0x0D, 0x00, 0x11, 0x2A, 0x26, 0x01, 0x2C, 0x17, 0x20, 0x15, 0x28, 0x33, 0x1F, 0x1D, 0x2D, 0x16, 0x0B, 0x03, 0x1A, 0x35, 0x1E, 0x27, 0x02, 0x3A, 0x0F, 0x21, 0x06, 
            0x3A, 0x36, 0x1D, 0x13, 0x05, 0x0C, 0x34, 0x38, 0x39, 0x22, 0x0D, 0x2B, 0x07, 0x09, 0x37, 0x3B, 0x0B, 0x32, 0x08, 0x01, 0x26, 0x2C, 0x33, 0x1A, 0x20, 0x19, 0x18, 0x31, 0x24, 0x3D, 0x3F, 0x16, 0x23, 0x11, 0x30, 0x03, 0x27, 0x10, 0x21, 0x1F, 0x00, 0x0A, 0x29, 0x15, 0x1C, 0x17, 0x3C, 0x2F, 0x1E, 0x12, 0x2D, 0x02, 0x2A, 0x1B, 0x2E, 0x14, 0x04, 0x0E, 0x06, 0x35, 0x0F, 0x25, 0x3E, 0x28, 
            0x3A, 0x2B, 0x16, 0x39, 0x08, 0x12, 0x37, 0x03, 0x20, 0x04, 0x2D, 0x10, 0x01, 0x29, 0x23, 0x2E, 0x2A, 0x11, 0x35, 0x3F, 0x06, 0x3E, 0x0D, 0x3D, 0x28, 0x02, 0x26, 0x25, 0x1C, 0x18, 0x19, 0x0B, 0x05, 0x2C, 0x17, 0x09, 0x38, 0x1B, 0x15, 0x21, 0x27, 0x0F, 0x34, 0x32, 0x33, 0x1A, 0x1F, 0x1E, 0x31, 0x13, 0x00, 0x22, 0x0C, 0x3C, 0x30, 0x0A, 0x07, 0x36, 0x0E, 0x3B, 0x2F, 0x1D, 0x14, 0x24, 
            0x1C, 0x36, 0x00, 0x39, 0x01, 0x2E, 0x32, 0x07, 0x16, 0x22, 0x34, 0x28, 0x37, 0x2C, 0x21, 0x0C, 0x24, 0x1B, 0x14, 0x0A, 0x31, 0x12, 0x0B, 0x0E, 0x11, 0x1E, 0x13, 0x30, 0x0D, 0x26, 0x1D, 0x18, 0x04, 0x05, 0x38, 0x09, 0x35, 0x06, 0x29, 0x3D, 0x20, 0x08, 0x25, 0x3E, 0x27, 0x3F, 0x23, 0x15, 0x2D, 0x19, 0x03, 0x0F, 0x10, 0x2B, 0x02, 0x33, 0x2F, 0x1F, 0x3A, 0x1A, 0x2A, 0x17, 0x3C, 0x3B, 
            0x1E, 0x20, 0x29, 0x0C, 0x3E, 0x26, 0x2A, 0x21, 0x0D, 0x32, 0x2D, 0x3F, 0x03, 0x12, 0x07, 0x3A, 0x09, 0x2F, 0x3B, 0x1C, 0x38, 0x22, 0x16, 0x25, 0x04, 0x28, 0x3C, 0x36, 0x05, 0x27, 0x30, 0x33, 0x2C, 0x19, 0x0E, 0x13, 0x14, 0x1B, 0x31, 0x1F, 0x39, 0x23, 0x3D, 0x2B, 0x08, 0x1D, 0x0A, 0x1A, 0x0F, 0x15, 0x02, 0x2E, 0x37, 0x34, 0x11, 0x24, 0x35, 0x00, 0x0B, 0x01, 0x17, 0x18, 0x10, 0x06, 
            0x12, 0x15, 0x39, 0x03, 0x30, 0x13, 0x09, 0x05, 0x08, 0x1E, 0x32, 0x36, 0x07, 0x35, 0x04, 0x19, 0x20, 0x3C, 0x0D, 0x33, 0x2B, 0x3B, 0x34, 0x22, 0x10, 0x14, 0x2D, 0x16, 0x1C, 0x2E, 0x25, 0x3F, 0x24, 0x28, 0x0C, 0x3A, 0x18, 0x1B, 0x2C, 0x0B, 0x3E, 0x1F, 0x23, 0x06, 0x0F, 0x26, 0x37, 0x27, 0x02, 0x21, 0x0A, 0x0E, 0x2F, 0x17, 0x2A, 0x1A, 0x38, 0x31, 0x3D, 0x29, 0x1D, 0x11, 0x00, 0x01, 
            0x00, 0x21, 0x30, 0x33, 0x1D, 0x03, 0x39, 0x2E, 0x16, 0x25, 0x3F, 0x34, 0x32, 0x0D, 0x37, 0x0F, 0x09, 0x19, 0x3D, 0x04, 0x20, 0x06, 0x1A, 0x1B, 0x13, 0x2C, 0x24, 0x2A, 0x3C, 0x3B, 0x3A, 0x2B, 0x26, 0x27, 0x08, 0x10, 0x0C, 0x3E, 0x01, 0x1C, 0x05, 0x23, 0x22, 0x31, 0x29, 0x12, 0x18, 0x0E, 0x1F, 0x2F, 0x1E, 0x14, 0x11, 0x28, 0x15, 0x38, 0x0B, 0x07, 0x36, 0x17, 0x35, 0x0A, 0x2D, 0x02, 

            0x2A, 0x2C, 0x2F, 0x00, 0x33, 0x05, 0x0C, 0x1A, 0x14, 0x15, 0x28, 0x20, 0x12, 0x03, 0x35, 0x2E, 0x09, 0x3A, 0x0F, 0x1E, 0x3F, 0x08, 0x21, 0x1C, 0x02, 0x36, 0x01, 0x3C, 0x1B, 0x3D, 0x39, 0x24, 0x0E, 0x07, 0x22, 0x30, 0x1F, 0x06, 0x19, 0x11, 0x23, 0x13, 0x38, 0x3B, 0x0A, 0x26, 0x3E, 0x2B, 0x17, 0x32, 0x1D, 0x27, 0x10, 0x04, 0x34, 0x2D, 0x29, 0x25, 0x37, 0x0D, 0x18, 0x16, 0x31, 0x0B, 
            0x01, 0x12, 0x30, 0x31, 0x3D, 0x20, 0x25, 0x16, 0x22, 0x0A, 0x2B, 0x06, 0x08, 0x14, 0x04, 0x2E, 0x02, 0x07, 0x3E, 0x11, 0x34, 0x21, 0x36, 0x23, 0x33, 0x38, 0x2C, 0x17, 0x03, 0x24, 0x19, 0x3F, 0x0C, 0x1E, 0x1D, 0x00, 0x05, 0x3B, 0x29, 0x27, 0x28, 0x15, 0x0D, 0x1C, 0x26, 0x35, 0x2F, 0x09, 0x39, 0x1A, 0x1B, 0x0F, 0x3C, 0x3A, 0x2D, 0x18, 0x0E, 0x37, 0x2A, 0x10, 0x13, 0x0B, 0x1F, 0x32, 
            0x30, 0x1A, 0x33, 0x17, 0x3E, 0x2F, 0x3C, 0x13, 0x3B, 0x10, 0x0B, 0x15, 0x16, 0x2B, 0x0D, 0x06, 0x0E, 0x0F, 0x37, 0x3D, 0x11, 0x32, 0x05, 0x09, 0x07, 0x00, 0x36, 0x29, 0x21, 0x34, 0x27, 0x18, 0x1E, 0x2C, 0x2E, 0x08, 0x3F, 0x20, 0x2A, 0x38, 0x35, 0x3A, 0x12, 0x03, 0x39, 0x28, 0x26, 0x01, 0x04, 0x1C, 0x14, 0x0C, 0x23, 0x02, 0x31, 0x0A, 0x19, 0x24, 0x1D, 0x22, 0x2D, 0x1B, 0x1F, 0x25, 
            0x12, 0x3D, 0x1B, 0x3A, 0x28, 0x2C, 0x22, 0x3F, 0x27, 0x09, 0x0F, 0x29, 0x3C, 0x38, 0x30, 0x34, 0x07, 0x0E, 0x39, 0x23, 0x3E, 0x25, 0x02, 0x33, 0x05, 0x14, 0x1A, 0x08, 0x11, 0x24, 0x35, 0x21, 0x37, 0x0C, 0x26, 0x20, 0x31, 0x04, 0x19, 0x1F, 0x2D, 0x0B, 0x2E, 0x17, 0x3B, 0x06, 0x1E, 0x13, 0x0A, 0x16, 0x1D, 0x32, 0x15, 0x10, 0x0D, 0x36, 0x2F, 0x18, 0x00, 0x2B, 0x01, 0x2A, 0x03, 0x1C, 
            0x3F, 0x35, 0x17, 0x05, 0x07, 0x06, 0x0C, 0x0E, 0x31, 0x18, 0x28, 0x00, 0x39, 0x2A, 0x3D, 0x3E, 0x1A, 0x26, 0x04, 0x1D, 0x20, 0x19, 0x2B, 0x14, 0x32, 0x3B, 0x10, 0x33, 0x37, 0x08, 0x3C, 0x36, 0x15, 0x2F, 0x23, 0x0D, 0x0B, 0x1C, 0x3A, 0x13, 0x16, 0x01, 0x12, 0x1F, 0x24, 0x38, 0x30, 0x1E, 0x02, 0x2E, 0x0F, 0x1B, 0x25, 0x34, 0x2D, 0x11, 0x29, 0x09, 0x27, 0x22, 0x2C, 0x03, 0x0A, 0x21, 
            0x2E, 0x0A, 0x32, 0x30, 0x25, 0x1B, 0x06, 0x35, 0x37, 0x29, 0x1A, 0x16, 0x02, 0x3E, 0x3C, 0x2B, 0x12, 0x08, 0x31, 0x11, 0x3A, 0x2C, 0x1C, 0x3F, 0x19, 0x39, 0x17, 0x23, 0x05, 0x0F, 0x0B, 0x28, 0x24, 0x36, 0x10, 0x27, 0x3B, 0x1F, 0x2A, 0x34, 0x09, 0x00, 0x01, 0x1D, 0x26, 0x1E, 0x07, 0x0C, 0x13, 0x2F, 0x15, 0x0D, 0x22, 0x18, 0x20, 0x2D, 0x0E, 0x38, 0x04, 0x3D, 0x33, 0x21, 0x14, 0x03, 
            0x17, 0x15, 0x04, 0x11, 0x34, 0x05, 0x3E, 0x2A, 0x1B, 0x21, 0x01, 0x3B, 0x07, 0x0E, 0x10, 0x1A, 0x09, 0x14, 0x3F, 0x28, 0x32, 0x38, 0x29, 0x08, 0x03, 0x25, 0x12, 0x16, 0x3D, 0x1E, 0x39, 0x30, 0x1F, 0x20, 0x1C, 0x00, 0x2B, 0x22, 0x24, 0x31, 0x0C, 0x33, 0x0D, 0x37, 0x35, 0x1D, 0x18, 0x2E, 0x2D, 0x13, 0x3A, 0x19, 0x23, 0x06, 0x0A, 0x36, 0x02, 0x3C, 0x26, 0x0B, 0x2F, 0x2C, 0x0F, 0x27, 
            0x31, 0x30, 0x19, 0x3B, 0x38, 0x1F, 0x26, 0x2F, 0x0C, 0x32, 0x0E, 0x3E, 0x22, 0x1E, 0x2C, 0x0F, 0x3A, 0x13, 0x1C, 0x20, 0x0D, 0x18, 0x36, 0x0B, 0x27, 0x00, 0x08, 0x05, 0x21, 0x07, 0x24, 0x23, 0x2B, 0x02, 0x09, 0x16, 0x28, 0x06, 0x1A, 0x10, 0x01, 0x2D, 0x1B, 0x14, 0x33, 0x2E, 0x35, 0x2A, 0x1D, 0x03, 0x0A, 0x12, 0x17, 0x3D, 0x39, 0x11, 0x04, 0x3F, 0x25, 0x3C, 0x37, 0x34, 0x15, 0x29, 
            0x14, 0x3D, 0x30, 0x2D, 0x28, 0x37, 0x1A, 0x2C, 0x32, 0x25, 0x0D, 0x07, 0x20, 0x0E, 0x06, 0x3A, 0x15, 0x13, 0x31, 0x09, 0x3F, 0x34, 0x39, 0x27, 0x0B, 0x02, 0x0F, 0x23, 0x22, 0x2F, 0x3C, 0x26, 0x16, 0x1D, 0x3E, 0x08, 0x11, 0x33, 0x2E, 0x05, 0x29, 0x18, 0x12, 0x1B, 0x2A, 0x24, 0x2B, 0x19, 0x35, 0x36, 0x38, 0x21, 0x1E, 0x04, 0x00, 0x3B, 0x0A, 0x17, 0x0C, 0x01, 0x03, 0x1F, 0x1C, 0x10, 

		    
            // Shuffle	Rows 81-96			
            0x15, 0x27, 0x2C, 0x05, 0x39, 0x16, 0x29, 0x24, 0x1F, 0x18, 0x14, 0x03, 0x3B, 0x33, 0x0F, 0x0B, 0x34, 0x17, 0x1E, 0x07, 0x2F, 0x23, 0x3E, 0x2A, 0x06, 0x10, 0x2B, 0x01, 0x32, 0x21, 0x1A, 0x37, 0x25, 0x31, 0x3C, 0x0E, 0x08, 0x26, 0x19, 0x09, 0x2E, 0x12, 0x3D, 0x02, 0x0A, 0x30, 0x2D, 0x20, 0x3A, 0x3F, 0x1D, 0x11, 0x22, 0x13, 0x38, 0x04, 0x1B, 0x0D, 0x35, 0x0C, 0x36, 0x1C, 0x28, 0x00, 
            0x10, 0x22, 0x3A, 0x05, 0x35, 0x03, 0x2A, 0x29, 0x27, 0x2E, 0x3E, 0x39, 0x1D, 0x0F, 0x20, 0x07, 0x1A, 0x14, 0x2F, 0x26, 0x38, 0x08, 0x24, 0x1F, 0x01, 0x33, 0x3C, 0x21, 0x2B, 0x1B, 0x23, 0x04, 0x34, 0x15, 0x09, 0x0A, 0x18, 0x36, 0x2D, 0x0B, 0x00, 0x13, 0x0C, 0x06, 0x19, 0x32, 0x3D, 0x3F, 0x28, 0x17, 0x31, 0x16, 0x02, 0x0E, 0x12, 0x1C, 0x0D, 0x30, 0x2C, 0x3B, 0x1E, 0x37, 0x25, 0x11, 
            0x19, 0x1E, 0x10, 0x37, 0x3F, 0x3C, 0x2C, 0x20, 0x11, 0x39, 0x2D, 0x3E, 0x15, 0x28, 0x07, 0x29, 0x1F, 0x08, 0x02, 0x1B, 0x36, 0x12, 0x26, 0x2B, 0x18, 0x0D, 0x27, 0x0B, 0x3A, 0x04, 0x34, 0x01, 0x38, 0x16, 0x2A, 0x3B, 0x1C, 0x25, 0x3D, 0x06, 0x35, 0x0A, 0x21, 0x2E, 0x0E, 0x17, 0x33, 0x22, 0x05, 0x03, 0x1D, 0x0C, 0x2F, 0x13, 0x00, 0x24, 0x09, 0x14, 0x31, 0x23, 0x32, 0x0F, 0x1A, 0x30, 
            0x02, 0x23, 0x3A, 0x0E, 0x3D, 0x33, 0x17, 0x31, 0x16, 0x3E, 0x2C, 0x28, 0x3B, 0x27, 0x00, 0x19, 0x1A, 0x14, 0x08, 0x13, 0x30, 0x2F, 0x35, 0x32, 0x0B, 0x04, 0x10, 0x01, 0x20, 0x0A, 0x25, 0x1B, 0x0C, 0x0F, 0x3F, 0x2E, 0x36, 0x37, 0x24, 0x1C, 0x34, 0x1F, 0x12, 0x2B, 0x1E, 0x07, 0x05, 0x11, 0x09, 0x21, 0x22, 0x29, 0x18, 0x2D, 0x0D, 0x06, 0x15, 0x38, 0x2A, 0x26, 0x39, 0x3C, 0x1D, 0x03, 
            0x1B, 0x36, 0x12, 0x3A, 0x2D, 0x37, 0x35, 0x3D, 0x29, 0x2E, 0x3E, 0x18, 0x0E, 0x09, 0x11, 0x00, 0x15, 0x23, 0x19, 0x2F, 0x25, 0x04, 0x26, 0x03, 0x2C, 0x0F, 0x10, 0x38, 0x1F, 0x3C, 0x1E, 0x2B, 0x34, 0x3F, 0x33, 0x01, 0x28, 0x22, 0x31, 0x3B, 0x16, 0x20, 0x0A, 0x1C, 0x1D, 0x1A, 0x0C, 0x08, 0x24, 0x13, 0x05, 0x2A, 0x06, 0x14, 0x32, 0x07, 0x27, 0x0B, 0x17, 0x0D, 0x30, 0x21, 0x39, 0x02, 
            0x05, 0x2F, 0x16, 0x36, 0x31, 0x02, 0x10, 0x1E, 0x0C, 0x37, 0x3F, 0x0F, 0x12, 0x04, 0x09, 0x33, 0x06, 0x0E, 0x26, 0x1C, 0x18, 0x2C, 0x1B, 0x35, 0x2A, 0x28, 0x2D, 0x38, 0x3E, 0x25, 0x0D, 0x19, 0x2B, 0x01, 0x17, 0x22, 0x39, 0x08, 0x30, 0x1F, 0x21, 0x11, 0x0B, 0x15, 0x00, 0x29, 0x3C, 0x3B, 0x34, 0x20, 0x27, 0x3D, 0x32, 0x14, 0x03, 0x24, 0x2E, 0x0A, 0x1A, 0x13, 0x23, 0x3A, 0x07, 0x1D, 
            0x3E, 0x37, 0x0A, 0x2C, 0x34, 0x22, 0x1B, 0x03, 0x1E, 0x11, 0x35, 0x01, 0x36, 0x2B, 0x28, 0x0C, 0x0D, 0x3D, 0x3C, 0x02, 0x27, 0x26, 0x29, 0x12, 0x31, 0x00, 0x1A, 0x05, 0x04, 0x3F, 0x16, 0x2A, 0x2E, 0x19, 0x38, 0x1C, 0x2D, 0x23, 0x30, 0x18, 0x32, 0x0F, 0x06, 0x24, 0x0B, 0x1F, 0x2F, 0x20, 0x17, 0x3B, 0x25, 0x10, 0x09, 0x14, 0x0E, 0x39, 0x15, 0x08, 0x21, 0x13, 0x07, 0x1D, 0x3A, 0x33, 
            0x0B, 0x2C, 0x0C, 0x39, 0x19, 0x05, 0x15, 0x2D, 0x37, 0x24, 0x33, 0x1D, 0x3F, 0x36, 0x2E, 0x07, 0x16, 0x1A, 0x0D, 0x3D, 0x3A, 0x12, 0x13, 0x17, 0x27, 0x0A, 0x38, 0x31, 0x3B, 0x29, 0x3C, 0x2F, 0x01, 0x25, 0x28, 0x35, 0x3E, 0x1F, 0x32, 0x04, 0x0E, 0x1B, 0x23, 0x1C, 0x2B, 0x10, 0x22, 0x06, 0x11, 0x34, 0x00, 0x14, 0x21, 0x1E, 0x30, 0x08, 0x02, 0x20, 0x26, 0x18, 0x0F, 0x2A, 0x09, 0x03, 

            0x14, 0x26, 0x27, 0x0F, 0x03, 0x3F, 0x29, 0x1D, 0x20, 0x22, 0x2C, 0x17, 0x11, 0x01, 0x1C, 0x32, 0x2F, 0x19, 0x2A, 0x2E, 0x16, 0x00, 0x12, 0x3B, 0x33, 0x3D, 0x1B, 0x3E, 0x0C, 0x06, 0x36, 0x24, 0x0A, 0x18, 0x13, 0x3A, 0x0D, 0x02, 0x3C, 0x1F, 0x07, 0x38, 0x04, 0x15, 0x30, 0x1E, 0x10, 0x0B, 0x37, 0x39, 0x31, 0x1A, 0x08, 0x34, 0x2B, 0x09, 0x0E, 0x2D, 0x25, 0x28, 0x23, 0x21, 0x35, 0x05, 
            0x2F, 0x12, 0x1B, 0x0F, 0x05, 0x32, 0x0E, 0x0A, 0x30, 0x3A, 0x00, 0x2B, 0x08, 0x17, 0x1A, 0x28, 0x04, 0x19, 0x21, 0x35, 0x2D, 0x14, 0x10, 0x07, 0x11, 0x2C, 0x27, 0x13, 0x31, 0x33, 0x1F, 0x01, 0x1C, 0x37, 0x22, 0x16, 0x3C, 0x23, 0x20, 0x39, 0x26, 0x1D, 0x0C, 0x3D, 0x3B, 0x29, 0x18, 0x34, 0x06, 0x3E, 0x0B, 0x3F, 0x2A, 0x36, 0x38, 0x09, 0x1E, 0x03, 0x24, 0x0D, 0x02, 0x2E, 0x15, 0x25, 
            0x12, 0x2D, 0x34, 0x00, 0x01, 0x17, 0x18, 0x2A, 0x29, 0x0D, 0x3D, 0x1E, 0x37, 0x19, 0x16, 0x0B, 0x2E, 0x2C, 0x07, 0x33, 0x3F, 0x32, 0x15, 0x03, 0x06, 0x1B, 0x13, 0x2F, 0x35, 0x22, 0x2B, 0x0A, 0x02, 0x1D, 0x20, 0x23, 0x26, 0x30, 0x28, 0x04, 0x0E, 0x24, 0x0C, 0x3E, 0x1A, 0x39, 0x1C, 0x21, 0x3B, 0x14, 0x0F, 0x10, 0x11, 0x36, 0x05, 0x31, 0x1F, 0x38, 0x08, 0x25, 0x27, 0x09, 0x3C, 0x3A, 
            0x16, 0x2C, 0x08, 0x32, 0x26, 0x2D, 0x34, 0x38, 0x13, 0x07, 0x05, 0x03, 0x30, 0x2A, 0x19, 0x2B, 0x28, 0x3A, 0x27, 0x35, 0x29, 0x11, 0x3D, 0x17, 0x00, 0x36, 0x18, 0x3C, 0x25, 0x0E, 0x0C, 0x3F, 0x12, 0x20, 0x24, 0x06, 0x1D, 0x3E, 0x04, 0x1B, 0x1E, 0x31, 0x21, 0x1C, 0x22, 0x0B, 0x14, 0x0F, 0x3B, 0x1A, 0x10, 0x2F, 0x2E, 0x23, 0x0D, 0x33, 0x39, 0x01, 0x37, 0x02, 0x1F, 0x0A, 0x15, 0x09, 
            0x25, 0x24, 0x16, 0x31, 0x3C, 0x20, 0x26, 0x06, 0x0F, 0x1B, 0x09, 0x0E, 0x15, 0x01, 0x3F, 0x18, 0x04, 0x0D, 0x10, 0x2C, 0x36, 0x39, 0x1F, 0x1E, 0x13, 0x3A, 0x3D, 0x17, 0x3B, 0x0B, 0x12, 0x08, 0x0C, 0x2F, 0x28, 0x07, 0x2D, 0x27, 0x35, 0x03, 0x34, 0x22, 0x2B, 0x2E, 0x33, 0x1A, 0x2A, 0x19, 0x30, 0x14, 0x32, 0x3E, 0x23, 0x37, 0x00, 0x29, 0x02, 0x1D, 0x38, 0x21, 0x11, 0x1C, 0x0A, 0x05, 
            0x15, 0x01, 0x32, 0x3F, 0x3A, 0x37, 0x0B, 0x00, 0x33, 0x0C, 0x38, 0x12, 0x17, 0x14, 0x09, 0x1C, 0x20, 0x16, 0x3C, 0x06, 0x2A, 0x21, 0x04, 0x05, 0x1F, 0x35, 0x1A, 0x0D, 0x2D, 0x1D, 0x2B, 0x28, 0x0A, 0x02, 0x2E, 0x3D, 0x08, 0x31, 0x18, 0x23, 0x2F, 0x22, 0x25, 0x1E, 0x34, 0x36, 0x19, 0x07, 0x0F, 0x2C, 0x13, 0x0E, 0x27, 0x26, 0x24, 0x29, 0x30, 0x3E, 0x39, 0x03, 0x3B, 0x1B, 0x10, 0x11, 
            0x33, 0x0A, 0x38, 0x3A, 0x3C, 0x2A, 0x2F, 0x04, 0x0D, 0x0C, 0x2B, 0x03, 0x3D, 0x3F, 0x1D, 0x2D, 0x20, 0x31, 0x36, 0x0F, 0x02, 0x00, 0x1C, 0x19, 0x2C, 0x0E, 0x24, 0x0B, 0x1F, 0x30, 0x06, 0x12, 0x34, 0x32, 0x2E, 0x21, 0x35, 0x22, 0x01, 0x1E, 0x1B, 0x27, 0x17, 0x11, 0x14, 0x13, 0x07, 0x08, 0x26, 0x16, 0x05, 0x1A, 0x3E, 0x28, 0x37, 0x18, 0x15, 0x39, 0x10, 0x29, 0x3B, 0x25, 0x23, 0x09, 
            0x2B, 0x1D, 0x07, 0x21, 0x0F, 0x27, 0x00, 0x26, 0x2A, 0x16, 0x36, 0x0B, 0x1B, 0x31, 0x13, 0x39, 0x25, 0x17, 0x2D, 0x2E, 0x1E, 0x29, 0x34, 0x02, 0x03, 0x12, 0x30, 0x09, 0x23, 0x06, 0x05, 0x19, 0x28, 0x18, 0x2F, 0x15, 0x38, 0x22, 0x0A, 0x11, 0x3D, 0x10, 0x2C, 0x0C, 0x3E, 0x1A, 0x3A, 0x20, 0x1F, 0x0E, 0x01, 0x3C, 0x33, 0x3B, 0x32, 0x08, 0x3F, 0x0D, 0x35, 0x37, 0x04, 0x24, 0x1C, 0x14, 
		    
		
		    // Shuffle	Rows 97-112			
            0x20, 0x0B, 0x01, 0x2F, 0x13, 0x22, 0x02, 0x38, 0x3D, 0x06, 0x2B, 0x3A, 0x39, 0x17, 0x12, 0x3F, 0x33, 0x3B, 0x1A, 0x21, 0x2D, 0x37, 0x29, 0x15, 0x24, 0x08, 0x14, 0x2E, 0x30, 0x35, 0x0E, 0x31, 0x1D, 0x3E, 0x34, 0x1F, 0x19, 0x23, 0x04, 0x26, 0x2C, 0x0A, 0x18, 0x07, 0x10, 0x32, 0x1B, 0x05, 0x11, 0x00, 0x3C, 0x0C, 0x0F, 0x1C, 0x0D, 0x1E, 0x03, 0x2A, 0x27, 0x09, 0x25, 0x36, 0x16, 0x28, 
            0x04, 0x31, 0x20, 0x2D, 0x33, 0x39, 0x06, 0x3E, 0x0A, 0x15, 0x36, 0x3B, 0x02, 0x37, 0x13, 0x3A, 0x0F, 0x1D, 0x32, 0x38, 0x1F, 0x18, 0x30, 0x0B, 0x0C, 0x16, 0x07, 0x22, 0x1E, 0x05, 0x1C, 0x10, 0x25, 0x14, 0x3F, 0x29, 0x08, 0x3C, 0x11, 0x03, 0x2A, 0x3D, 0x23, 0x00, 0x0E, 0x21, 0x0D, 0x34, 0x01, 0x24, 0x12, 0x1B, 0x2B, 0x2F, 0x26, 0x2E, 0x27, 0x2C, 0x28, 0x17, 0x09, 0x19, 0x35, 0x1A, 
            0x22, 0x3D, 0x15, 0x13, 0x20, 0x1A, 0x2E, 0x16, 0x37, 0x1F, 0x12, 0x31, 0x3A, 0x21, 0x0A, 0x17, 0x0D, 0x33, 0x06, 0x2B, 0x09, 0x23, 0x00, 0x07, 0x3C, 0x25, 0x29, 0x32, 0x27, 0x34, 0x39, 0x28, 0x10, 0x24, 0x1E, 0x11, 0x38, 0x3B, 0x2C, 0x14, 0x1B, 0x0C, 0x0B, 0x19, 0x04, 0x02, 0x3F, 0x0E, 0x2A, 0x1D, 0x03, 0x36, 0x01, 0x30, 0x2D, 0x08, 0x0F, 0x1C, 0x35, 0x3E, 0x2F, 0x18, 0x05, 0x26, 
            0x33, 0x14, 0x20, 0x06, 0x3A, 0x0C, 0x1C, 0x0A, 0x25, 0x04, 0x1A, 0x17, 0x08, 0x3B, 0x2B, 0x2F, 0x21, 0x1D, 0x2D, 0x0F, 0x10, 0x16, 0x01, 0x2C, 0x31, 0x22, 0x37, 0x12, 0x3D, 0x2E, 0x07, 0x1F, 0x00, 0x23, 0x29, 0x35, 0x15, 0x30, 0x0D, 0x27, 0x0B, 0x1E, 0x38, 0x18, 0x02, 0x0E, 0x11, 0x39, 0x03, 0x3F, 0x34, 0x05, 0x19, 0x09, 0x1B, 0x24, 0x26, 0x3C, 0x28, 0x2A, 0x36, 0x32, 0x13, 0x3E, 
            0x0A, 0x16, 0x06, 0x2E, 0x10, 0x02, 0x2A, 0x0D, 0x15, 0x36, 0x1E, 0x3B, 0x17, 0x2C, 0x26, 0x20, 0x35, 0x21, 0x29, 0x09, 0x3F, 0x08, 0x01, 0x1D, 0x22, 0x14, 0x07, 0x13, 0x34, 0x31, 0x18, 0x0B, 0x00, 0x2F, 0x30, 0x38, 0x0F, 0x03, 0x05, 0x3A, 0x11, 0x27, 0x1F, 0x37, 0x1A, 0x2D, 0x12, 0x24, 0x1C, 0x33, 0x39, 0x0C, 0x32, 0x0E, 0x28, 0x3E, 0x23, 0x2B, 0x25, 0x1B, 0x3D, 0x19, 0x3C, 0x04, 
            0x36, 0x01, 0x03, 0x3C, 0x1F, 0x1B, 0x1A, 0x02, 0x1E, 0x1C, 0x0E, 0x0F, 0x08, 0x0C, 0x2D, 0x22, 0x39, 0x07, 0x38, 0x33, 0x06, 0x32, 0x17, 0x09, 0x28, 0x23, 0x3E, 0x37, 0x05, 0x35, 0x2F, 0x0A, 0x3D, 0x3F, 0x11, 0x19, 0x2C, 0x29, 0x27, 0x25, 0x2B, 0x2E, 0x21, 0x3B, 0x10, 0x14, 0x20, 0x0D, 0x34, 0x13, 0x26, 0x04, 0x15, 0x30, 0x24, 0x00, 0x1D, 0x16, 0x2A, 0x3A, 0x31, 0x12, 0x0B, 0x18, 
            0x21, 0x03, 0x26, 0x32, 0x1A, 0x04, 0x2D, 0x2E, 0x13, 0x14, 0x01, 0x23, 0x20, 0x0A, 0x3E, 0x17, 0x1E, 0x28, 0x11, 0x0B, 0x0F, 0x38, 0x3F, 0x06, 0x19, 0x31, 0x15, 0x02, 0x3B, 0x33, 0x3C, 0x35, 0x2C, 0x09, 0x05, 0x0E, 0x2A, 0x07, 0x1D, 0x30, 0x18, 0x1C, 0x1F, 0x27, 0x2B, 0x29, 0x22, 0x39, 0x2F, 0x10, 0x08, 0x1B, 0x3A, 0x0D, 0x24, 0x16, 0x00, 0x3D, 0x34, 0x36, 0x25, 0x37, 0x12, 0x0C, 
            0x37, 0x13, 0x0F, 0x25, 0x34, 0x1C, 0x27, 0x03, 0x12, 0x2A, 0x08, 0x1D, 0x3C, 0x30, 0x18, 0x29, 0x0B, 0x0C, 0x06, 0x00, 0x36, 0x07, 0x09, 0x1A, 0x22, 0x3F, 0x3B, 0x02, 0x10, 0x14, 0x3A, 0x32, 0x28, 0x1B, 0x0D, 0x1E, 0x24, 0x17, 0x16, 0x2B, 0x2E, 0x20, 0x35, 0x01, 0x2F, 0x0E, 0x23, 0x05, 0x21, 0x04, 0x3E, 0x11, 0x0A, 0x3D, 0x38, 0x33, 0x39, 0x19, 0x2C, 0x2D, 0x15, 0x31, 0x26, 0x1F, 
            
            0x35, 0x2F, 0x09, 0x23, 0x30, 0x03, 0x17, 0x28, 0x3E, 0x1D, 0x06, 0x08, 0x1F, 0x04, 0x2B, 0x0B, 0x2A, 0x22, 0x31, 0x1B, 0x16, 0x2E, 0x0A, 0x12, 0x39, 0x25, 0x26, 0x3F, 0x1C, 0x1A, 0x33, 0x2D, 0x18, 0x00, 0x0E, 0x05, 0x20, 0x10, 0x0D, 0x24, 0x15, 0x32, 0x02, 0x07, 0x0F, 0x2C, 0x19, 0x01, 0x14, 0x11, 0x3C, 0x34, 0x27, 0x1E, 0x21, 0x3A, 0x29, 0x3B, 0x13, 0x0C, 0x38, 0x37, 0x36, 0x3D, 
            0x1F, 0x0D, 0x2F, 0x20, 0x3F, 0x2C, 0x08, 0x1E, 0x24, 0x1A, 0x07, 0x22, 0x01, 0x3B, 0x26, 0x28, 0x10, 0x31, 0x3E, 0x27, 0x1C, 0x29, 0x17, 0x04, 0x0F, 0x18, 0x02, 0x21, 0x25, 0x14, 0x2B, 0x3C, 0x19, 0x3A, 0x03, 0x2A, 0x2D, 0x35, 0x30, 0x23, 0x33, 0x09, 0x12, 0x00, 0x0B, 0x36, 0x1D, 0x34, 0x37, 0x15, 0x38, 0x0A, 0x0C, 0x16, 0x06, 0x39, 0x0E, 0x05, 0x13, 0x3D, 0x1B, 0x32, 0x11, 0x2E, 
            0x26, 0x05, 0x1E, 0x1F, 0x07, 0x3F, 0x21, 0x38, 0x3E, 0x0A, 0x1A, 0x32, 0x04, 0x08, 0x35, 0x1C, 0x1D, 0x23, 0x0B, 0x12, 0x0F, 0x2E, 0x1B, 0x16, 0x10, 0x09, 0x36, 0x15, 0x00, 0x31, 0x33, 0x30, 0x3C, 0x03, 0x13, 0x3B, 0x14, 0x34, 0x0D, 0x29, 0x06, 0x28, 0x02, 0x25, 0x37, 0x19, 0x2B, 0x0C, 0x24, 0x2D, 0x17, 0x22, 0x3A, 0x11, 0x39, 0x18, 0x01, 0x20, 0x2F, 0x2C, 0x0E, 0x3D, 0x2A, 0x27, 
            0x1B, 0x17, 0x05, 0x0F, 0x25, 0x29, 0x12, 0x06, 0x18, 0x2E, 0x2F, 0x09, 0x01, 0x0A, 0x0D, 0x16, 0x14, 0x11, 0x23, 0x39, 0x15, 0x3B, 0x13, 0x3E, 0x1D, 0x24, 0x0C, 0x37, 0x36, 0x3D, 0x00, 0x31, 0x03, 0x02, 0x19, 0x32, 0x20, 0x21, 0x0E, 0x35, 0x26, 0x10, 0x28, 0x30, 0x38, 0x0B, 0x3C, 0x04, 0x1F, 0x22, 0x34, 0x2A, 0x27, 0x1E, 0x33, 0x2B, 0x3F, 0x07, 0x3A, 0x2C, 0x2D, 0x1C, 0x1A, 0x08, 
            0x3F, 0x3E, 0x04, 0x38, 0x0B, 0x0D, 0x1A, 0x25, 0x06, 0x01, 0x12, 0x29, 0x27, 0x36, 0x21, 0x10, 0x2B, 0x03, 0x3A, 0x31, 0x15, 0x32, 0x2A, 0x0E, 0x05, 0x18, 0x3B, 0x1C, 0x39, 0x3D, 0x28, 0x1D, 0x17, 0x2C, 0x2D, 0x02, 0x07, 0x19, 0x16, 0x26, 0x23, 0x14, 0x33, 0x20, 0x0C, 0x22, 0x11, 0x34, 0x00, 0x13, 0x30, 0x35, 0x0F, 0x24, 0x2F, 0x08, 0x1F, 0x1E, 0x1B, 0x0A, 0x3C, 0x09, 0x37, 0x2E, 
            0x11, 0x33, 0x26, 0x35, 0x13, 0x3F, 0x2F, 0x09, 0x22, 0x39, 0x24, 0x37, 0x3A, 0x28, 0x3C, 0x23, 0x25, 0x14, 0x10, 0x0B, 0x27, 0x12, 0x15, 0x0D, 0x20, 0x38, 0x31, 0x08, 0x16, 0x36, 0x1C, 0x05, 0x01, 0x1D, 0x07, 0x19, 0x18, 0x0A, 0x3B, 0x00, 0x04, 0x0C, 0x2E, 0x1F, 0x32, 0x0E, 0x1A, 0x34, 0x17, 0x1E, 0x29, 0x3D, 0x21, 0x03, 0x30, 0x0F, 0x2A, 0x06, 0x3E, 0x02, 0x1B, 0x2C, 0x2B, 0x2D, 
            0x2A, 0x01, 0x2E, 0x00, 0x10, 0x3A, 0x1F, 0x02, 0x26, 0x32, 0x12, 0x3D, 0x09, 0x25, 0x04, 0x1E, 0x21, 0x1D, 0x11, 0x07, 0x18, 0x20, 0x2C, 0x19, 0x39, 0x28, 0x08, 0x15, 0x36, 0x38, 0x24, 0x3F, 0x3E, 0x03, 0x1A, 0x0B, 0x22, 0x37, 0x14, 0x06, 0x0A, 0x34, 0x35, 0x30, 0x0F, 0x2F, 0x3B, 0x0D, 0x0E, 0x13, 0x23, 0x17, 0x2D, 0x31, 0x29, 0x1C, 0x0C, 0x3C, 0x27, 0x2B, 0x33, 0x05, 0x1B, 0x16, 
            0x30, 0x31, 0x38, 0x3C, 0x36, 0x14, 0x26, 0x25, 0x20, 0x27, 0x07, 0x05, 0x2F, 0x23, 0x1C, 0x3B, 0x18, 0x0D, 0x24, 0x33, 0x17, 0x3F, 0x0E, 0x03, 0x1B, 0x28, 0x10, 0x12, 0x22, 0x34, 0x08, 0x29, 0x0B, 0x1D, 0x04, 0x19, 0x39, 0x3D, 0x00, 0x0A, 0x02, 0x32, 0x2A, 0x0C, 0x0F, 0x2B, 0x3E, 0x01, 0x37, 0x1A, 0x2E, 0x2D, 0x13, 0x1F, 0x21, 0x15, 0x16, 0x11, 0x06, 0x1E, 0x35, 0x09, 0x3A, 0x2C, 
		    

		    // Shuffle	Rows 113-128			
            0x08, 0x34, 0x2D, 0x2B, 0x3E, 0x1F, 0x0C, 0x0D, 0x3F, 0x32, 0x07, 0x26, 0x23, 0x30, 0x2E, 0x3A, 0x28, 0x04, 0x10, 0x05, 0x21, 0x29, 0x27, 0x18, 0x37, 0x3C, 0x12, 0x0A, 0x11, 0x25, 0x06, 0x01, 0x13, 0x24, 0x3D, 0x22, 0x2C, 0x33, 0x0F, 0x02, 0x0B, 0x1D, 0x20, 0x1C, 0x39, 0x1A, 0x15, 0x00, 0x38, 0x3B, 0x03, 0x14, 0x2A, 0x31, 0x35, 0x17, 0x16, 0x1E, 0x19, 0x1B, 0x2F, 0x09, 0x36, 0x0E, 
            0x11, 0x30, 0x1C, 0x35, 0x3F, 0x00, 0x08, 0x05, 0x0A, 0x18, 0x3B, 0x25, 0x36, 0x1E, 0x3C, 0x0C, 0x2A, 0x1F, 0x01, 0x39, 0x14, 0x27, 0x21, 0x37, 0x0B, 0x06, 0x28, 0x09, 0x02, 0x32, 0x1B, 0x2F, 0x07, 0x3E, 0x3A, 0x31, 0x34, 0x2C, 0x2E, 0x0F, 0x33, 0x13, 0x38, 0x22, 0x24, 0x04, 0x3D, 0x03, 0x19, 0x0E, 0x29, 0x12, 0x1A, 0x17, 0x10, 0x0D, 0x16, 0x2B, 0x23, 0x2D, 0x15, 0x20, 0x1D, 0x26, 
            0x20, 0x23, 0x06, 0x2C, 0x2B, 0x0F, 0x22, 0x10, 0x38, 0x0D, 0x2F, 0x30, 0x11, 0x1D, 0x07, 0x27, 0x26, 0x1B, 0x15, 0x03, 0x0C, 0x3E, 0x1E, 0x25, 0x24, 0x13, 0x04, 0x37, 0x09, 0x01, 0x05, 0x2A, 0x18, 0x16, 0x14, 0x33, 0x29, 0x21, 0x0E, 0x1F, 0x39, 0x2D, 0x31, 0x0A, 0x0B, 0x19, 0x00, 0x12, 0x34, 0x35, 0x02, 0x36, 0x3C, 0x3A, 0x17, 0x2E, 0x08, 0x32, 0x3F, 0x1C, 0x1A, 0x3D, 0x3B, 0x28, 
            0x34, 0x01, 0x1E, 0x0A, 0x26, 0x20, 0x15, 0x08, 0x2F, 0x1D, 0x27, 0x00, 0x11, 0x06, 0x2C, 0x1C, 0x0B, 0x37, 0x1F, 0x25, 0x07, 0x12, 0x16, 0x35, 0x3A, 0x21, 0x05, 0x2A, 0x3C, 0x0F, 0x0D, 0x04, 0x2D, 0x23, 0x10, 0x3F, 0x14, 0x33, 0x32, 0x39, 0x22, 0x18, 0x31, 0x3B, 0x13, 0x02, 0x36, 0x1B, 0x0E, 0x29, 0x28, 0x09, 0x38, 0x2E, 0x3E, 0x24, 0x30, 0x1A, 0x17, 0x0C, 0x19, 0x03, 0x2B, 0x3D, 
            0x3D, 0x3C, 0x27, 0x11, 0x25, 0x39, 0x18, 0x3E, 0x1E, 0x15, 0x0B, 0x0C, 0x14, 0x30, 0x04, 0x07, 0x1D, 0x34, 0x38, 0x02, 0x20, 0x28, 0x23, 0x22, 0x1A, 0x33, 0x17, 0x16, 0x0A, 0x19, 0x3A, 0x2A, 0x2E, 0x1C, 0x24, 0x0F, 0x35, 0x31, 0x26, 0x36, 0x37, 0x1F, 0x3B, 0x2F, 0x0E, 0x3F, 0x0D, 0x21, 0x12, 0x05, 0x13, 0x29, 0x2B, 0x2D, 0x32, 0x09, 0x2C, 0x00, 0x06, 0x10, 0x08, 0x03, 0x01, 0x1B, 
            0x19, 0x3D, 0x07, 0x0D, 0x1E, 0x17, 0x29, 0x35, 0x30, 0x24, 0x01, 0x23, 0x0F, 0x0E, 0x38, 0x14, 0x3A, 0x3E, 0x09, 0x0B, 0x13, 0x05, 0x16, 0x25, 0x08, 0x0A, 0x2A, 0x02, 0x37, 0x1C, 0x00, 0x34, 0x32, 0x03, 0x12, 0x21, 0x1D, 0x06, 0x1A, 0x11, 0x2C, 0x1F, 0x20, 0x2D, 0x1B, 0x2B, 0x39, 0x3B, 0x18, 0x3F, 0x10, 0x36, 0x22, 0x3C, 0x0C, 0x28, 0x26, 0x31, 0x2E, 0x2F, 0x15, 0x33, 0x27, 0x04, 
            0x39, 0x21, 0x01, 0x1A, 0x1B, 0x14, 0x10, 0x2D, 0x13, 0x34, 0x05, 0x28, 0x3D, 0x1D, 0x3B, 0x0F, 0x25, 0x07, 0x38, 0x2B, 0x32, 0x29, 0x3C, 0x1C, 0x15, 0x2E, 0x0C, 0x27, 0x0E, 0x1F, 0x26, 0x0D, 0x30, 0x16, 0x08, 0x22, 0x0A, 0x03, 0x20, 0x11, 0x35, 0x1E, 0x3E, 0x3F, 0x02, 0x33, 0x06, 0x31, 0x3A, 0x2A, 0x04, 0x17, 0x23, 0x2F, 0x12, 0x18, 0x37, 0x36, 0x09, 0x00, 0x2C, 0x24, 0x19, 0x0B, 
            0x1F, 0x22, 0x08, 0x39, 0x30, 0x17, 0x1D, 0x38, 0x3C, 0x0A, 0x0F, 0x1C, 0x35, 0x1A, 0x3B, 0x2E, 0x13, 0x1B, 0x07, 0x36, 0x09, 0x0D, 0x3E, 0x31, 0x10, 0x16, 0x19, 0x15, 0x27, 0x24, 0x03, 0x20, 0x0B, 0x37, 0x14, 0x0E, 0x2A, 0x2B, 0x34, 0x3A, 0x1E, 0x2F, 0x2D, 0x12, 0x01, 0x11, 0x05, 0x0C, 0x02, 0x04, 0x26, 0x23, 0x3F, 0x32, 0x3D, 0x25, 0x18, 0x21, 0x33, 0x2C, 0x28, 0x06, 0x00, 0x29, 
            
            0x24, 0x04, 0x02, 0x16, 0x3D, 0x28, 0x09, 0x15, 0x2F, 0x39, 0x3E, 0x2B, 0x3B, 0x2A, 0x21, 0x06, 0x19, 0x0C, 0x22, 0x30, 0x27, 0x23, 0x29, 0x0D, 0x05, 0x12, 0x3F, 0x18, 0x1E, 0x0A, 0x13, 0x1F, 0x37, 0x0E, 0x10, 0x3A, 0x11, 0x08, 0x17, 0x25, 0x32, 0x35, 0x1A, 0x07, 0x2C, 0x31, 0x36, 0x03, 0x3C, 0x1D, 0x20, 0x14, 0x34, 0x01, 0x0B, 0x33, 0x1C, 0x2E, 0x1B, 0x26, 0x2D, 0x38, 0x0F, 0x00, 
            0x36, 0x33, 0x05, 0x21, 0x31, 0x30, 0x3F, 0x3B, 0x32, 0x23, 0x0E, 0x15, 0x16, 0x24, 0x17, 0x0F, 0x03, 0x3C, 0x1C, 0x10, 0x1D, 0x2C, 0x22, 0x2F, 0x2D, 0x25, 0x29, 0x18, 0x19, 0x20, 0x00, 0x34, 0x09, 0x26, 0x37, 0x12, 0x35, 0x06, 0x3D, 0x02, 0x1E, 0x3A, 0x2A, 0x1F, 0x1B, 0x39, 0x13, 0x28, 0x0B, 0x08, 0x01, 0x2E, 0x0C, 0x3E, 0x1A, 0x07, 0x0D, 0x11, 0x2B, 0x0A, 0x27, 0x38, 0x14, 0x04, 
            0x2C, 0x33, 0x22, 0x28, 0x2D, 0x13, 0x05, 0x07, 0x1B, 0x10, 0x24, 0x29, 0x20, 0x04, 0x15, 0x14, 0x2E, 0x18, 0x1D, 0x32, 0x27, 0x3A, 0x39, 0x3B, 0x2B, 0x3F, 0x34, 0x2A, 0x11, 0x0E, 0x17, 0x19, 0x23, 0x03, 0x09, 0x0C, 0x38, 0x3C, 0x37, 0x0A, 0x25, 0x0D, 0x35, 0x01, 0x36, 0x26, 0x1E, 0x21, 0x3D, 0x1A, 0x30, 0x06, 0x0F, 0x02, 0x00, 0x1F, 0x3E, 0x12, 0x2F, 0x08, 0x16, 0x31, 0x0B, 0x1C, 
            0x3A, 0x38, 0x3F, 0x25, 0x20, 0x32, 0x0B, 0x03, 0x13, 0x0F, 0x05, 0x0E, 0x1D, 0x0D, 0x2C, 0x39, 0x2A, 0x16, 0x3D, 0x3C, 0x09, 0x10, 0x24, 0x18, 0x1A, 0x1F, 0x06, 0x28, 0x27, 0x00, 0x14, 0x34, 0x04, 0x15, 0x0A, 0x23, 0x33, 0x01, 0x3E, 0x22, 0x2E, 0x1E, 0x21, 0x2B, 0x3B, 0x2F, 0x31, 0x1B, 0x07, 0x30, 0x36, 0x19, 0x08, 0x26, 0x12, 0x17, 0x2D, 0x35, 0x37, 0x0C, 0x02, 0x11, 0x1C, 0x29, 
            0x12, 0x28, 0x34, 0x0B, 0x26, 0x39, 0x3D, 0x21, 0x15, 0x0F, 0x32, 0x3E, 0x31, 0x1C, 0x27, 0x33, 0x23, 0x30, 0x3A, 0x03, 0x16, 0x29, 0x25, 0x0E, 0x14, 0x20, 0x19, 0x24, 0x10, 0x1E, 0x2C, 0x0C, 0x2A, 0x01, 0x07, 0x2F, 0x36, 0x05, 0x00, 0x09, 0x17, 0x22, 0x04, 0x37, 0x3B, 0x0A, 0x1A, 0x0D, 0x38, 0x1B, 0x1D, 0x2B, 0x18, 0x35, 0x13, 0x2E, 0x02, 0x2D, 0x06, 0x3F, 0x11, 0x08, 0x3C, 0x1F, 
            0x36, 0x20, 0x35, 0x0A, 0x18, 0x2F, 0x30, 0x2B, 0x01, 0x07, 0x0B, 0x15, 0x3B, 0x1F, 0x22, 0x39, 0x1E, 0x3E, 0x19, 0x27, 0x3A, 0x10, 0x25, 0x13, 0x14, 0x1D, 0x23, 0x29, 0x3F, 0x12, 0x0E, 0x37, 0x31, 0x06, 0x04, 0x0F, 0x2D, 0x17, 0x26, 0x16, 0x24, 0x11, 0x0D, 0x38, 0x08, 0x09, 0x00, 0x1A, 0x32, 0x2E, 0x0C, 0x03, 0x2C, 0x02, 0x1C, 0x3C, 0x21, 0x33, 0x05, 0x1B, 0x34, 0x2A, 0x3D, 0x28, 
            0x2A, 0x34, 0x3F, 0x10, 0x2F, 0x06, 0x2E, 0x24, 0x14, 0x2D, 0x1A, 0x0E, 0x0C, 0x04, 0x39, 0x3D, 0x09, 0x23, 0x01, 0x2C, 0x22, 0x33, 0x3B, 0x05, 0x32, 0x3A, 0x0D, 0x2B, 0x21, 0x1E, 0x29, 0x00, 0x3C, 0x26, 0x15, 0x1C, 0x02, 0x1B, 0x12, 0x13, 0x08, 0x1D, 0x38, 0x19, 0x20, 0x0A, 0x03, 0x17, 0x1F, 0x18, 0x11, 0x0F, 0x31, 0x16, 0x0B, 0x36, 0x25, 0x27, 0x28, 0x3E, 0x30, 0x37, 0x07, 0x35, 
            0x1C, 0x3A, 0x10, 0x07, 0x14, 0x00, 0x01, 0x08, 0x0E, 0x2F, 0x06, 0x28, 0x1A, 0x0B, 0x22, 0x36, 0x09, 0x39, 0x11, 0x3C, 0x16, 0x0D, 0x13, 0x20, 0x34, 0x2C, 0x19, 0x1E, 0x0C, 0x30, 0x27, 0x15, 0x21, 0x2A, 0x32, 0x17, 0x05, 0x33, 0x31, 0x0F, 0x04, 0x3D, 0x1F, 0x37, 0x2E, 0x38, 0x03, 0x29, 0x35, 0x2B, 0x1D, 0x24, 0x02, 0x3E, 0x25, 0x3F, 0x23, 0x2D, 0x26, 0x1B, 0x0A, 0x18, 0x3B, 0x12, 

		    
		    // Shuffle	Rows 129-144			
            0x38, 0x05, 0x28, 0x2D, 0x16, 0x1B, 0x0D, 0x3D, 0x0F, 0x14, 0x33, 0x27, 0x06, 0x0C, 0x26, 0x1F, 0x34, 0x3F, 0x20, 0x2F, 0x25, 0x02, 0x13, 0x2C, 0x23, 0x11, 0x10, 0x37, 0x21, 0x1D, 0x07, 0x3B, 0x3C, 0x08, 0x18, 0x29, 0x0B, 0x0E, 0x1A, 0x2B, 0x19, 0x35, 0x12, 0x39, 0x0A, 0x09, 0x24, 0x3E, 0x31, 0x00, 0x17, 0x22, 0x1E, 0x3A, 0x1C, 0x30, 0x36, 0x01, 0x04, 0x32, 0x2A, 0x03, 0x2E, 0x15, 
            0x15, 0x0B, 0x1F, 0x07, 0x17, 0x34, 0x2C, 0x3B, 0x23, 0x36, 0x3F, 0x22, 0x0E, 0x02, 0x14, 0x38, 0x01, 0x2F, 0x04, 0x31, 0x3D, 0x11, 0x28, 0x09, 0x16, 0x32, 0x1C, 0x1E, 0x08, 0x1D, 0x3C, 0x29, 0x2D, 0x13, 0x37, 0x18, 0x39, 0x30, 0x21, 0x12, 0x05, 0x20, 0x33, 0x0C, 0x3A, 0x06, 0x2B, 0x03, 0x35, 0x0D, 0x2E, 0x1B, 0x3E, 0x27, 0x1A, 0x0A, 0x26, 0x25, 0x19, 0x10, 0x00, 0x0F, 0x2A, 0x24, 
            0x3F, 0x17, 0x31, 0x33, 0x2D, 0x38, 0x2F, 0x34, 0x3C, 0x37, 0x10, 0x3A, 0x07, 0x11, 0x2C, 0x18, 0x0D, 0x35, 0x15, 0x29, 0x3B, 0x26, 0x30, 0x27, 0x1C, 0x2A, 0x21, 0x0A, 0x36, 0x05, 0x08, 0x22, 0x1A, 0x1F, 0x0F, 0x2B, 0x06, 0x0B, 0x20, 0x00, 0x32, 0x14, 0x12, 0x04, 0x3E, 0x03, 0x0E, 0x1B, 0x39, 0x24, 0x23, 0x02, 0x25, 0x0C, 0x09, 0x01, 0x1D, 0x19, 0x16, 0x13, 0x3D, 0x2E, 0x28, 0x1E, 
            0x26, 0x11, 0x1A, 0x21, 0x29, 0x06, 0x37, 0x24, 0x2C, 0x3F, 0x25, 0x04, 0x3D, 0x23, 0x1D, 0x18, 0x35, 0x3B, 0x2D, 0x07, 0x33, 0x17, 0x28, 0x0B, 0x0E, 0x1C, 0x1E, 0x2E, 0x3C, 0x27, 0x03, 0x0D, 0x10, 0x2F, 0x38, 0x22, 0x14, 0x1B, 0x20, 0x39, 0x2B, 0x01, 0x00, 0x02, 0x0F, 0x3E, 0x08, 0x0A, 0x09, 0x19, 0x31, 0x32, 0x0C, 0x3A, 0x34, 0x13, 0x1F, 0x36, 0x12, 0x2A, 0x30, 0x15, 0x16, 0x05, 
            0x1A, 0x1B, 0x08, 0x12, 0x3F, 0x33, 0x1D, 0x17, 0x1F, 0x38, 0x00, 0x28, 0x19, 0x09, 0x24, 0x1E, 0x31, 0x3C, 0x2A, 0x36, 0x05, 0x27, 0x3E, 0x02, 0x34, 0x0D, 0x0F, 0x25, 0x2D, 0x26, 0x3B, 0x01, 0x10, 0x03, 0x0B, 0x2B, 0x39, 0x35, 0x23, 0x06, 0x0E, 0x3D, 0x11, 0x1C, 0x15, 0x37, 0x14, 0x07, 0x18, 0x2E, 0x20, 0x30, 0x3A, 0x29, 0x0A, 0x2F, 0x04, 0x21, 0x0C, 0x22, 0x16, 0x13, 0x32, 0x2C, 
            0x1E, 0x2F, 0x1C, 0x2E, 0x15, 0x01, 0x04, 0x12, 0x1D, 0x07, 0x33, 0x28, 0x3C, 0x0A, 0x13, 0x32, 0x14, 0x0D, 0x3A, 0x23, 0x10, 0x17, 0x03, 0x00, 0x37, 0x2B, 0x11, 0x0E, 0x22, 0x26, 0x35, 0x02, 0x09, 0x38, 0x3B, 0x16, 0x1F, 0x08, 0x39, 0x20, 0x3D, 0x0F, 0x31, 0x05, 0x2A, 0x2D, 0x25, 0x34, 0x3E, 0x36, 0x06, 0x24, 0x21, 0x30, 0x1A, 0x18, 0x0C, 0x2C, 0x3F, 0x29, 0x0B, 0x1B, 0x19, 0x27, 
            0x16, 0x06, 0x19, 0x0E, 0x36, 0x18, 0x1A, 0x39, 0x2B, 0x22, 0x12, 0x37, 0x3D, 0x10, 0x27, 0x3E, 0x33, 0x26, 0x1E, 0x34, 0x17, 0x2F, 0x25, 0x20, 0x07, 0x0F, 0x02, 0x0D, 0x3A, 0x23, 0x04, 0x32, 0x3F, 0x05, 0x3B, 0x2E, 0x38, 0x08, 0x1F, 0x2C, 0x11, 0x1C, 0x09, 0x3C, 0x29, 0x31, 0x2D, 0x13, 0x21, 0x30, 0x35, 0x1B, 0x00, 0x1D, 0x03, 0x28, 0x0C, 0x15, 0x24, 0x0A, 0x01, 0x14, 0x2A, 0x0B, 
            0x3B, 0x1C, 0x0F, 0x28, 0x0B, 0x25, 0x3E, 0x39, 0x2E, 0x33, 0x1E, 0x38, 0x08, 0x2B, 0x1A, 0x21, 0x2D, 0x23, 0x24, 0x27, 0x3F, 0x15, 0x2F, 0x1D, 0x06, 0x3D, 0x1F, 0x3C, 0x22, 0x00, 0x09, 0x18, 0x0D, 0x0A, 0x11, 0x0C, 0x20, 0x0E, 0x37, 0x14, 0x32, 0x3A, 0x16, 0x12, 0x30, 0x07, 0x29, 0x01, 0x31, 0x04, 0x2A, 0x2C, 0x26, 0x10, 0x02, 0x17, 0x05, 0x13, 0x35, 0x36, 0x1B, 0x34, 0x03, 0x19, 
            
            0x35, 0x00, 0x3E, 0x1C, 0x1A, 0x3C, 0x22, 0x07, 0x17, 0x0B, 0x04, 0x05, 0x38, 0x28, 0x2C, 0x1E, 0x3B, 0x0E, 0x01, 0x34, 0x3F, 0x03, 0x1B, 0x3D, 0x1D, 0x23, 0x0A, 0x11, 0x02, 0x15, 0x06, 0x18, 0x27, 0x3A, 0x09, 0x25, 0x12, 0x30, 0x16, 0x19, 0x2B, 0x13, 0x1F, 0x20, 0x2A, 0x08, 0x39, 0x14, 0x2F, 0x2D, 0x32, 0x10, 0x0D, 0x36, 0x29, 0x33, 0x26, 0x31, 0x21, 0x37, 0x0C, 0x2E, 0x24, 0x0F, 
            0x3A, 0x2E, 0x2C, 0x04, 0x0F, 0x19, 0x01, 0x1F, 0x03, 0x34, 0x33, 0x35, 0x2A, 0x1C, 0x39, 0x1A, 0x0B, 0x0A, 0x05, 0x09, 0x16, 0x3F, 0x3B, 0x23, 0x17, 0x02, 0x30, 0x2B, 0x1E, 0x37, 0x38, 0x0E, 0x1D, 0x32, 0x2F, 0x22, 0x21, 0x26, 0x14, 0x0D, 0x13, 0x3C, 0x36, 0x18, 0x15, 0x25, 0x06, 0x28, 0x24, 0x3E, 0x08, 0x00, 0x3D, 0x12, 0x29, 0x27, 0x11, 0x07, 0x31, 0x1B, 0x0C, 0x10, 0x20, 0x2D, 
            0x1D, 0x3F, 0x2F, 0x21, 0x03, 0x1C, 0x0F, 0x17, 0x22, 0x26, 0x2C, 0x36, 0x18, 0x11, 0x07, 0x15, 0x25, 0x3C, 0x1A, 0x31, 0x19, 0x0D, 0x24, 0x27, 0x01, 0x37, 0x3A, 0x1E, 0x38, 0x3D, 0x33, 0x39, 0x12, 0x35, 0x06, 0x2A, 0x2D, 0x02, 0x10, 0x08, 0x3E, 0x32, 0x00, 0x13, 0x05, 0x1F, 0x0E, 0x23, 0x0B, 0x28, 0x34, 0x2E, 0x09, 0x1B, 0x04, 0x0A, 0x16, 0x30, 0x0C, 0x2B, 0x29, 0x20, 0x3B, 0x14, 
            0x37, 0x27, 0x01, 0x3B, 0x23, 0x25, 0x24, 0x1C, 0x17, 0x13, 0x02, 0x2F, 0x07, 0x2A, 0x15, 0x26, 0x19, 0x10, 0x33, 0x05, 0x12, 0x1A, 0x0C, 0x20, 0x32, 0x3F, 0x2E, 0x1F, 0x28, 0x31, 0x11, 0x03, 0x18, 0x30, 0x3A, 0x08, 0x1D, 0x09, 0x06, 0x3E, 0x0A, 0x14, 0x36, 0x3C, 0x35, 0x0F, 0x3D, 0x1B, 0x0B, 0x0D, 0x2D, 0x2C, 0x39, 0x34, 0x04, 0x0E, 0x1E, 0x16, 0x29, 0x22, 0x21, 0x00, 0x38, 0x2B, 
            0x09, 0x12, 0x0B, 0x02, 0x28, 0x23, 0x39, 0x34, 0x07, 0x2B, 0x04, 0x13, 0x1E, 0x21, 0x29, 0x22, 0x37, 0x31, 0x11, 0x38, 0x06, 0x10, 0x0A, 0x08, 0x0D, 0x01, 0x1A, 0x3E, 0x20, 0x0F, 0x16, 0x03, 0x30, 0x26, 0x24, 0x32, 0x05, 0x3C, 0x2C, 0x25, 0x19, 0x1B, 0x1C, 0x3B, 0x3F, 0x33, 0x15, 0x2A, 0x0C, 0x3D, 0x0E, 0x18, 0x17, 0x27, 0x36, 0x2D, 0x2F, 0x3A, 0x2E, 0x1D, 0x00, 0x35, 0x1F, 0x14, 
            0x05, 0x29, 0x04, 0x0E, 0x16, 0x1B, 0x30, 0x3D, 0x12, 0x33, 0x2D, 0x2A, 0x21, 0x38, 0x19, 0x31, 0x1C, 0x2C, 0x37, 0x22, 0x34, 0x3C, 0x28, 0x10, 0x1D, 0x06, 0x2F, 0x26, 0x11, 0x08, 0x3A, 0x36, 0x25, 0x23, 0x0C, 0x3E, 0x15, 0x20, 0x32, 0x2E, 0x18, 0x02, 0x3F, 0x17, 0x00, 0x14, 0x1E, 0x3B, 0x09, 0x0B, 0x39, 0x0A, 0x24, 0x0F, 0x1A, 0x13, 0x1F, 0x01, 0x03, 0x35, 0x27, 0x07, 0x2B, 0x0D, 
            0x39, 0x2E, 0x3A, 0x14, 0x31, 0x32, 0x28, 0x15, 0x0B, 0x0E, 0x27, 0x02, 0x08, 0x3B, 0x26, 0x21, 0x25, 0x0A, 0x1C, 0x16, 0x2D, 0x1B, 0x3F, 0x11, 0x1A, 0x1D, 0x38, 0x34, 0x13, 0x09, 0x22, 0x35, 0x17, 0x04, 0x06, 0x00, 0x37, 0x2C, 0x29, 0x30, 0x1E, 0x05, 0x0D, 0x01, 0x2B, 0x03, 0x3D, 0x18, 0x20, 0x19, 0x0F, 0x2F, 0x3E, 0x2A, 0x33, 0x10, 0x23, 0x07, 0x3C, 0x1F, 0x36, 0x24, 0x12, 0x0C, 
            0x33, 0x1F, 0x1A, 0x06, 0x32, 0x2D, 0x13, 0x3C, 0x15, 0x27, 0x05, 0x0A, 0x21, 0x3D, 0x0C, 0x38, 0x12, 0x0D, 0x28, 0x31, 0x1D, 0x19, 0x04, 0x2A, 0x24, 0x2C, 0x3A, 0x25, 0x20, 0x10, 0x34, 0x26, 0x2E, 0x16, 0x0E, 0x3E, 0x00, 0x0B, 0x1B, 0x14, 0x22, 0x30, 0x1E, 0x09, 0x03, 0x18, 0x36, 0x2B, 0x02, 0x17, 0x11, 0x35, 0x23, 0x01, 0x3F, 0x29, 0x3B, 0x0F, 0x37, 0x2F, 0x1C, 0x07, 0x39, 0x08, 
		    
		
		    // Shuffle	Rows 145-160			
            0x1A, 0x11, 0x21, 0x02, 0x23, 0x0F, 0x20, 0x08, 0x2E, 0x0C, 0x3C, 0x12, 0x17, 0x31, 0x01, 0x39, 0x3E, 0x14, 0x28, 0x37, 0x00, 0x24, 0x1D, 0x32, 0x19, 0x15, 0x3D, 0x0E, 0x25, 0x2F, 0x3A, 0x0D, 0x2B, 0x27, 0x10, 0x03, 0x09, 0x3F, 0x38, 0x0A, 0x33, 0x2A, 0x2C, 0x16, 0x36, 0x07, 0x26, 0x1E, 0x13, 0x30, 0x18, 0x3B, 0x1C, 0x35, 0x04, 0x34, 0x1F, 0x0B, 0x29, 0x2D, 0x05, 0x06, 0x22, 0x1B, 
            0x1B, 0x2D, 0x01, 0x12, 0x37, 0x2F, 0x23, 0x03, 0x04, 0x1D, 0x21, 0x32, 0x0C, 0x0F, 0x2A, 0x2C, 0x0D, 0x26, 0x31, 0x2E, 0x14, 0x3D, 0x16, 0x15, 0x24, 0x0A, 0x00, 0x0B, 0x3B, 0x1C, 0x13, 0x1F, 0x19, 0x30, 0x3A, 0x02, 0x27, 0x1A, 0x35, 0x18, 0x10, 0x20, 0x28, 0x33, 0x3E, 0x17, 0x22, 0x38, 0x25, 0x2B, 0x1E, 0x39, 0x29, 0x34, 0x0E, 0x05, 0x36, 0x08, 0x3F, 0x09, 0x07, 0x3C, 0x11, 0x06, 
            0x20, 0x36, 0x09, 0x03, 0x15, 0x33, 0x3F, 0x2C, 0x25, 0x22, 0x24, 0x2E, 0x21, 0x1C, 0x0C, 0x16, 0x05, 0x3B, 0x12, 0x37, 0x1D, 0x3E, 0x1A, 0x0E, 0x00, 0x19, 0x1E, 0x32, 0x07, 0x06, 0x3C, 0x27, 0x2B, 0x2D, 0x31, 0x3A, 0x35, 0x17, 0x14, 0x30, 0x28, 0x11, 0x10, 0x29, 0x34, 0x0B, 0x1F, 0x26, 0x08, 0x39, 0x23, 0x2F, 0x04, 0x0A, 0x2A, 0x18, 0x01, 0x02, 0x13, 0x1B, 0x0D, 0x0F, 0x38, 0x3D, 
            0x1F, 0x25, 0x29, 0x0E, 0x3D, 0x15, 0x26, 0x22, 0x05, 0x08, 0x28, 0x3A, 0x07, 0x31, 0x02, 0x36, 0x0F, 0x24, 0x27, 0x00, 0x21, 0x3F, 0x32, 0x2A, 0x0C, 0x2B, 0x10, 0x17, 0x16, 0x12, 0x04, 0x19, 0x01, 0x0B, 0x06, 0x1E, 0x3B, 0x1B, 0x20, 0x2E, 0x1C, 0x2D, 0x18, 0x3E, 0x35, 0x1A, 0x3C, 0x09, 0x38, 0x39, 0x0D, 0x30, 0x2C, 0x11, 0x0A, 0x37, 0x23, 0x33, 0x1D, 0x2F, 0x34, 0x14, 0x03, 0x13, 
            0x2B, 0x26, 0x3D, 0x1E, 0x0D, 0x15, 0x29, 0x0E, 0x05, 0x09, 0x06, 0x3A, 0x03, 0x31, 0x0A, 0x16, 0x08, 0x25, 0x01, 0x11, 0x07, 0x36, 0x39, 0x38, 0x10, 0x37, 0x04, 0x32, 0x3B, 0x0B, 0x00, 0x22, 0x23, 0x34, 0x19, 0x2E, 0x2A, 0x30, 0x2C, 0x0F, 0x21, 0x18, 0x3E, 0x3F, 0x24, 0x12, 0x13, 0x20, 0x0C, 0x1B, 0x1D, 0x17, 0x02, 0x3C, 0x28, 0x33, 0x2F, 0x1A, 0x1F, 0x1C, 0x35, 0x27, 0x14, 0x2D, 
            0x2B, 0x3A, 0x13, 0x12, 0x32, 0x0A, 0x0C, 0x1E, 0x23, 0x0B, 0x0F, 0x18, 0x09, 0x01, 0x3D, 0x08, 0x28, 0x15, 0x00, 0x10, 0x2C, 0x21, 0x30, 0x24, 0x2F, 0x37, 0x20, 0x36, 0x34, 0x2D, 0x3F, 0x31, 0x38, 0x3B, 0x07, 0x33, 0x39, 0x03, 0x25, 0x35, 0x16, 0x2A, 0x1B, 0x05, 0x3C, 0x04, 0x11, 0x0D, 0x1F, 0x0E, 0x26, 0x29, 0x22, 0x19, 0x27, 0x1D, 0x14, 0x2E, 0x06, 0x1C, 0x02, 0x1A, 0x3E, 0x17, 
            0x30, 0x07, 0x19, 0x3F, 0x39, 0x20, 0x21, 0x2C, 0x24, 0x15, 0x34, 0x10, 0x0B, 0x3A, 0x2F, 0x25, 0x0F, 0x12, 0x0A, 0x26, 0x3E, 0x04, 0x02, 0x0E, 0x31, 0x05, 0x2E, 0x38, 0x29, 0x35, 0x2D, 0x3D, 0x3B, 0x03, 0x00, 0x28, 0x11, 0x09, 0x16, 0x2B, 0x1E, 0x0C, 0x17, 0x14, 0x23, 0x1A, 0x1C, 0x06, 0x13, 0x3C, 0x0D, 0x32, 0x01, 0x1F, 0x33, 0x1D, 0x18, 0x08, 0x1B, 0x2A, 0x37, 0x36, 0x22, 0x27, 
            0x27, 0x3B, 0x13, 0x05, 0x39, 0x11, 0x0F, 0x10, 0x0A, 0x2A, 0x28, 0x21, 0x2C, 0x2E, 0x03, 0x0E, 0x2F, 0x18, 0x1D, 0x2B, 0x1A, 0x06, 0x00, 0x14, 0x32, 0x3E, 0x38, 0x1F, 0x12, 0x04, 0x37, 0x0C, 0x36, 0x3A, 0x1C, 0x15, 0x0B, 0x07, 0x30, 0x25, 0x20, 0x16, 0x09, 0x2D, 0x0D, 0x24, 0x3D, 0x01, 0x23, 0x1B, 0x35, 0x31, 0x26, 0x22, 0x19, 0x1E, 0x02, 0x17, 0x33, 0x3F, 0x29, 0x08, 0x3C, 0x34, 
            
            0x3E, 0x30, 0x2C, 0x19, 0x25, 0x0E, 0x2D, 0x2B, 0x00, 0x1A, 0x39, 0x02, 0x03, 0x15, 0x1D, 0x37, 0x35, 0x18, 0x0F, 0x21, 0x26, 0x34, 0x3F, 0x28, 0x11, 0x24, 0x36, 0x22, 0x01, 0x10, 0x31, 0x16, 0x38, 0x2A, 0x0A, 0x32, 0x3A, 0x13, 0x04, 0x3D, 0x08, 0x23, 0x3B, 0x07, 0x29, 0x0B, 0x3C, 0x17, 0x2E, 0x09, 0x1E, 0x1B, 0x05, 0x1F, 0x12, 0x27, 0x2F, 0x0C, 0x33, 0x0D, 0x1C, 0x20, 0x06, 0x14, 
            0x01, 0x27, 0x05, 0x06, 0x19, 0x03, 0x00, 0x30, 0x26, 0x18, 0x3E, 0x1D, 0x21, 0x04, 0x14, 0x1A, 0x07, 0x17, 0x0B, 0x34, 0x2D, 0x28, 0x3F, 0x25, 0x02, 0x36, 0x20, 0x3C, 0x0A, 0x39, 0x2E, 0x32, 0x22, 0x2A, 0x11, 0x23, 0x3D, 0x3B, 0x16, 0x2B, 0x0D, 0x1C, 0x3A, 0x37, 0x31, 0x1F, 0x12, 0x35, 0x0C, 0x29, 0x33, 0x38, 0x1B, 0x15, 0x09, 0x24, 0x10, 0x0F, 0x2F, 0x08, 0x2C, 0x0E, 0x13, 0x1E, 
            0x3E, 0x12, 0x0C, 0x05, 0x32, 0x07, 0x2C, 0x26, 0x3C, 0x39, 0x00, 0x1A, 0x37, 0x27, 0x16, 0x04, 0x21, 0x2A, 0x1E, 0x3A, 0x17, 0x10, 0x11, 0x13, 0x06, 0x31, 0x1B, 0x2B, 0x35, 0x28, 0x1C, 0x23, 0x14, 0x09, 0x01, 0x3F, 0x19, 0x22, 0x25, 0x24, 0x29, 0x1F, 0x2E, 0x0E, 0x2F, 0x18, 0x20, 0x08, 0x0B, 0x34, 0x02, 0x1D, 0x2D, 0x15, 0x0A, 0x3D, 0x38, 0x0F, 0x36, 0x3B, 0x03, 0x0D, 0x33, 0x30, 
            0x17, 0x29, 0x10, 0x25, 0x1E, 0x2E, 0x38, 0x1C, 0x36, 0x39, 0x3E, 0x0D, 0x37, 0x3B, 0x33, 0x0A, 0x1D, 0x13, 0x14, 0x20, 0x04, 0x22, 0x26, 0x07, 0x0E, 0x2D, 0x31, 0x1F, 0x27, 0x09, 0x2A, 0x34, 0x2C, 0x23, 0x05, 0x21, 0x1A, 0x0F, 0x3C, 0x28, 0x0C, 0x30, 0x15, 0x2B, 0x03, 0x12, 0x1B, 0x19, 0x35, 0x02, 0x3D, 0x00, 0x06, 0x18, 0x32, 0x0B, 0x3F, 0x3A, 0x08, 0x16, 0x24, 0x01, 0x11, 0x2F, 
            0x17, 0x0E, 0x1B, 0x19, 0x20, 0x2C, 0x09, 0x08, 0x2B, 0x16, 0x24, 0x05, 0x27, 0x1D, 0x35, 0x36, 0x03, 0x25, 0x3F, 0x0A, 0x3C, 0x12, 0x2E, 0x29, 0x07, 0x37, 0x00, 0x11, 0x2D, 0x28, 0x30, 0x0B, 0x10, 0x02, 0x21, 0x15, 0x13, 0x3E, 0x31, 0x1E, 0x26, 0x1C, 0x0C, 0x33, 0x18, 0x0D, 0x22, 0x39, 0x3A, 0x01, 0x3D, 0x3B, 0x2F, 0x34, 0x1A, 0x04, 0x32, 0x23, 0x1F, 0x2A, 0x06, 0x14, 0x0F, 0x38, 
            0x37, 0x16, 0x15, 0x0F, 0x0E, 0x30, 0x1A, 0x2F, 0x2D, 0x02, 0x3B, 0x27, 0x3A, 0x31, 0x08, 0x01, 0x11, 0x1C, 0x34, 0x33, 0x38, 0x3F, 0x12, 0x0B, 0x2E, 0x20, 0x24, 0x1F, 0x07, 0x00, 0x3D, 0x0A, 0x1D, 0x19, 0x0D, 0x39, 0x28, 0x36, 0x29, 0x2A, 0x22, 0x06, 0x23, 0x2C, 0x2B, 0x14, 0x3E, 0x26, 0x3C, 0x35, 0x04, 0x10, 0x25, 0x32, 0x1B, 0x18, 0x09, 0x05, 0x13, 0x1E, 0x21, 0x17, 0x03, 0x0C, 
            0x04, 0x06, 0x1A, 0x29, 0x0E, 0x01, 0x3A, 0x18, 0x2E, 0x1B, 0x3F, 0x02, 0x23, 0x3D, 0x0A, 0x07, 0x2B, 0x2D, 0x00, 0x21, 0x34, 0x3C, 0x39, 0x37, 0x11, 0x14, 0x38, 0x24, 0x1D, 0x16, 0x13, 0x36, 0x26, 0x28, 0x2F, 0x17, 0x12, 0x31, 0x35, 0x1E, 0x30, 0x27, 0x3B, 0x03, 0x1C, 0x09, 0x33, 0x0B, 0x25, 0x19, 0x20, 0x2A, 0x2C, 0x3E, 0x0D, 0x22, 0x05, 0x15, 0x0C, 0x1F, 0x10, 0x08, 0x0F, 0x32, 
            0x2E, 0x0F, 0x3D, 0x3F, 0x29, 0x24, 0x36, 0x2A, 0x13, 0x1B, 0x17, 0x1D, 0x3C, 0x20, 0x37, 0x01, 0x0D, 0x0B, 0x23, 0x2F, 0x33, 0x04, 0x0C, 0x34, 0x21, 0x1E, 0x22, 0x10, 0x18, 0x0A, 0x16, 0x15, 0x07, 0x1C, 0x26, 0x32, 0x39, 0x30, 0x12, 0x3E, 0x3B, 0x06, 0x2C, 0x02, 0x11, 0x25, 0x3A, 0x03, 0x1A, 0x0E, 0x35, 0x2B, 0x19, 0x31, 0x05, 0x08, 0x09, 0x00, 0x1F, 0x27, 0x28, 0x2D, 0x14, 0x38, 
		    
		
		    // Shuffle	Rows 161-176			
		    0x27, 0x2A, 0x26, 0x19, 0x24, 0x28, 0x3F, 0x13, 0x1E, 0x05, 0x2D, 0x0E, 0x38, 0x09, 0x3A, 0x20, 0x37, 0x08, 0x10, 0x16, 0x21, 0x03, 0x1C, 0x3E, 0x17, 0x33, 0x3D, 0x32, 0x04, 0x0D, 0x0C, 0x06, 0x3C, 0x0A, 0x2C, 0x1F, 0x2E, 0x34, 0x14, 0x02, 0x39, 0x30, 0x29, 0x1B, 0x25, 0x00, 0x2B, 0x0B, 0x36, 0x01, 0x3B, 0x12, 0x2F, 0x23, 0x31, 0x15, 0x18, 0x0F, 0x1A, 0x11, 0x35, 0x22, 0x07, 0x1D, 
            0x0A, 0x25, 0x21, 0x23, 0x2D, 0x22, 0x2B, 0x2C, 0x15, 0x11, 0x28, 0x0B, 0x29, 0x27, 0x04, 0x06, 0x17, 0x24, 0x31, 0x2A, 0x02, 0x2E, 0x08, 0x01, 0x0F, 0x1D, 0x26, 0x1E, 0x3F, 0x16, 0x20, 0x3B, 0x3D, 0x13, 0x3E, 0x37, 0x0E, 0x3A, 0x03, 0x1F, 0x10, 0x18, 0x05, 0x1C, 0x39, 0x32, 0x34, 0x09, 0x19, 0x07, 0x0C, 0x30, 0x38, 0x14, 0x1B, 0x12, 0x3C, 0x0D, 0x1A, 0x36, 0x35, 0x00, 0x33, 0x2F, 
            0x08, 0x34, 0x35, 0x22, 0x13, 0x00, 0x2E, 0x0D, 0x0A, 0x2A, 0x11, 0x0F, 0x24, 0x2B, 0x3E, 0x04, 0x0C, 0x09, 0x39, 0x36, 0x1E, 0x37, 0x05, 0x1A, 0x06, 0x33, 0x28, 0x0E, 0x01, 0x16, 0x20, 0x29, 0x03, 0x02, 0x15, 0x23, 0x1F, 0x3C, 0x19, 0x1B, 0x17, 0x25, 0x2D, 0x18, 0x10, 0x26, 0x2C, 0x1C, 0x2F, 0x31, 0x38, 0x14, 0x12, 0x1D, 0x3B, 0x21, 0x3D, 0x30, 0x0B, 0x27, 0x32, 0x07, 0x3F, 0x3A, 
            0x2D, 0x1A, 0x10, 0x1D, 0x37, 0x39, 0x34, 0x16, 0x29, 0x0C, 0x07, 0x19, 0x1C, 0x01, 0x12, 0x3F, 0x3B, 0x15, 0x08, 0x2E, 0x25, 0x04, 0x0E, 0x30, 0x26, 0x11, 0x3A, 0x38, 0x05, 0x36, 0x28, 0x3D, 0x0D, 0x02, 0x32, 0x2B, 0x22, 0x0A, 0x2A, 0x21, 0x2F, 0x2C, 0x14, 0x33, 0x1B, 0x27, 0x00, 0x3C, 0x18, 0x0F, 0x0B, 0x03, 0x1F, 0x20, 0x23, 0x24, 0x3E, 0x06, 0x09, 0x35, 0x17, 0x31, 0x1E, 0x13, 
            0x1C, 0x15, 0x00, 0x0E, 0x28, 0x1A, 0x25, 0x06, 0x2C, 0x0B, 0x24, 0x2E, 0x35, 0x31, 0x3B, 0x07, 0x0A, 0x3D, 0x2A, 0x1B, 0x0F, 0x22, 0x30, 0x23, 0x2B, 0x12, 0x0C, 0x14, 0x17, 0x01, 0x33, 0x21, 0x39, 0x37, 0x05, 0x3F, 0x3A, 0x10, 0x1D, 0x36, 0x03, 0x11, 0x27, 0x2F, 0x29, 0x1F, 0x26, 0x02, 0x32, 0x3C, 0x09, 0x38, 0x0D, 0x13, 0x2D, 0x20, 0x08, 0x1E, 0x19, 0x16, 0x18, 0x04, 0x34, 0x3E, 
            0x30, 0x3A, 0x38, 0x20, 0x09, 0x2A, 0x08, 0x28, 0x24, 0x0B, 0x0F, 0x34, 0x31, 0x00, 0x18, 0x1C, 0x26, 0x35, 0x03, 0x19, 0x1F, 0x02, 0x0D, 0x3E, 0x1B, 0x16, 0x17, 0x37, 0x1E, 0x2F, 0x2E, 0x11, 0x3F, 0x23, 0x15, 0x04, 0x2D, 0x36, 0x13, 0x14, 0x27, 0x0A, 0x29, 0x01, 0x0C, 0x21, 0x2C, 0x1A, 0x3B, 0x32, 0x33, 0x07, 0x0E, 0x1D, 0x25, 0x3C, 0x12, 0x05, 0x06, 0x22, 0x3D, 0x2B, 0x39, 0x10, 
            0x2A, 0x1B, 0x06, 0x02, 0x20, 0x27, 0x08, 0x03, 0x17, 0x35, 0x0F, 0x15, 0x32, 0x18, 0x2C, 0x01, 0x16, 0x2B, 0x2E, 0x0C, 0x23, 0x07, 0x1D, 0x0B, 0x29, 0x37, 0x25, 0x0E, 0x1F, 0x14, 0x38, 0x09, 0x04, 0x00, 0x0A, 0x1E, 0x13, 0x3B, 0x39, 0x3A, 0x3E, 0x3D, 0x33, 0x28, 0x10, 0x3C, 0x2D, 0x36, 0x2F, 0x3F, 0x1A, 0x21, 0x30, 0x19, 0x12, 0x22, 0x05, 0x26, 0x34, 0x24, 0x0D, 0x1C, 0x11, 0x31, 
            0x03, 0x3A, 0x2F, 0x20, 0x00, 0x10, 0x1E, 0x13, 0x1A, 0x24, 0x18, 0x1B, 0x23, 0x2B, 0x30, 0x33, 0x34, 0x27, 0x1F, 0x26, 0x3D, 0x01, 0x3C, 0x16, 0x37, 0x2E, 0x3E, 0x1D, 0x08, 0x02, 0x05, 0x19, 0x09, 0x0D, 0x0B, 0x3F, 0x15, 0x1C, 0x35, 0x28, 0x3B, 0x04, 0x31, 0x29, 0x38, 0x11, 0x2A, 0x0A, 0x36, 0x21, 0x14, 0x0E, 0x2D, 0x2C, 0x06, 0x07, 0x12, 0x17, 0x0C, 0x22, 0x25, 0x39, 0x0F, 0x32, 
            
            0x1E, 0x05, 0x34, 0x21, 0x33, 0x15, 0x16, 0x2E, 0x26, 0x29, 0x23, 0x12, 0x02, 0x0B, 0x20, 0x04, 0x11, 0x1C, 0x2F, 0x1D, 0x36, 0x06, 0x35, 0x22, 0x14, 0x24, 0x28, 0x0F, 0x39, 0x38, 0x0A, 0x0D, 0x32, 0x27, 0x00, 0x37, 0x30, 0x08, 0x2A, 0x17, 0x07, 0x3A, 0x18, 0x25, 0x0E, 0x31, 0x1A, 0x19, 0x0C, 0x3F, 0x09, 0x1B, 0x13, 0x03, 0x2D, 0x10, 0x3D, 0x1F, 0x3E, 0x2B, 0x3C, 0x3B, 0x01, 0x2C, 
            0x31, 0x05, 0x2C, 0x17, 0x07, 0x30, 0x11, 0x09, 0x10, 0x0A, 0x0B, 0x3E, 0x2E, 0x33, 0x27, 0x3D, 0x12, 0x37, 0x25, 0x3C, 0x3A, 0x29, 0x01, 0x2B, 0x2D, 0x23, 0x21, 0x36, 0x26, 0x20, 0x1F, 0x1C, 0x0D, 0x39, 0x3F, 0x16, 0x18, 0x24, 0x32, 0x3B, 0x08, 0x1B, 0x2F, 0x14, 0x0C, 0x1E, 0x28, 0x03, 0x0E, 0x04, 0x1A, 0x35, 0x1D, 0x0F, 0x38, 0x06, 0x2A, 0x19, 0x22, 0x02, 0x00, 0x15, 0x34, 0x13, 
            0x2E, 0x2B, 0x22, 0x3E, 0x1A, 0x3F, 0x3C, 0x32, 0x3A, 0x03, 0x01, 0x30, 0x21, 0x0D, 0x23, 0x25, 0x00, 0x18, 0x04, 0x26, 0x19, 0x2F, 0x0B, 0x2D, 0x2C, 0x07, 0x17, 0x34, 0x0E, 0x33, 0x05, 0x39, 0x10, 0x20, 0x36, 0x09, 0x38, 0x31, 0x13, 0x11, 0x29, 0x0C, 0x24, 0x02, 0x1C, 0x16, 0x1F, 0x2A, 0x37, 0x0F, 0x3D, 0x0A, 0x06, 0x08, 0x27, 0x28, 0x1B, 0x1E, 0x14, 0x12, 0x35, 0x1D, 0x15, 0x3B, 
            0x1A, 0x19, 0x2A, 0x3D, 0x3B, 0x2E, 0x04, 0x32, 0x2C, 0x22, 0x01, 0x39, 0x3F, 0x2D, 0x28, 0x10, 0x13, 0x24, 0x0B, 0x23, 0x31, 0x20, 0x30, 0x1D, 0x17, 0x0D, 0x36, 0x00, 0x3E, 0x2B, 0x1E, 0x03, 0x0C, 0x37, 0x06, 0x0A, 0x33, 0x12, 0x3A, 0x25, 0x1B, 0x0F, 0x1F, 0x38, 0x26, 0x05, 0x29, 0x0E, 0x21, 0x11, 0x08, 0x34, 0x02, 0x15, 0x16, 0x1C, 0x2F, 0x3C, 0x07, 0x27, 0x09, 0x14, 0x35, 0x18, 
            0x1D, 0x0B, 0x0D, 0x33, 0x20, 0x12, 0x2F, 0x32, 0x1A, 0x3D, 0x0A, 0x28, 0x21, 0x30, 0x08, 0x10, 0x31, 0x0F, 0x11, 0x35, 0x13, 0x23, 0x38, 0x34, 0x22, 0x2E, 0x26, 0x15, 0x04, 0x25, 0x02, 0x3B, 0x24, 0x0E, 0x1E, 0x3C, 0x0C, 0x39, 0x3A, 0x2D, 0x1F, 0x01, 0x17, 0x2A, 0x00, 0x3F, 0x2B, 0x16, 0x05, 0x03, 0x36, 0x1C, 0x09, 0x19, 0x2C, 0x3E, 0x06, 0x29, 0x14, 0x37, 0x07, 0x27, 0x1B, 0x18, 
            0x22, 0x05, 0x1E, 0x0F, 0x28, 0x00, 0x0A, 0x1C, 0x1A, 0x2B, 0x23, 0x2D, 0x04, 0x32, 0x06, 0x36, 0x24, 0x29, 0x10, 0x21, 0x18, 0x38, 0x0C, 0x08, 0x16, 0x3E, 0x17, 0x19, 0x07, 0x33, 0x26, 0x2C, 0x25, 0x13, 0x1F, 0x15, 0x11, 0x03, 0x35, 0x1B, 0x3D, 0x20, 0x31, 0x0B, 0x01, 0x0D, 0x02, 0x09, 0x34, 0x1D, 0x3F, 0x2F, 0x3C, 0x3A, 0x0E, 0x27, 0x14, 0x3B, 0x30, 0x2A, 0x39, 0x2E, 0x37, 0x12, 
            0x27, 0x13, 0x20, 0x24, 0x06, 0x36, 0x2E, 0x37, 0x3F, 0x1C, 0x21, 0x28, 0x1F, 0x09, 0x2F, 0x1A, 0x15, 0x17, 0x16, 0x18, 0x23, 0x12, 0x32, 0x10, 0x19, 0x26, 0x03, 0x31, 0x2D, 0x2B, 0x0D, 0x11, 0x0A, 0x38, 0x02, 0x1D, 0x3B, 0x30, 0x07, 0x2C, 0x14, 0x3A, 0x33, 0x01, 0x0E, 0x3E, 0x2A, 0x1E, 0x29, 0x00, 0x1B, 0x3C, 0x22, 0x25, 0x35, 0x34, 0x3D, 0x04, 0x0C, 0x0B, 0x08, 0x39, 0x0F, 0x05, 
            0x0E, 0x17, 0x27, 0x30, 0x10, 0x06, 0x03, 0x0A, 0x39, 0x22, 0x05, 0x23, 0x3E, 0x31, 0x33, 0x16, 0x2D, 0x2E, 0x00, 0x3F, 0x32, 0x1C, 0x14, 0x3C, 0x0D, 0x3D, 0x2C, 0x26, 0x09, 0x29, 0x25, 0x0F, 0x3A, 0x04, 0x1A, 0x1F, 0x02, 0x1E, 0x13, 0x18, 0x1B, 0x11, 0x12, 0x28, 0x21, 0x3B, 0x36, 0x20, 0x34, 0x15, 0x07, 0x24, 0x35, 0x37, 0x38, 0x08, 0x19, 0x1D, 0x2F, 0x0C, 0x2A, 0x01, 0x0B, 0x2B, 
		    
		
		    // Shuffle	Rows 177-192			
            0x3C, 0x21, 0x15, 0x01, 0x04, 0x3D, 0x37, 0x08, 0x1D, 0x24, 0x33, 0x17, 0x30, 0x16, 0x2B, 0x14, 0x13, 0x0B, 0x1C, 0x1F, 0x3A, 0x18, 0x25, 0x39, 0x28, 0x3F, 0x27, 0x31, 0x3B, 0x26, 0x06, 0x2D, 0x34, 0x11, 0x2E, 0x2C, 0x32, 0x09, 0x0C, 0x12, 0x10, 0x0A, 0x23, 0x19, 0x29, 0x2F, 0x07, 0x1A, 0x03, 0x0E, 0x22, 0x0F, 0x1E, 0x36, 0x0D, 0x1B, 0x3E, 0x20, 0x02, 0x00, 0x05, 0x35, 0x2A, 0x38, 
            0x29, 0x3D, 0x1A, 0x0C, 0x14, 0x0D, 0x3A, 0x3E, 0x26, 0x05, 0x12, 0x09, 0x1F, 0x30, 0x38, 0x17, 0x2E, 0x07, 0x2C, 0x1C, 0x27, 0x32, 0x2A, 0x21, 0x33, 0x0E, 0x00, 0x19, 0x22, 0x11, 0x18, 0x2D, 0x25, 0x04, 0x02, 0x31, 0x39, 0x20, 0x24, 0x36, 0x03, 0x06, 0x1B, 0x28, 0x0F, 0x3F, 0x15, 0x0A, 0x35, 0x3C, 0x37, 0x1E, 0x0B, 0x2F, 0x34, 0x23, 0x16, 0x1D, 0x3B, 0x13, 0x01, 0x2B, 0x08, 0x10, 
            0x2F, 0x2A, 0x2D, 0x21, 0x22, 0x07, 0x25, 0x24, 0x14, 0x29, 0x17, 0x09, 0x3E, 0x01, 0x0E, 0x27, 0x1C, 0x0F, 0x1D, 0x33, 0x3D, 0x02, 0x1E, 0x30, 0x1F, 0x06, 0x18, 0x0D, 0x20, 0x1A, 0x11, 0x15, 0x04, 0x2B, 0x0A, 0x23, 0x38, 0x16, 0x3B, 0x19, 0x13, 0x37, 0x05, 0x31, 0x32, 0x08, 0x3C, 0x10, 0x2C, 0x26, 0x36, 0x0C, 0x3A, 0x35, 0x0B, 0x34, 0x1B, 0x03, 0x39, 0x3F, 0x00, 0x28, 0x12, 0x2E, 
            0x07, 0x3A, 0x0F, 0x3E, 0x0C, 0x36, 0x1E, 0x2C, 0x15, 0x33, 0x0E, 0x37, 0x27, 0x04, 0x18, 0x06, 0x24, 0x34, 0x1D, 0x0A, 0x10, 0x08, 0x2E, 0x25, 0x11, 0x21, 0x17, 0x23, 0x09, 0x0B, 0x2D, 0x12, 0x05, 0x38, 0x1B, 0x22, 0x02, 0x16, 0x14, 0x1F, 0x1C, 0x2A, 0x2F, 0x31, 0x29, 0x20, 0x3C, 0x0D, 0x19, 0x2B, 0x3B, 0x03, 0x35, 0x26, 0x28, 0x3D, 0x1A, 0x13, 0x39, 0x30, 0x3F, 0x32, 0x00, 0x01, 
            0x2C, 0x19, 0x2E, 0x16, 0x32, 0x2A, 0x1F, 0x26, 0x37, 0x05, 0x0D, 0x20, 0x18, 0x36, 0x31, 0x0A, 0x0C, 0x3C, 0x3B, 0x08, 0x04, 0x21, 0x0E, 0x15, 0x02, 0x29, 0x1C, 0x2B, 0x10, 0x35, 0x0B, 0x14, 0x3F, 0x2D, 0x38, 0x1D, 0x39, 0x07, 0x34, 0x2F, 0x1A, 0x1E, 0x06, 0x1B, 0x12, 0x03, 0x27, 0x01, 0x3D, 0x22, 0x13, 0x24, 0x25, 0x28, 0x3E, 0x30, 0x0F, 0x3A, 0x09, 0x23, 0x17, 0x11, 0x00, 0x33, 
            0x26, 0x30, 0x22, 0x3C, 0x02, 0x2C, 0x3A, 0x07, 0x33, 0x08, 0x3B, 0x0B, 0x03, 0x2D, 0x01, 0x09, 0x2F, 0x15, 0x24, 0x10, 0x12, 0x21, 0x31, 0x06, 0x0F, 0x36, 0x2E, 0x34, 0x17, 0x2A, 0x04, 0x1C, 0x0E, 0x27, 0x37, 0x00, 0x1F, 0x3F, 0x2B, 0x3E, 0x39, 0x1A, 0x32, 0x16, 0x1E, 0x38, 0x0A, 0x18, 0x19, 0x1B, 0x23, 0x11, 0x35, 0x3D, 0x25, 0x1D, 0x0D, 0x14, 0x0C, 0x29, 0x13, 0x28, 0x20, 0x05, 
            0x05, 0x3C, 0x08, 0x14, 0x29, 0x27, 0x30, 0x13, 0x37, 0x28, 0x01, 0x0D, 0x03, 0x07, 0x0A, 0x3A, 0x00, 0x2C, 0x1D, 0x2D, 0x10, 0x35, 0x12, 0x1B, 0x1A, 0x0B, 0x19, 0x32, 0x26, 0x0F, 0x25, 0x22, 0x39, 0x17, 0x23, 0x3F, 0x06, 0x1C, 0x38, 0x15, 0x31, 0x02, 0x0C, 0x2E, 0x34, 0x33, 0x3E, 0x36, 0x3B, 0x2A, 0x24, 0x1E, 0x3D, 0x18, 0x1F, 0x0E, 0x11, 0x09, 0x04, 0x21, 0x16, 0x2F, 0x2B, 0x20, 
            0x06, 0x37, 0x09, 0x14, 0x2C, 0x35, 0x0B, 0x24, 0x05, 0x29, 0x3C, 0x39, 0x18, 0x17, 0x1B, 0x28, 0x0A, 0x3B, 0x12, 0x16, 0x2E, 0x3A, 0x07, 0x27, 0x1F, 0x1C, 0x00, 0x31, 0x34, 0x11, 0x2A, 0x0D, 0x32, 0x3E, 0x10, 0x0F, 0x15, 0x22, 0x25, 0x13, 0x20, 0x23, 0x2D, 0x30, 0x0C, 0x04, 0x1D, 0x3D, 0x26, 0x03, 0x1A, 0x3F, 0x2F, 0x38, 0x36, 0x21, 0x2B, 0x08, 0x1E, 0x01, 0x33, 0x19, 0x0E, 0x02, 
            
            0x20, 0x3F, 0x19, 0x0C, 0x3B, 0x38, 0x2F, 0x0D, 0x32, 0x30, 0x31, 0x03, 0x36, 0x0E, 0x2E, 0x17, 0x2C, 0x21, 0x1C, 0x22, 0x06, 0x3A, 0x34, 0x35, 0x33, 0x3C, 0x1A, 0x29, 0x08, 0x1B, 0x2D, 0x01, 0x3E, 0x18, 0x04, 0x11, 0x25, 0x07, 0x10, 0x2B, 0x1D, 0x27, 0x00, 0x28, 0x1E, 0x2A, 0x0A, 0x1F, 0x0F, 0x13, 0x37, 0x3D, 0x02, 0x23, 0x16, 0x39, 0x14, 0x12, 0x09, 0x24, 0x05, 0x15, 0x0B, 0x26, 
            0x14, 0x16, 0x2B, 0x3A, 0x2C, 0x04, 0x18, 0x1A, 0x24, 0x31, 0x32, 0x2E, 0x3F, 0x1D, 0x19, 0x13, 0x3D, 0x37, 0x28, 0x0F, 0x01, 0x0D, 0x0B, 0x17, 0x3C, 0x30, 0x2A, 0x33, 0x03, 0x29, 0x38, 0x1F, 0x36, 0x25, 0x34, 0x1C, 0x05, 0x39, 0x3E, 0x0C, 0x22, 0x26, 0x0E, 0x27, 0x23, 0x12, 0x3B, 0x02, 0x00, 0x15, 0x07, 0x1E, 0x35, 0x0A, 0x1B, 0x2F, 0x09, 0x11, 0x08, 0x2D, 0x20, 0x21, 0x06, 0x10, 
            0x13, 0x23, 0x05, 0x07, 0x0B, 0x1C, 0x15, 0x10, 0x01, 0x3E, 0x06, 0x20, 0x19, 0x2E, 0x27, 0x31, 0x12, 0x1D, 0x37, 0x0E, 0x32, 0x2B, 0x38, 0x2C, 0x03, 0x14, 0x3F, 0x1E, 0x2D, 0x29, 0x2A, 0x24, 0x26, 0x2F, 0x08, 0x02, 0x0C, 0x35, 0x11, 0x18, 0x1F, 0x00, 0x0D, 0x30, 0x3B, 0x25, 0x3C, 0x0A, 0x33, 0x36, 0x09, 0x22, 0x21, 0x1A, 0x1B, 0x0F, 0x17, 0x04, 0x39, 0x3D, 0x3A, 0x16, 0x34, 0x28, 
            0x16, 0x23, 0x29, 0x2B, 0x1B, 0x2A, 0x1A, 0x05, 0x35, 0x18, 0x3E, 0x39, 0x15, 0x20, 0x31, 0x08, 0x38, 0x0D, 0x09, 0x36, 0x27, 0x0E, 0x25, 0x26, 0x0A, 0x32, 0x30, 0x0C, 0x02, 0x22, 0x1E, 0x1C, 0x21, 0x33, 0x13, 0x01, 0x3B, 0x28, 0x10, 0x3C, 0x2D, 0x12, 0x1F, 0x19, 0x24, 0x3A, 0x34, 0x37, 0x3F, 0x2E, 0x17, 0x3D, 0x06, 0x14, 0x07, 0x0B, 0x2C, 0x11, 0x0F, 0x1D, 0x03, 0x00, 0x04, 0x2F, 
            0x2C, 0x14, 0x34, 0x2F, 0x32, 0x33, 0x27, 0x15, 0x0F, 0x08, 0x0C, 0x19, 0x1B, 0x03, 0x0B, 0x09, 0x1A, 0x35, 0x2A, 0x1F, 0x36, 0x12, 0x22, 0x16, 0x1C, 0x3B, 0x3D, 0x18, 0x3E, 0x02, 0x00, 0x3F, 0x21, 0x10, 0x1D, 0x39, 0x17, 0x13, 0x0A, 0x2B, 0x37, 0x11, 0x1E, 0x29, 0x05, 0x06, 0x07, 0x2D, 0x2E, 0x0D, 0x20, 0x04, 0x24, 0x25, 0x3A, 0x38, 0x0E, 0x31, 0x23, 0x3C, 0x01, 0x30, 0x28, 0x26, 
            0x26, 0x31, 0x03, 0x37, 0x3D, 0x15, 0x0E, 0x1B, 0x36, 0x00, 0x04, 0x02, 0x3B, 0x1D, 0x06, 0x1E, 0x3A, 0x0F, 0x30, 0x3E, 0x22, 0x28, 0x13, 0x01, 0x0B, 0x32, 0x24, 0x2B, 0x0D, 0x34, 0x3C, 0x33, 0x27, 0x20, 0x35, 0x38, 0x25, 0x10, 0x09, 0x21, 0x2D, 0x1C, 0x16, 0x05, 0x19, 0x3F, 0x2C, 0x1A, 0x2A, 0x18, 0x1F, 0x08, 0x2F, 0x29, 0x23, 0x39, 0x12, 0x0C, 0x14, 0x11, 0x2E, 0x17, 0x07, 0x0A, 
            0x21, 0x06, 0x3F, 0x0F, 0x08, 0x18, 0x17, 0x07, 0x34, 0x04, 0x37, 0x2A, 0x0E, 0x2C, 0x23, 0x1B, 0x29, 0x28, 0x12, 0x15, 0x05, 0x2E, 0x3D, 0x30, 0x0D, 0x26, 0x0B, 0x35, 0x0C, 0x3B, 0x3C, 0x09, 0x13, 0x33, 0x02, 0x00, 0x1A, 0x3E, 0x20, 0x1E, 0x01, 0x1C, 0x2D, 0x3A, 0x19, 0x27, 0x11, 0x39, 0x16, 0x31, 0x24, 0x1D, 0x0A, 0x25, 0x32, 0x14, 0x10, 0x36, 0x03, 0x22, 0x2F, 0x2B, 0x1F, 0x38, 
            0x0F, 0x1D, 0x1E, 0x30, 0x27, 0x06, 0x13, 0x3F, 0x35, 0x2D, 0x12, 0x37, 0x0D, 0x1B, 0x18, 0x20, 0x1F, 0x3C, 0x04, 0x01, 0x0A, 0x08, 0x38, 0x05, 0x36, 0x32, 0x39, 0x23, 0x2F, 0x0E, 0x3D, 0x16, 0x34, 0x02, 0x28, 0x21, 0x03, 0x3B, 0x11, 0x26, 0x0C, 0x33, 0x0B, 0x00, 0x15, 0x25, 0x3A, 0x17, 0x3E, 0x29, 0x22, 0x19, 0x1A, 0x24, 0x2A, 0x2B, 0x14, 0x2E, 0x2C, 0x1C, 0x07, 0x31, 0x10, 0x09, 
		    		    
		
		    // Shuffle	Rows 193-208			
		    0x2C, 0x22, 0x06, 0x21, 0x1A, 0x36, 0x26, 0x32, 0x01, 0x3B, 0x3D, 0x1D, 0x31, 0x24, 0x08, 0x2B, 0x0C, 0x15, 0x1B, 0x3F, 0x33, 0x09, 0x37, 0x2E, 0x17, 0x12, 0x23, 0x16, 0x0B, 0x1E, 0x2F, 0x05, 0x25, 0x07, 0x27, 0x0E, 0x39, 0x2A, 0x0A, 0x3A, 0x19, 0x34, 0x2D, 0x03, 0x14, 0x3E, 0x10, 0x30, 0x13, 0x0D, 0x18, 0x0F, 0x29, 0x20, 0x04, 0x3C, 0x38, 0x1F, 0x11, 0x35, 0x28, 0x00, 0x02, 0x1C, 
            0x20, 0x13, 0x12, 0x35, 0x1B, 0x05, 0x11, 0x17, 0x16, 0x03, 0x0E, 0x2E, 0x2D, 0x0C, 0x24, 0x00, 0x39, 0x0B, 0x2A, 0x04, 0x28, 0x23, 0x2B, 0x0D, 0x1C, 0x19, 0x3E, 0x10, 0x0A, 0x25, 0x31, 0x36, 0x2F, 0x3C, 0x15, 0x3D, 0x0F, 0x30, 0x33, 0x3A, 0x06, 0x29, 0x3B, 0x1E, 0x38, 0x09, 0x01, 0x37, 0x07, 0x1A, 0x1D, 0x21, 0x32, 0x1F, 0x27, 0x34, 0x02, 0x14, 0x08, 0x3F, 0x22, 0x26, 0x18, 0x2C, 
            0x05, 0x1B, 0x3C, 0x29, 0x2F, 0x30, 0x39, 0x3F, 0x37, 0x0D, 0x04, 0x1F, 0x2A, 0x22, 0x2B, 0x1D, 0x2D, 0x25, 0x0A, 0x34, 0x28, 0x32, 0x3D, 0x0E, 0x00, 0x14, 0x31, 0x02, 0x17, 0x26, 0x2E, 0x36, 0x18, 0x1A, 0x1C, 0x27, 0x33, 0x01, 0x15, 0x03, 0x07, 0x20, 0x0B, 0x24, 0x13, 0x09, 0x3B, 0x35, 0x11, 0x2C, 0x12, 0x16, 0x06, 0x3A, 0x21, 0x19, 0x10, 0x0F, 0x38, 0x23, 0x1E, 0x3E, 0x08, 0x0C, 
            0x14, 0x2A, 0x1F, 0x08, 0x2F, 0x26, 0x02, 0x1B, 0x13, 0x11, 0x27, 0x2D, 0x15, 0x33, 0x3B, 0x03, 0x06, 0x22, 0x31, 0x04, 0x0E, 0x16, 0x32, 0x3E, 0x3A, 0x2E, 0x0A, 0x37, 0x2B, 0x3C, 0x10, 0x21, 0x05, 0x23, 0x20, 0x3D, 0x1A, 0x28, 0x24, 0x35, 0x19, 0x3F, 0x1D, 0x29, 0x2C, 0x01, 0x12, 0x0F, 0x34, 0x39, 0x1E, 0x1C, 0x38, 0x0B, 0x00, 0x18, 0x0D, 0x17, 0x25, 0x30, 0x07, 0x0C, 0x36, 0x09, 
            0x00, 0x07, 0x28, 0x0E, 0x0C, 0x30, 0x05, 0x06, 0x39, 0x27, 0x13, 0x1A, 0x2B, 0x15, 0x14, 0x11, 0x38, 0x08, 0x3C, 0x23, 0x2D, 0x22, 0x0A, 0x3D, 0x1D, 0x19, 0x3B, 0x0B, 0x29, 0x24, 0x20, 0x0F, 0x2E, 0x17, 0x0D, 0x2A, 0x34, 0x36, 0x16, 0x1C, 0x09, 0x1F, 0x02, 0x3F, 0x33, 0x31, 0x03, 0x37, 0x04, 0x35, 0x26, 0x10, 0x18, 0x21, 0x2F, 0x3E, 0x32, 0x12, 0x25, 0x1E, 0x1B, 0x3A, 0x2C, 0x01, 
            0x26, 0x3A, 0x35, 0x15, 0x04, 0x05, 0x17, 0x23, 0x1D, 0x3D, 0x0E, 0x30, 0x11, 0x31, 0x3E, 0x1C, 0x2A, 0x2B, 0x3C, 0x02, 0x03, 0x18, 0x2F, 0x1A, 0x22, 0x33, 0x16, 0x12, 0x28, 0x29, 0x3B, 0x38, 0x14, 0x21, 0x09, 0x01, 0x39, 0x06, 0x0C, 0x0D, 0x32, 0x1B, 0x0B, 0x24, 0x2D, 0x27, 0x07, 0x25, 0x3F, 0x00, 0x13, 0x1F, 0x08, 0x1E, 0x2E, 0x36, 0x37, 0x10, 0x19, 0x2C, 0x0A, 0x34, 0x20, 0x0F, 
            0x12, 0x03, 0x15, 0x22, 0x17, 0x36, 0x06, 0x1C, 0x35, 0x32, 0x1D, 0x2A, 0x2B, 0x10, 0x0F, 0x2C, 0x2F, 0x2D, 0x39, 0x0A, 0x0C, 0x21, 0x24, 0x00, 0x01, 0x3A, 0x02, 0x3F, 0x1A, 0x18, 0x14, 0x23, 0x0B, 0x3B, 0x25, 0x38, 0x29, 0x07, 0x33, 0x20, 0x3D, 0x37, 0x1B, 0x3E, 0x26, 0x05, 0x1E, 0x09, 0x0E, 0x04, 0x11, 0x16, 0x28, 0x2E, 0x34, 0x3C, 0x1F, 0x0D, 0x31, 0x08, 0x30, 0x19, 0x13, 0x27, 
            0x27, 0x24, 0x22, 0x06, 0x31, 0x18, 0x35, 0x2F, 0x3E, 0x26, 0x29, 0x05, 0x12, 0x0B, 0x1E, 0x09, 0x2E, 0x1A, 0x21, 0x19, 0x1B, 0x00, 0x37, 0x36, 0x3F, 0x2C, 0x13, 0x28, 0x2A, 0x15, 0x30, 0x25, 0x1F, 0x14, 0x2D, 0x3A, 0x0C, 0x1C, 0x07, 0x3C, 0x08, 0x0F, 0x1D, 0x32, 0x39, 0x20, 0x04, 0x01, 0x11, 0x03, 0x34, 0x38, 0x10, 0x23, 0x3B, 0x16, 0x02, 0x2B, 0x3D, 0x33, 0x0E, 0x0A, 0x17, 0x0D, 
            
            0x19, 0x30, 0x39, 0x3F, 0x38, 0x08, 0x33, 0x21, 0x31, 0x04, 0x2F, 0x32, 0x2B, 0x0B, 0x25, 0x18, 0x3D, 0x26, 0x3B, 0x07, 0x06, 0x2A, 0x15, 0x23, 0x12, 0x02, 0x01, 0x17, 0x27, 0x16, 0x0F, 0x24, 0x14, 0x1F, 0x03, 0x1D, 0x05, 0x22, 0x0D, 0x2C, 0x11, 0x34, 0x2E, 0x3C, 0x0C, 0x35, 0x20, 0x29, 0x1B, 0x1E, 0x10, 0x37, 0x13, 0x0A, 0x1C, 0x28, 0x36, 0x3A, 0x0E, 0x1A, 0x2D, 0x00, 0x3E, 0x09, 
            0x26, 0x27, 0x14, 0x35, 0x20, 0x03, 0x0A, 0x38, 0x34, 0x37, 0x08, 0x18, 0x2D, 0x2E, 0x3F, 0x32, 0x2A, 0x28, 0x31, 0x05, 0x2C, 0x16, 0x0B, 0x1C, 0x1F, 0x19, 0x25, 0x29, 0x00, 0x36, 0x22, 0x1D, 0x0E, 0x3A, 0x12, 0x10, 0x1B, 0x02, 0x33, 0x3D, 0x3C, 0x0D, 0x2F, 0x1E, 0x1A, 0x0F, 0x07, 0x01, 0x06, 0x0C, 0x04, 0x2B, 0x17, 0x15, 0x21, 0x39, 0x13, 0x23, 0x24, 0x3B, 0x3E, 0x09, 0x11, 0x30, 
            0x1D, 0x1C, 0x38, 0x34, 0x00, 0x33, 0x2E, 0x26, 0x0A, 0x09, 0x36, 0x0C, 0x35, 0x19, 0x32, 0x03, 0x30, 0x1E, 0x1A, 0x2B, 0x10, 0x14, 0x39, 0x08, 0x28, 0x2A, 0x23, 0x0D, 0x20, 0x3A, 0x1F, 0x37, 0x06, 0x13, 0x31, 0x12, 0x01, 0x11, 0x0E, 0x0F, 0x2C, 0x04, 0x2D, 0x2F, 0x02, 0x0B, 0x21, 0x18, 0x15, 0x24, 0x22, 0x05, 0x3E, 0x17, 0x3C, 0x3B, 0x1B, 0x29, 0x3D, 0x27, 0x07, 0x25, 0x16, 0x3F, 
            0x09, 0x04, 0x0E, 0x06, 0x19, 0x30, 0x16, 0x22, 0x29, 0x03, 0x3E, 0x27, 0x3A, 0x3D, 0x0A, 0x25, 0x34, 0x3F, 0x01, 0x26, 0x1B, 0x39, 0x20, 0x00, 0x17, 0x2E, 0x0B, 0x31, 0x18, 0x2F, 0x05, 0x32, 0x15, 0x3C, 0x2C, 0x1A, 0x02, 0x2D, 0x2B, 0x35, 0x38, 0x24, 0x23, 0x2A, 0x21, 0x36, 0x28, 0x3B, 0x10, 0x0D, 0x1F, 0x12, 0x08, 0x1C, 0x13, 0x0C, 0x0F, 0x37, 0x11, 0x14, 0x33, 0x1D, 0x07, 0x1E, 
            0x2D, 0x32, 0x23, 0x39, 0x12, 0x1C, 0x3F, 0x17, 0x10, 0x13, 0x3A, 0x31, 0x3B, 0x1A, 0x11, 0x3E, 0x25, 0x0C, 0x20, 0x21, 0x16, 0x35, 0x2E, 0x22, 0x18, 0x19, 0x34, 0x37, 0x36, 0x15, 0x00, 0x02, 0x3C, 0x04, 0x2C, 0x0D, 0x1E, 0x06, 0x28, 0x38, 0x05, 0x1B, 0x2F, 0x2B, 0x24, 0x33, 0x1F, 0x08, 0x07, 0x0A, 0x0B, 0x3D, 0x26, 0x03, 0x27, 0x14, 0x0E, 0x0F, 0x09, 0x01, 0x2A, 0x30, 0x1D, 0x29, 
            0x2B, 0x17, 0x3C, 0x23, 0x12, 0x1C, 0x1D, 0x13, 0x1B, 0x3F, 0x2D, 0x18, 0x34, 0x33, 0x27, 0x31, 0x39, 0x3D, 0x2E, 0x11, 0x0A, 0x0D, 0x29, 0x0F, 0x2F, 0x1F, 0x28, 0x1A, 0x14, 0x35, 0x00, 0x07, 0x24, 0x08, 0x1E, 0x3B, 0x32, 0x37, 0x30, 0x22, 0x15, 0x26, 0x0E, 0x0C, 0x21, 0x04, 0x05, 0x09, 0x10, 0x03, 0x20, 0x01, 0x36, 0x0B, 0x06, 0x19, 0x2C, 0x3E, 0x16, 0x2A, 0x25, 0x3A, 0x38, 0x02, 
            0x26, 0x2D, 0x00, 0x31, 0x18, 0x11, 0x01, 0x16, 0x34, 0x05, 0x1A, 0x1B, 0x25, 0x32, 0x30, 0x24, 0x1C, 0x2C, 0x3C, 0x09, 0x37, 0x39, 0x0B, 0x3D, 0x10, 0x1F, 0x13, 0x0D, 0x36, 0x3B, 0x35, 0x29, 0x0F, 0x19, 0x14, 0x2E, 0x12, 0x2F, 0x0A, 0x04, 0x3A, 0x3F, 0x07, 0x17, 0x0C, 0x28, 0x03, 0x2A, 0x2B, 0x33, 0x38, 0x0E, 0x20, 0x23, 0x1D, 0x27, 0x3E, 0x1E, 0x21, 0x02, 0x22, 0x06, 0x08, 0x15, 
            0x2E, 0x3F, 0x26, 0x08, 0x38, 0x37, 0x3D, 0x33, 0x36, 0x19, 0x13, 0x1B, 0x35, 0x05, 0x28, 0x11, 0x27, 0x15, 0x21, 0x2C, 0x3A, 0x0F, 0x25, 0x39, 0x07, 0x0C, 0x1A, 0x0A, 0x1F, 0x17, 0x01, 0x12, 0x1E, 0x3C, 0x31, 0x1C, 0x0E, 0x0D, 0x2D, 0x32, 0x04, 0x23, 0x22, 0x30, 0x2F, 0x29, 0x0B, 0x06, 0x09, 0x2B, 0x02, 0x1D, 0x3E, 0x10, 0x03, 0x3B, 0x34, 0x14, 0x20, 0x24, 0x18, 0x00, 0x2A, 0x16, 

		
		    // Shuffle	Rows 209-224			
		    0x2E, 0x2A, 0x09, 0x20, 0x26, 0x04, 0x31, 0x3A, 0x21, 0x24, 0x08, 0x3C, 0x1D, 0x02, 0x36, 0x25, 0x12, 0x1B, 0x2D, 0x3E, 0x0E, 0x01, 0x1A, 0x18, 0x16, 0x38, 0x1C, 0x22, 0x15, 0x0A, 0x17, 0x2C, 0x0B, 0x37, 0x34, 0x28, 0x2B, 0x33, 0x0F, 0x19, 0x0C, 0x35, 0x30, 0x00, 0x03, 0x3D, 0x06, 0x14, 0x0D, 0x3B, 0x05, 0x32, 0x3F, 0x29, 0x13, 0x11, 0x10, 0x39, 0x27, 0x07, 0x1E, 0x2F, 0x1F, 0x23, 
            0x26, 0x39, 0x3D, 0x05, 0x15, 0x2E, 0x0B, 0x0E, 0x0C, 0x17, 0x16, 0x0A, 0x1C, 0x3F, 0x11, 0x3B, 0x0D, 0x00, 0x03, 0x1E, 0x0F, 0x30, 0x06, 0x13, 0x21, 0x3C, 0x3E, 0x27, 0x2D, 0x01, 0x2B, 0x23, 0x29, 0x36, 0x14, 0x38, 0x2F, 0x24, 0x10, 0x20, 0x37, 0x2C, 0x1A, 0x22, 0x18, 0x33, 0x1D, 0x3A, 0x28, 0x35, 0x2A, 0x34, 0x09, 0x1B, 0x19, 0x32, 0x1F, 0x08, 0x25, 0x04, 0x31, 0x07, 0x12, 0x02, 
            0x3E, 0x2C, 0x1B, 0x2D, 0x17, 0x1E, 0x1A, 0x32, 0x24, 0x3D, 0x3A, 0x19, 0x0F, 0x39, 0x18, 0x01, 0x3C, 0x11, 0x1D, 0x3F, 0x10, 0x33, 0x23, 0x2B, 0x29, 0x16, 0x2E, 0x3B, 0x1C, 0x28, 0x06, 0x00, 0x36, 0x38, 0x12, 0x0B, 0x02, 0x03, 0x37, 0x0C, 0x15, 0x0D, 0x21, 0x05, 0x0E, 0x1F, 0x26, 0x14, 0x34, 0x2F, 0x13, 0x0A, 0x35, 0x31, 0x08, 0x09, 0x20, 0x04, 0x27, 0x07, 0x25, 0x30, 0x2A, 0x22, 
            0x06, 0x02, 0x36, 0x38, 0x30, 0x1B, 0x3C, 0x3A, 0x33, 0x25, 0x3F, 0x12, 0x23, 0x1D, 0x2E, 0x04, 0x01, 0x19, 0x27, 0x26, 0x0D, 0x28, 0x05, 0x24, 0x29, 0x0B, 0x0F, 0x00, 0x2A, 0x0C, 0x09, 0x3E, 0x3D, 0x0E, 0x3B, 0x08, 0x07, 0x1C, 0x20, 0x32, 0x39, 0x11, 0x31, 0x21, 0x2B, 0x17, 0x15, 0x03, 0x1E, 0x1A, 0x35, 0x2D, 0x18, 0x2C, 0x0A, 0x16, 0x13, 0x10, 0x22, 0x14, 0x37, 0x1F, 0x2F, 0x34, 
            0x3F, 0x1B, 0x36, 0x08, 0x37, 0x22, 0x3A, 0x16, 0x24, 0x29, 0x2D, 0x27, 0x05, 0x18, 0x1A, 0x13, 0x0B, 0x2E, 0x19, 0x3D, 0x11, 0x0D, 0x2B, 0x26, 0x04, 0x1E, 0x28, 0x00, 0x03, 0x34, 0x21, 0x1F, 0x15, 0x0A, 0x02, 0x12, 0x35, 0x39, 0x23, 0x30, 0x2F, 0x06, 0x2A, 0x17, 0x14, 0x10, 0x0C, 0x1C, 0x32, 0x0F, 0x3E, 0x09, 0x25, 0x01, 0x07, 0x20, 0x31, 0x1D, 0x33, 0x38, 0x0E, 0x3C, 0x3B, 0x2C, 
            0x07, 0x02, 0x3E, 0x19, 0x05, 0x0F, 0x35, 0x25, 0x04, 0x2E, 0x10, 0x3B, 0x3D, 0x28, 0x2F, 0x27, 0x20, 0x23, 0x32, 0x36, 0x1C, 0x0C, 0x0A, 0x39, 0x31, 0x0B, 0x29, 0x16, 0x3A, 0x09, 0x1A, 0x14, 0x2C, 0x12, 0x38, 0x21, 0x03, 0x3C, 0x37, 0x2A, 0x01, 0x26, 0x1B, 0x0D, 0x15, 0x1D, 0x11, 0x0E, 0x22, 0x00, 0x06, 0x2B, 0x2D, 0x1F, 0x3F, 0x08, 0x13, 0x33, 0x34, 0x30, 0x1E, 0x18, 0x24, 0x17, 
            0x06, 0x32, 0x25, 0x15, 0x0B, 0x09, 0x23, 0x3E, 0x1F, 0x24, 0x12, 0x16, 0x29, 0x2D, 0x0F, 0x33, 0x10, 0x00, 0x20, 0x0D, 0x3B, 0x21, 0x3C, 0x2F, 0x3D, 0x0A, 0x05, 0x26, 0x18, 0x34, 0x1C, 0x2E, 0x35, 0x1B, 0x07, 0x2B, 0x17, 0x28, 0x04, 0x36, 0x03, 0x2A, 0x22, 0x0E, 0x0C, 0x30, 0x38, 0x37, 0x3F, 0x1E, 0x1D, 0x14, 0x11, 0x02, 0x08, 0x39, 0x3A, 0x31, 0x13, 0x27, 0x19, 0x2C, 0x1A, 0x01, 
            0x1A, 0x24, 0x30, 0x2A, 0x16, 0x14, 0x23, 0x2D, 0x1B, 0x29, 0x37, 0x36, 0x02, 0x18, 0x2F, 0x3C, 0x3D, 0x1D, 0x0E, 0x21, 0x20, 0x33, 0x09, 0x3B, 0x03, 0x3E, 0x2C, 0x32, 0x2B, 0x0A, 0x38, 0x34, 0x19, 0x0D, 0x1C, 0x31, 0x0B, 0x10, 0x13, 0x1E, 0x0C, 0x15, 0x35, 0x27, 0x3A, 0x00, 0x11, 0x28, 0x05, 0x25, 0x12, 0x26, 0x1F, 0x39, 0x3F, 0x07, 0x06, 0x22, 0x17, 0x0F, 0x08, 0x04, 0x01, 0x2E, 
            
            0x17, 0x05, 0x21, 0x34, 0x1F, 0x33, 0x00, 0x13, 0x39, 0x2F, 0x23, 0x16, 0x2D, 0x1D, 0x04, 0x19, 0x29, 0x28, 0x12, 0x3F, 0x0B, 0x1E, 0x02, 0x2C, 0x36, 0x2B, 0x3A, 0x1B, 0x37, 0x15, 0x0E, 0x01, 0x35, 0x06, 0x0A, 0x32, 0x2E, 0x20, 0x31, 0x22, 0x09, 0x25, 0x30, 0x11, 0x08, 0x27, 0x0D, 0x07, 0x0C, 0x03, 0x2A, 0x1A, 0x3B, 0x3E, 0x3C, 0x1C, 0x10, 0x18, 0x26, 0x3D, 0x38, 0x0F, 0x24, 0x14, 
            0x23, 0x31, 0x2D, 0x1A, 0x0F, 0x0B, 0x01, 0x1D, 0x08, 0x2F, 0x02, 0x3F, 0x30, 0x04, 0x3E, 0x36, 0x03, 0x17, 0x3B, 0x1B, 0x3C, 0x32, 0x15, 0x39, 0x12, 0x07, 0x2A, 0x1E, 0x14, 0x29, 0x0D, 0x2E, 0x25, 0x16, 0x37, 0x09, 0x26, 0x2C, 0x21, 0x24, 0x35, 0x10, 0x20, 0x18, 0x0E, 0x1F, 0x3A, 0x28, 0x34, 0x1C, 0x27, 0x06, 0x3D, 0x0C, 0x05, 0x13, 0x11, 0x00, 0x2B, 0x22, 0x33, 0x0A, 0x38, 0x19, 
            0x0B, 0x17, 0x3B, 0x2B, 0x01, 0x02, 0x06, 0x39, 0x22, 0x3F, 0x16, 0x30, 0x3E, 0x09, 0x07, 0x2E, 0x0E, 0x34, 0x29, 0x0C, 0x12, 0x1F, 0x1E, 0x1D, 0x35, 0x11, 0x31, 0x36, 0x2F, 0x04, 0x28, 0x0D, 0x0A, 0x26, 0x19, 0x3D, 0x32, 0x20, 0x27, 0x37, 0x14, 0x03, 0x1B, 0x15, 0x18, 0x24, 0x1C, 0x05, 0x23, 0x08, 0x1A, 0x3C, 0x10, 0x21, 0x2A, 0x3A, 0x33, 0x13, 0x2D, 0x00, 0x25, 0x38, 0x2C, 0x0F, 
            0x24, 0x38, 0x2E, 0x0F, 0x18, 0x3B, 0x39, 0x2A, 0x1F, 0x04, 0x0D, 0x26, 0x13, 0x07, 0x29, 0x28, 0x10, 0x3E, 0x1E, 0x21, 0x0A, 0x05, 0x09, 0x35, 0x03, 0x16, 0x31, 0x0E, 0x2D, 0x0B, 0x36, 0x34, 0x3F, 0x33, 0x32, 0x17, 0x27, 0x1C, 0x1A, 0x25, 0x22, 0x15, 0x12, 0x20, 0x37, 0x2C, 0x02, 0x3D, 0x30, 0x3C, 0x0C, 0x1B, 0x06, 0x3A, 0x1D, 0x08, 0x11, 0x14, 0x00, 0x2B, 0x19, 0x23, 0x01, 0x2F, 
            0x25, 0x2E, 0x2B, 0x1A, 0x13, 0x10, 0x29, 0x38, 0x04, 0x35, 0x3E, 0x36, 0x0B, 0x39, 0x2F, 0x37, 0x21, 0x2A, 0x0D, 0x06, 0x1E, 0x03, 0x20, 0x3F, 0x32, 0x14, 0x3A, 0x08, 0x2D, 0x24, 0x09, 0x11, 0x1F, 0x0F, 0x0A, 0x05, 0x2C, 0x01, 0x3C, 0x28, 0x1C, 0x3D, 0x0E, 0x18, 0x16, 0x19, 0x33, 0x07, 0x12, 0x27, 0x1B, 0x15, 0x0C, 0x26, 0x02, 0x1D, 0x31, 0x23, 0x34, 0x17, 0x00, 0x3B, 0x30, 0x22, 
            0x3D, 0x3A, 0x06, 0x02, 0x0C, 0x29, 0x0D, 0x0E, 0x21, 0x23, 0x20, 0x13, 0x07, 0x2A, 0x1E, 0x1A, 0x30, 0x2D, 0x3F, 0x16, 0x18, 0x1D, 0x00, 0x2E, 0x05, 0x0B, 0x28, 0x1B, 0x0A, 0x32, 0x15, 0x0F, 0x33, 0x08, 0x38, 0x10, 0x36, 0x01, 0x3E, 0x2F, 0x22, 0x25, 0x03, 0x04, 0x39, 0x24, 0x27, 0x37, 0x19, 0x14, 0x2B, 0x09, 0x11, 0x3C, 0x1F, 0x35, 0x34, 0x12, 0x2C, 0x3B, 0x1C, 0x17, 0x31, 0x26, 
            0x1C, 0x2C, 0x33, 0x0C, 0x2A, 0x2D, 0x0E, 0x3C, 0x10, 0x27, 0x35, 0x04, 0x36, 0x06, 0x1B, 0x19, 0x23, 0x38, 0x21, 0x05, 0x17, 0x2F, 0x25, 0x3F, 0x2E, 0x11, 0x00, 0x1F, 0x3B, 0x28, 0x0A, 0x09, 0x03, 0x1A, 0x29, 0x32, 0x07, 0x13, 0x02, 0x1E, 0x14, 0x0F, 0x3D, 0x08, 0x34, 0x22, 0x12, 0x0D, 0x18, 0x15, 0x24, 0x39, 0x3E, 0x0B, 0x20, 0x3A, 0x30, 0x16, 0x37, 0x1D, 0x31, 0x01, 0x2B, 0x26, 
            0x19, 0x0A, 0x03, 0x2C, 0x0F, 0x3E, 0x33, 0x30, 0x1A, 0x0B, 0x08, 0x1B, 0x28, 0x38, 0x0E, 0x29, 0x35, 0x1D, 0x23, 0x16, 0x17, 0x2F, 0x10, 0x05, 0x00, 0x2D, 0x3C, 0x26, 0x3A, 0x39, 0x09, 0x06, 0x3B, 0x32, 0x31, 0x15, 0x3F, 0x1F, 0x0D, 0x37, 0x02, 0x0C, 0x1E, 0x3D, 0x18, 0x2E, 0x12, 0x36, 0x04, 0x34, 0x13, 0x21, 0x07, 0x14, 0x2A, 0x2B, 0x20, 0x11, 0x1C, 0x25, 0x27, 0x01, 0x24, 0x22, 


		    // Shuffle	Rows 225-240			
		    0x26, 0x22, 0x23, 0x2E, 0x03, 0x05, 0x29, 0x01, 0x1A, 0x0C, 0x19, 0x0A, 0x1B, 0x34, 0x18, 0x07, 0x12, 0x27, 0x30, 0x3B, 0x31, 0x1E, 0x0D, 0x08, 0x2A, 0x3E, 0x11, 0x39, 0x2D, 0x02, 0x3F, 0x1C, 0x0E, 0x32, 0x25, 0x37, 0x0B, 0x0F, 0x06, 0x1D, 0x14, 0x24, 0x33, 0x16, 0x20, 0x2B, 0x2C, 0x36, 0x3D, 0x38, 0x10, 0x3A, 0x00, 0x04, 0x17, 0x15, 0x3C, 0x1F, 0x2F, 0x35, 0x09, 0x28, 0x13, 0x21, 
            0x0E, 0x21, 0x37, 0x0F, 0x2A, 0x25, 0x0C, 0x02, 0x3F, 0x22, 0x13, 0x24, 0x36, 0x2E, 0x3B, 0x16, 0x03, 0x31, 0x00, 0x19, 0x17, 0x2F, 0x26, 0x14, 0x06, 0x05, 0x08, 0x2D, 0x30, 0x29, 0x39, 0x09, 0x18, 0x0D, 0x15, 0x3A, 0x3E, 0x0A, 0x1F, 0x20, 0x35, 0x10, 0x1A, 0x38, 0x1B, 0x3C, 0x23, 0x11, 0x1C, 0x1D, 0x07, 0x1E, 0x3D, 0x0B, 0x33, 0x2C, 0x2B, 0x34, 0x28, 0x12, 0x32, 0x04, 0x01, 0x27, 
            0x1B, 0x33, 0x06, 0x37, 0x24, 0x3E, 0x3D, 0x13, 0x15, 0x3B, 0x0D, 0x17, 0x2D, 0x05, 0x0E, 0x1F, 0x0B, 0x29, 0x3A, 0x1D, 0x09, 0x25, 0x12, 0x0A, 0x31, 0x22, 0x38, 0x21, 0x35, 0x16, 0x30, 0x1E, 0x03, 0x20, 0x04, 0x2A, 0x23, 0x2F, 0x02, 0x19, 0x0F, 0x34, 0x3F, 0x32, 0x00, 0x36, 0x2B, 0x39, 0x10, 0x07, 0x2C, 0x28, 0x2E, 0x08, 0x11, 0x26, 0x1A, 0x3C, 0x18, 0x27, 0x01, 0x1C, 0x0C, 0x14, 
            0x22, 0x11, 0x0D, 0x03, 0x10, 0x3D, 0x34, 0x2F, 0x08, 0x36, 0x3A, 0x2E, 0x20, 0x04, 0x29, 0x06, 0x37, 0x0C, 0x1C, 0x2B, 0x0A, 0x33, 0x19, 0x05, 0x02, 0x1B, 0x0E, 0x23, 0x2D, 0x18, 0x38, 0x3C, 0x0F, 0x2A, 0x24, 0x1A, 0x0B, 0x21, 0x30, 0x27, 0x15, 0x35, 0x12, 0x3E, 0x1F, 0x13, 0x16, 0x01, 0x1D, 0x3B, 0x09, 0x3F, 0x31, 0x00, 0x1E, 0x25, 0x2C, 0x26, 0x17, 0x14, 0x28, 0x32, 0x39, 0x07, 
            0x30, 0x22, 0x11, 0x34, 0x0D, 0x29, 0x35, 0x08, 0x0A, 0x0F, 0x24, 0x07, 0x1E, 0x2B, 0x12, 0x13, 0x3F, 0x1F, 0x2F, 0x33, 0x20, 0x36, 0x3B, 0x03, 0x2E, 0x19, 0x3C, 0x1D, 0x39, 0x2D, 0x26, 0x21, 0x14, 0x10, 0x16, 0x06, 0x04, 0x25, 0x1A, 0x18, 0x23, 0x1C, 0x2C, 0x27, 0x0C, 0x31, 0x2A, 0x3E, 0x01, 0x38, 0x09, 0x05, 0x02, 0x00, 0x0B, 0x32, 0x3A, 0x28, 0x37, 0x17, 0x3D, 0x0E, 0x1B, 0x15, 
            0x31, 0x08, 0x09, 0x27, 0x0B, 0x2F, 0x1F, 0x35, 0x1A, 0x15, 0x1C, 0x1B, 0x37, 0x06, 0x12, 0x0F, 0x02, 0x0C, 0x24, 0x34, 0x32, 0x3A, 0x2A, 0x01, 0x0D, 0x19, 0x03, 0x3F, 0x05, 0x13, 0x0E, 0x1D, 0x38, 0x18, 0x2C, 0x23, 0x2D, 0x20, 0x14, 0x3B, 0x07, 0x04, 0x16, 0x2E, 0x3D, 0x30, 0x33, 0x25, 0x21, 0x0A, 0x1E, 0x26, 0x3E, 0x10, 0x17, 0x28, 0x3C, 0x00, 0x11, 0x2B, 0x29, 0x36, 0x22, 0x39, 
            0x2E, 0x32, 0x2B, 0x13, 0x2D, 0x01, 0x05, 0x21, 0x06, 0x35, 0x1D, 0x1B, 0x07, 0x0D, 0x3B, 0x3F, 0x09, 0x11, 0x12, 0x0E, 0x04, 0x24, 0x0B, 0x27, 0x10, 0x2A, 0x1C, 0x3A, 0x1A, 0x20, 0x36, 0x02, 0x19, 0x0A, 0x18, 0x17, 0x3D, 0x3E, 0x22, 0x2F, 0x0F, 0x39, 0x25, 0x0C, 0x1F, 0x29, 0x00, 0x15, 0x23, 0x26, 0x16, 0x38, 0x37, 0x28, 0x14, 0x08, 0x34, 0x31, 0x30, 0x3C, 0x33, 0x2C, 0x03, 0x1E, 
            0x28, 0x03, 0x27, 0x0B, 0x3F, 0x13, 0x18, 0x25, 0x24, 0x38, 0x19, 0x04, 0x17, 0x2A, 0x10, 0x1C, 0x12, 0x16, 0x2D, 0x01, 0x3E, 0x34, 0x30, 0x3B, 0x21, 0x3C, 0x39, 0x1A, 0x0E, 0x31, 0x3D, 0x14, 0x1E, 0x29, 0x33, 0x35, 0x0A, 0x07, 0x26, 0x15, 0x3A, 0x2B, 0x2C, 0x22, 0x1B, 0x06, 0x05, 0x00, 0x36, 0x08, 0x02, 0x09, 0x0D, 0x1D, 0x0F, 0x32, 0x23, 0x20, 0x2E, 0x2F, 0x0C, 0x37, 0x11, 0x1F, 
            
            0x22, 0x0F, 0x2F, 0x1C, 0x37, 0x30, 0x38, 0x19, 0x28, 0x03, 0x35, 0x21, 0x25, 0x08, 0x16, 0x02, 0x17, 0x10, 0x34, 0x3B, 0x04, 0x3A, 0x00, 0x36, 0x14, 0x2D, 0x31, 0x0D, 0x13, 0x09, 0x12, 0x15, 0x26, 0x27, 0x1D, 0x18, 0x2A, 0x0E, 0x1A, 0x32, 0x3D, 0x2B, 0x07, 0x39, 0x01, 0x33, 0x06, 0x20, 0x3E, 0x1B, 0x3F, 0x0B, 0x24, 0x0A, 0x05, 0x29, 0x3C, 0x11, 0x23, 0x2E, 0x1E, 0x1F, 0x2C, 0x0C, 
            0x18, 0x28, 0x25, 0x3F, 0x10, 0x13, 0x15, 0x01, 0x3A, 0x04, 0x1B, 0x32, 0x03, 0x07, 0x38, 0x35, 0x17, 0x3D, 0x2F, 0x08, 0x2A, 0x19, 0x26, 0x31, 0x33, 0x1C, 0x37, 0x29, 0x30, 0x2D, 0x05, 0x16, 0x21, 0x0F, 0x2C, 0x00, 0x22, 0x39, 0x0C, 0x1D, 0x3E, 0x2E, 0x24, 0x27, 0x12, 0x0A, 0x0D, 0x34, 0x09, 0x1A, 0x11, 0x23, 0x36, 0x02, 0x0E, 0x06, 0x3C, 0x20, 0x3B, 0x2B, 0x14, 0x1E, 0x1F, 0x0B, 
            0x22, 0x1C, 0x30, 0x07, 0x0D, 0x0E, 0x1E, 0x36, 0x2D, 0x0A, 0x17, 0x0B, 0x08, 0x18, 0x1D, 0x2C, 0x3A, 0x12, 0x37, 0x03, 0x35, 0x20, 0x2F, 0x01, 0x19, 0x1F, 0x25, 0x27, 0x32, 0x3E, 0x13, 0x1B, 0x26, 0x2B, 0x39, 0x00, 0x3D, 0x2E, 0x11, 0x02, 0x04, 0x31, 0x29, 0x06, 0x09, 0x16, 0x3B, 0x10, 0x3F, 0x21, 0x2A, 0x28, 0x0C, 0x33, 0x3C, 0x38, 0x14, 0x1A, 0x15, 0x24, 0x23, 0x0F, 0x34, 0x05, 
            0x1F, 0x0B, 0x24, 0x10, 0x38, 0x1E, 0x0D, 0x02, 0x15, 0x01, 0x23, 0x04, 0x00, 0x19, 0x03, 0x33, 0x12, 0x28, 0x34, 0x3D, 0x3A, 0x1C, 0x39, 0x37, 0x32, 0x27, 0x3B, 0x0E, 0x2A, 0x2F, 0x0C, 0x16, 0x1D, 0x3E, 0x0F, 0x11, 0x05, 0x17, 0x35, 0x14, 0x18, 0x2D, 0x36, 0x25, 0x2C, 0x1B, 0x31, 0x20, 0x3F, 0x30, 0x0A, 0x09, 0x13, 0x3C, 0x2B, 0x2E, 0x07, 0x1A, 0x06, 0x21, 0x26, 0x08, 0x29, 0x22, 
            0x00, 0x0D, 0x0A, 0x16, 0x31, 0x2D, 0x2E, 0x37, 0x18, 0x32, 0x2B, 0x15, 0x05, 0x28, 0x14, 0x06, 0x1D, 0x08, 0x3B, 0x35, 0x07, 0x33, 0x1B, 0x2F, 0x09, 0x3C, 0x10, 0x04, 0x23, 0x0C, 0x13, 0x25, 0x30, 0x39, 0x3A, 0x34, 0x0F, 0x1F, 0x36, 0x1E, 0x2C, 0x11, 0x27, 0x3F, 0x1A, 0x22, 0x38, 0x21, 0x19, 0x29, 0x01, 0x2A, 0x03, 0x02, 0x0E, 0x20, 0x24, 0x0B, 0x3E, 0x3D, 0x26, 0x12, 0x1C, 0x17, 
            0x21, 0x02, 0x22, 0x1B, 0x04, 0x1C, 0x06, 0x1F, 0x3F, 0x20, 0x35, 0x27, 0x12, 0x3C, 0x16, 0x25, 0x0B, 0x30, 0x0F, 0x13, 0x1D, 0x3D, 0x05, 0x24, 0x03, 0x0E, 0x3E, 0x2A, 0x18, 0x08, 0x0A, 0x1A, 0x07, 0x2F, 0x17, 0x10, 0x11, 0x0D, 0x28, 0x01, 0x14, 0x31, 0x3A, 0x15, 0x36, 0x34, 0x2B, 0x19, 0x0C, 0x39, 0x1E, 0x09, 0x23, 0x00, 0x32, 0x2E, 0x3B, 0x2D, 0x2C, 0x26, 0x37, 0x38, 0x33, 0x29, 
            0x02, 0x2F, 0x1D, 0x04, 0x14, 0x0E, 0x2C, 0x21, 0x30, 0x06, 0x19, 0x01, 0x31, 0x32, 0x11, 0x07, 0x18, 0x35, 0x13, 0x08, 0x05, 0x20, 0x16, 0x27, 0x24, 0x23, 0x3C, 0x0A, 0x3F, 0x0C, 0x38, 0x17, 0x3D, 0x39, 0x3B, 0x25, 0x1E, 0x1A, 0x28, 0x1B, 0x09, 0x1C, 0x26, 0x0B, 0x0D, 0x15, 0x1F, 0x0F, 0x3A, 0x22, 0x37, 0x00, 0x34, 0x12, 0x29, 0x33, 0x2D, 0x36, 0x3E, 0x10, 0x2A, 0x2B, 0x2E, 0x03, 
            0x23, 0x0F, 0x20, 0x18, 0x39, 0x12, 0x1C, 0x3F, 0x21, 0x2F, 0x22, 0x25, 0x09, 0x05, 0x2C, 0x29, 0x07, 0x0E, 0x35, 0x2E, 0x2B, 0x3D, 0x2A, 0x34, 0x1B, 0x38, 0x26, 0x02, 0x30, 0x1D, 0x15, 0x3E, 0x0C, 0x19, 0x33, 0x11, 0x32, 0x14, 0x1A, 0x36, 0x17, 0x13, 0x3A, 0x06, 0x03, 0x0D, 0x1E, 0x16, 0x00, 0x27, 0x24, 0x1F, 0x0B, 0x10, 0x04, 0x01, 0x31, 0x3B, 0x28, 0x3C, 0x08, 0x0A, 0x2D, 0x37, 


		    // Shuffle	Rows 241-256			
		    0x21, 0x28, 0x07, 0x38, 0x0F, 0x01, 0x1A, 0x11, 0x3D, 0x2F, 0x1E, 0x39, 0x03, 0x25, 0x08, 0x16, 0x05, 0x36, 0x30, 0x00, 0x2D, 0x2C, 0x13, 0x3A, 0x14, 0x29, 0x3C, 0x33, 0x31, 0x0B, 0x12, 0x3B, 0x34, 0x15, 0x1D, 0x1B, 0x0D, 0x27, 0x1C, 0x37, 0x26, 0x3F, 0x18, 0x04, 0x06, 0x17, 0x19, 0x10, 0x0C, 0x0A, 0x09, 0x20, 0x24, 0x2B, 0x1F, 0x02, 0x35, 0x2E, 0x3E, 0x0E, 0x2A, 0x22, 0x32, 0x23, 
            0x38, 0x1D, 0x21, 0x0E, 0x28, 0x15, 0x03, 0x23, 0x09, 0x26, 0x2A, 0x25, 0x1E, 0x1B, 0x29, 0x2C, 0x33, 0x19, 0x24, 0x2F, 0x11, 0x04, 0x13, 0x2D, 0x01, 0x18, 0x2E, 0x17, 0x20, 0x0B, 0x0A, 0x06, 0x05, 0x36, 0x35, 0x0F, 0x3E, 0x30, 0x02, 0x32, 0x16, 0x34, 0x14, 0x37, 0x1C, 0x1F, 0x39, 0x3F, 0x27, 0x12, 0x10, 0x2B, 0x31, 0x00, 0x22, 0x3C, 0x3A, 0x3B, 0x08, 0x3D, 0x1A, 0x0C, 0x0D, 0x07, 
            0x37, 0x38, 0x0F, 0x3B, 0x07, 0x3F, 0x1C, 0x39, 0x3D, 0x23, 0x3E, 0x00, 0x0C, 0x22, 0x2B, 0x2E, 0x1B, 0x2A, 0x1A, 0x28, 0x33, 0x19, 0x11, 0x35, 0x24, 0x26, 0x0D, 0x21, 0x3C, 0x05, 0x20, 0x34, 0x31, 0x06, 0x0B, 0x14, 0x3A, 0x27, 0x17, 0x2C, 0x36, 0x25, 0x29, 0x01, 0x0E, 0x15, 0x2F, 0x03, 0x1F, 0x09, 0x16, 0x02, 0x12, 0x32, 0x30, 0x04, 0x08, 0x1E, 0x10, 0x0A, 0x18, 0x2D, 0x13, 0x1D, 
            0x29, 0x23, 0x01, 0x35, 0x25, 0x06, 0x08, 0x3C, 0x04, 0x3A, 0x3E, 0x1D, 0x11, 0x30, 0x15, 0x18, 0x3D, 0x2D, 0x26, 0x17, 0x05, 0x14, 0x12, 0x28, 0x34, 0x3B, 0x0F, 0x0C, 0x37, 0x31, 0x09, 0x00, 0x02, 0x38, 0x27, 0x0B, 0x1F, 0x2B, 0x0E, 0x1A, 0x36, 0x21, 0x2E, 0x20, 0x39, 0x1C, 0x0D, 0x2F, 0x10, 0x1B, 0x07, 0x16, 0x1E, 0x32, 0x13, 0x3F, 0x2C, 0x0A, 0x24, 0x22, 0x03, 0x2A, 0x33, 0x19, 
            0x2F, 0x25, 0x30, 0x39, 0x03, 0x07, 0x18, 0x3C, 0x16, 0x1A, 0x2D, 0x1B, 0x2C, 0x3E, 0x2B, 0x0C, 0x33, 0x15, 0x0E, 0x12, 0x3F, 0x05, 0x01, 0x27, 0x3A, 0x37, 0x06, 0x0B, 0x17, 0x34, 0x35, 0x29, 0x3D, 0x28, 0x22, 0x00, 0x20, 0x0A, 0x0D, 0x0F, 0x08, 0x02, 0x19, 0x26, 0x23, 0x04, 0x1F, 0x3B, 0x24, 0x1C, 0x21, 0x13, 0x09, 0x14, 0x2A, 0x11, 0x1D, 0x32, 0x36, 0x31, 0x38, 0x2E, 0x10, 0x1E, 
            0x13, 0x3F, 0x22, 0x3D, 0x0A, 0x24, 0x06, 0x05, 0x39, 0x28, 0x21, 0x0B, 0x3B, 0x18, 0x20, 0x36, 0x0E, 0x25, 0x17, 0x3A, 0x0C, 0x38, 0x34, 0x27, 0x37, 0x16, 0x1A, 0x11, 0x31, 0x12, 0x32, 0x23, 0x1C, 0x15, 0x00, 0x2E, 0x2A, 0x2F, 0x0D, 0x1F, 0x30, 0x04, 0x35, 0x14, 0x1E, 0x33, 0x10, 0x3C, 0x1B, 0x1D, 0x2B, 0x3E, 0x07, 0x2C, 0x08, 0x19, 0x09, 0x2D, 0x02, 0x01, 0x26, 0x03, 0x0F, 0x29, 
            0x09, 0x0D, 0x1C, 0x20, 0x24, 0x1A, 0x02, 0x32, 0x25, 0x23, 0x2B, 0x11, 0x22, 0x04, 0x33, 0x2E, 0x27, 0x31, 0x3C, 0x15, 0x1E, 0x13, 0x10, 0x28, 0x26, 0x2F, 0x3A, 0x0B, 0x0A, 0x30, 0x0C, 0x37, 0x12, 0x3E, 0x1B, 0x1F, 0x36, 0x00, 0x03, 0x2A, 0x3B, 0x05, 0x0E, 0x34, 0x2C, 0x29, 0x39, 0x08, 0x38, 0x0F, 0x16, 0x3D, 0x07, 0x18, 0x1D, 0x17, 0x19, 0x2D, 0x3F, 0x21, 0x06, 0x01, 0x14, 0x35, 
            0x38, 0x08, 0x14, 0x18, 0x30, 0x0F, 0x16, 0x1C, 0x29, 0x11, 0x37, 0x2C, 0x0D, 0x2F, 0x36, 0x27, 0x1A, 0x2D, 0x39, 0x05, 0x28, 0x1F, 0x3E, 0x0C, 0x24, 0x0E, 0x25, 0x07, 0x2B, 0x02, 0x3C, 0x12, 0x21, 0x03, 0x3B, 0x15, 0x06, 0x09, 0x2E, 0x04, 0x2A, 0x0A, 0x00, 0x32, 0x20, 0x13, 0x23, 0x1E, 0x22, 0x3F, 0x1D, 0x35, 0x3D, 0x10, 0x19, 0x01, 0x34, 0x33, 0x31, 0x0B, 0x26, 0x17, 0x1B, 0x3A, 
            
            0x05, 0x1D, 0x06, 0x3F, 0x3C, 0x20, 0x10, 0x3E, 0x3D, 0x0E, 0x1A, 0x38, 0x07, 0x0C, 0x15, 0x2E, 0x25, 0x2C, 0x18, 0x22, 0x21, 0x30, 0x37, 0x11, 0x23, 0x04, 0x13, 0x16, 0x34, 0x19, 0x36, 0x08, 0x09, 0x2B, 0x0F, 0x33, 0x0D, 0x0A, 0x24, 0x28, 0x00, 0x03, 0x35, 0x39, 0x2A, 0x31, 0x2D, 0x02, 0x17, 0x1E, 0x29, 0x1F, 0x1C, 0x27, 0x3B, 0x3A, 0x32, 0x0B, 0x12, 0x1B, 0x26, 0x2F, 0x01, 0x14, 
            0x05, 0x22, 0x30, 0x0D, 0x01, 0x26, 0x3A, 0x07, 0x04, 0x18, 0x15, 0x0F, 0x2A, 0x10, 0x23, 0x29, 0x1C, 0x20, 0x1E, 0x27, 0x1D, 0x0B, 0x3C, 0x2F, 0x19, 0x0E, 0x31, 0x0C, 0x34, 0x36, 0x12, 0x2C, 0x17, 0x03, 0x32, 0x25, 0x28, 0x1F, 0x3B, 0x1A, 0x24, 0x3F, 0x02, 0x09, 0x2B, 0x2E, 0x13, 0x21, 0x00, 0x1B, 0x39, 0x14, 0x2D, 0x0A, 0x11, 0x3E, 0x3D, 0x35, 0x16, 0x06, 0x08, 0x33, 0x37, 0x38, 
            0x22, 0x3E, 0x12, 0x0C, 0x17, 0x0E, 0x3C, 0x09, 0x01, 0x1C, 0x34, 0x06, 0x31, 0x13, 0x3A, 0x0D, 0x26, 0x1E, 0x05, 0x1A, 0x25, 0x21, 0x3B, 0x39, 0x29, 0x3D, 0x2B, 0x11, 0x16, 0x24, 0x2E, 0x02, 0x28, 0x2D, 0x32, 0x23, 0x1B, 0x38, 0x0F, 0x1F, 0x19, 0x2F, 0x18, 0x35, 0x14, 0x36, 0x1D, 0x3F, 0x37, 0x07, 0x10, 0x04, 0x2A, 0x15, 0x30, 0x2C, 0x27, 0x00, 0x08, 0x0A, 0x33, 0x03, 0x0B, 0x20, 
            0x36, 0x19, 0x1B, 0x02, 0x14, 0x0A, 0x10, 0x1F, 0x2C, 0x16, 0x0E, 0x20, 0x3E, 0x1C, 0x31, 0x27, 0x1E, 0x2E, 0x3A, 0x04, 0x09, 0x3B, 0x12, 0x28, 0x2A, 0x2B, 0x3F, 0x07, 0x29, 0x35, 0x37, 0x34, 0x08, 0x03, 0x13, 0x2D, 0x21, 0x22, 0x3D, 0x32, 0x15, 0x33, 0x38, 0x1D, 0x26, 0x39, 0x30, 0x0D, 0x18, 0x2F, 0x05, 0x24, 0x0C, 0x23, 0x17, 0x25, 0x0F, 0x0B, 0x11, 0x06, 0x01, 0x3C, 0x00, 0x1A, 
            0x09, 0x02, 0x38, 0x14, 0x0C, 0x29, 0x1A, 0x21, 0x07, 0x30, 0x20, 0x00, 0x1F, 0x1E, 0x12, 0x0B, 0x05, 0x37, 0x25, 0x28, 0x22, 0x36, 0x0E, 0x2B, 0x3B, 0x34, 0x2C, 0x3D, 0x08, 0x32, 0x3F, 0x2A, 0x19, 0x0D, 0x24, 0x04, 0x11, 0x26, 0x2F, 0x2E, 0x33, 0x18, 0x06, 0x1D, 0x3E, 0x23, 0x17, 0x1B, 0x35, 0x31, 0x27, 0x01, 0x0F, 0x39, 0x0A, 0x16, 0x15, 0x3A, 0x2D, 0x1C, 0x13, 0x3C, 0x10, 0x03, 
            0x0E, 0x3E, 0x30, 0x24, 0x3B, 0x19, 0x31, 0x07, 0x16, 0x09, 0x14, 0x1D, 0x15, 0x0D, 0x13, 0x39, 0x27, 0x11, 0x2E, 0x26, 0x18, 0x37, 0x06, 0x08, 0x1B, 0x28, 0x0F, 0x33, 0x1C, 0x3D, 0x17, 0x02, 0x0B, 0x36, 0x12, 0x1A, 0x0A, 0x25, 0x3C, 0x3F, 0x1F, 0x22, 0x2C, 0x32, 0x21, 0x38, 0x2B, 0x05, 0x20, 0x01, 0x00, 0x34, 0x23, 0x3A, 0x10, 0x2F, 0x03, 0x2D, 0x0C, 0x29, 0x35, 0x04, 0x1E, 0x2A, 
            0x29, 0x37, 0x1B, 0x01, 0x39, 0x38, 0x18, 0x05, 0x34, 0x17, 0x2E, 0x0F, 0x28, 0x14, 0x36, 0x22, 0x07, 0x1E, 0x11, 0x16, 0x02, 0x0E, 0x25, 0x33, 0x35, 0x3B, 0x0D, 0x09, 0x2B, 0x08, 0x0A, 0x3E, 0x23, 0x06, 0x15, 0x1A, 0x04, 0x03, 0x10, 0x3A, 0x20, 0x26, 0x32, 0x3F, 0x2C, 0x2F, 0x0B, 0x21, 0x0C, 0x2A, 0x19, 0x1C, 0x30, 0x12, 0x00, 0x3C, 0x31, 0x1D, 0x13, 0x1F, 0x3D, 0x24, 0x27, 0x2D, 
            0x16, 0x15, 0x00, 0x1A, 0x28, 0x2E, 0x21, 0x3A, 0x0D, 0x01, 0x02, 0x3E, 0x23, 0x1C, 0x29, 0x18, 0x17, 0x1F, 0x27, 0x08, 0x2D, 0x1E, 0x36, 0x31, 0x09, 0x0F, 0x06, 0x3D, 0x3F, 0x37, 0x13, 0x35, 0x12, 0x26, 0x07, 0x25, 0x20, 0x0B, 0x30, 0x2F, 0x32, 0x39, 0x0A, 0x24, 0x19, 0x1B, 0x1D, 0x05, 0x3C, 0x04, 0x38, 0x10, 0x03, 0x14, 0x11, 0x3B, 0x0C, 0x0E, 0x33, 0x34, 0x2C, 0x2A, 0x2B, 0x22, 
        };

        #endregion
        
        #region UI Elements

        private void writeToTextBox1(string value)
        {
            encryptTextBox.AppendText(value);
            encryptTextBox.AppendText("\n");
        }

        private void writeToTextBox2(string value)
        {
            decryptTextBox.AppendText(value);
            decryptTextBox.AppendText("\n");
        }

        private void printChar1(string value)
        {
            encryptTextBox.AppendText(value);
        }

        private void printChar2(string value)
        {
            decryptTextBox.AppendText(value);
        }

        // Adds the message to the message box
        private void addMessage(string message)
        {
            // TODO wordwrap the line if it's too long
            messageBox.Items.Add(message);
            messageBox.SelectedIndex = messageBox.Items.Count - 1;
        }

        // Add the message to the message box from background thread
        private void addMessageFromOtherThread(string message)
        {
            this.Invoke((MethodInvoker)delegate
            {
                messageBox.Items.Add(message); // Runs on UI thread
                messageBox.SelectedIndex = messageBox.Items.Count - 1;
            });
        }

        // Clears the message box
        private void clearMessageBox()
        {
            messageBox.Items.Clear();
        }


        #endregion
        
        #region Local Functions


        /**
         * Read the file and write its contents to the target window
         */
        private void readAndDisplayFile(string filename, int textboxNo)
        {
            char[] character = new char[1];
            // Read the File
            try
            {
                using (StreamReader reader = new StreamReader(filename, System.Text.Encoding.Default)) // Use default encoding 
                {
                    while (reader.Peek() >= 0)
                    {
                        if (textboxNo == 1)
                        {
                            reader.ReadLine();
                        }
                        else if (textboxNo == 2)
                        {
                            reader.ReadBlock(character, 0, 1);
                        }
                    }
                }
            }
            catch (Exception _Exception)
            {
                Debug.WriteLine(_Exception.ToString());
                addMessage("Error occurred during reading file " + filename);
            }
        }

        
        // Wrapper function for triggering message box with yes and no options
        private Boolean showMessageBoxWithResult(string message, string title)
        {
            var result = MessageBox.Show(message, title, MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
                return true;
            else
                return false;
        }



        #endregion

        #region Mainform

        public MainForm()
        {
            InitializeComponent();
            

            this.Text = APP_NAME + " " + VERSION;   // Set the title text to APP_NAME + VERSION
            this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(Form1Closing);

            // Debug 
            //System.Diagnostics.Debug.WriteLine("User name: " + Properties.Settings.Default.User_Name);
            //System.Diagnostics.Debug.WriteLine("Product key: " + Properties.Settings.Default.Product_Key);

            // Check if this is the first time running the application
            if (Properties.Settings.Default.Initial_Run)
            {
                Debug.WriteLine("Initial run!");

                // TODO put some kind of End User Agreement?


                // Activate some kind of illustrative tutorial/instruction 

            }
            else
            {
                Debug.WriteLine("NOT initial run");
                // Check if the pad directory is set, and whether there are any keys created / selected

                tabControl1.SelectedTab = MainTabPage;
            }


        }

        #endregion

        #region Resizing

        private void tabControl1_SizeChanged(object sender, System.EventArgs e)
        {
            resizeElements();
        }

        private void tabControl1_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            resizeElements();
        }

        private void resizeElements()
        {
            // Encryption/Decryption Tab Resize ============================================

            // Calculate width for each textbox and use the same width for all the groupboxes
            int width = (tabControl1.Width - 35) / 2;
            int xcol1 = 5;
            int xcol2 = width + 20;
            encryptTextBox.Width = width;
            decryptTextBox.Width = width;
            FileEncryptionGroupBox.Width = width;
            FileDecryptionGroupBox.Width = width;
            ECMessageGroupBox.Width = width;
            ECPadGroupBox.Width = width;

            // Adjust location for the elements in the right side
            decryptTextBox.Location = new Point(xcol2, decryptTextBox.Location.Y);
            FileDecryptionGroupBox.Location = new Point(xcol2, FileDecryptionGroupBox.Location.Y);
            ECPadGroupBox.Location = new Point(xcol2, ECPadGroupBox.Location.Y);
            //add in FakeMessageButton.Location
            // NewPasswordButton.Location

            // Adjust location for textbox headings
            int titlex1 = (width - PlainTextLabel.Width) / 2 + xcol1;
            int titlex2 = (width - EncryptedTextLabel.Width) / 2 + xcol2;
            PlainTextLabel.Location = new Point(titlex1, PlainTextLabel.Location.Y);
            EncryptedTextLabel.Location = new Point(titlex2, EncryptedTextLabel.Location.Y);

        }
        
        private static string GetCompactedString(string longString, Font font, int maxWidth)
        {
            string compacted = string.Copy(longString);
            var maxSize = new Size(maxWidth, 0);
            var formattingOptions = TextFormatFlags.PathEllipsis | TextFormatFlags.ModifyString;

            TextRenderer.MeasureText(compacted, font, maxSize, formattingOptions);
            return compacted;
        }

        
#endregion

        #region CloseForm

        /// <summary>
        /// Form closing event
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Form1Closing(object sender, FormClosingEventArgs e)
        {
            int i;
            int length = encryptTextBox.TextLength;

            // CLEAN
            // Scrubbed after use:
            // Line[]
            // FGP2_TRNs
            // FGP2_Root_Key_OTP 

            // Scrub all RAM used
            for (i = 0; i < 256; i++) random1_array[i] = 0;
            for (i = 0; i < 64; i++) random3_array[i] = 0;
            for (i = 0; i < 32; i++) entropy_hash[i] = 0;

            for (i = 0; i < FGP2_KEY_256 * 4; i++) FGP2_Root_Key[i] = 0;
            for (i = 0; i < FGP2_KEY_256; i++) FGP2_Hardened_Root_Key[i] = 0;
            for (i = 0; i < FGP2_KEY_128; i++) FGP2_Session_Key[i] = 0;
            for (i = 0; i < FGP2_BLOCK; i++) FGP2_Message_Key[i] = 0;

            for (i = 0; i < FGP2_KEY_256 * 256; i++) key[i] = 0;                // Clear raw key[] RAM so no trace remains
            for (i = 0; i < FGP_POOL_SIZE_64K; i++) entropy_pool[i] = 0;        // Clear entropy_pool[] RAM so no trace remains


            encryptTextBox.Clear();                                             // CLear the text box
            for (i = 0; i < length; i++) encryptTextBox.AppendText("x");        // Wipe the textbox memory
            encryptTextBox.Clear();                                             // Force a clear of the textbox


            // Debugging test only
            FGP_DebugLine("line", line);
            FGP_DebugLine("random1_array", random1_array);
            FGP_DebugLine("random3_array", random3_array);
            FGP_DebugLine("entropy_hash", entropy_hash);

            FGP_DebugLine("FGP2_Root_Key", FGP2_Root_Key);
            FGP_DebugLine("FGP2_Hardened_Root_Key", FGP2_Hardened_Root_Key);
            FGP_DebugLine("FGP2_TRNs", FGP2_TRNs);
            FGP_DebugLine("FGP2_Root_Key_OTP", FGP2_Root_Key_OTP);
            FGP_DebugLine("FGP2_Session_Key", FGP2_Session_Key);
            FGP_DebugLine("FGP2_Message_Key", FGP2_Message_Key);

            Debug.WriteLine("Scrubbed memory");                                 // Tested 24/5/2015 all cleared

        }

        #endregion

        #region FGP1_ROOT_key_generation

        //========================================================================================================================================
        // Hardened ROOT key generation - Generates a 256 byte hardened ROOT key

        // 1    OVERVIEW - ROOT key generation
        // While the ROOT key is isolated from the encryption process by the random SESION key, FGP adds further randomness to ROOT key generation so it is different every time
        //
        // 2    SECURITY - Hardening
        // Hardening the ROOT key is a slow process, taking about 1s - 2s on a typical PC
        // This considerably hinders a brute force attack even with supercomputing power
        // PASSWORDS of 12 characters using upper and lower case characters will take years to break on a supercomputer
        // Hardware acceleration would reduce this time, but it is not simply a slow hash, considerable effort would be required to attack FGP
        // Longer, more secure passpharases would render brute force attacks on FGP infeasible
        // Each time a ROOT key is genrated, it will be unique
        //
        // 3    OPERATION
        // A random number pair is used to be the MATCH and COLLISION count of the bytewise XOR of the output hash bytes
        // A match occurs 1/256 of the time and counts as a COLLISION
        // When collision count is reached, the algorithm stops and uses the hash XOR sum of all hashes as part of the ROOT key
        // On average, this takes 16384 hashes per MATCH/COLLISION pair of which there are 16 pairs
        // This is repeated 16 times for each ROOT key generation (a total of 262,000 hashes on average)
        // There is no shortcut to this process - all intermediate hashes are XORed into the final 256 byte mix
        // The final 32 bytes of the hardened ROOT key are replaced by the MATCH/COLLISION random bytes XORed with a simple password hash
        // The penultimate 32 bytes of the hardened root key are used to transmit the MAC 
        //
        // 4    TESTING
        // This is a more sophisticated version of a slow hash that uses some unique randomisation for each root key
        //


        private void FGP_DebugLine(string name, byte[] array)
        {
            // Function:    Print a debug line of bytes in hex
            // Inputs:      Name, array of bytes
            // Outputs:     Printed bytes
            // TTD:         

#if VERBOSE_DEBUG
            Debug.Write(name + " ");
            for (int i = 0; i < array.Length; i++)
            {
                Debug.Write(array[i].ToString("X2") + ",");
            }
            Debug.WriteLine("<");
#endif // VERBOSE_DEBUG
        }

                
        //========================================================================================================================================
        private byte[] FGP2_Generate_random_hash(byte[] hash_in, byte Random1, byte Random2)
        {
            // Function:    Generate a random hash based target and collision count variables
            // Inputs:      PasswordHash, two random numbers for count and collision match
            // Outputs:     64 byte hash
            // TTD:         TRN addition and CRC collision search like TXT app
            // Random1 = Target for match
            // Random2 = Collision counts 

            SHA512Managed hashString = new SHA512Managed();
            byte[] password_hash512 = new byte[64];
            byte[] long_hash_in = new byte[66];
            byte[] hash_out = new byte[64];
            byte xor_byte;
            int counter = 0;
            int hash_counter = 0;
            int i = 0;
            int j = 0;
            bool reverse = false;                                               // Reverses the count direction when count > 127 to prevent collision > 256 overrun

            for (int m = 0; m < 64; m++)
            {
                long_hash_in[m] = hash_in[m];                                   // Get the original hash
                hash_out[m] = 0;                                                // Reset hash_out array
            }

            // AL note: why 127? why the midpoint? Overrun needs to be avoided, but what is this costing in terms of reducing the randomness.
            
            if (Random2 >= 128)
            {
                Random2 = (byte)(255 - Random2);                                // Reverse the count order to prevent collision overrun (> 256 collisions)
                reverse = true;
            }

            // Kept nested for loops as it is a single process.  The whole target/collision count process is integral
            for (i = 0; i < 256; i++)
            {
                if (reverse)
                    long_hash_in[64] = (byte)(255 - i);                         // Add first random byte
                else
                    long_hash_in[64] = (byte)i;                                 // Add first random byte

                for (j = 0; j < 256; j++)
                {
                    long_hash_in[65] = (byte)j;                                 // Add second random byte

                    password_hash512 = hashString.ComputeHash(long_hash_in);    // Hash using SHA512 now 64 bytes long so we can hash and re-hash it
                    hash_counter++;

                    xor_byte = 0;                                               // Clear the xor sum
                    for (int l = 0; l < 64; l++)
                    {
                        xor_byte ^= password_hash512[l];                        // Get the xor of the entire hash
                        hash_out[l] ^= password_hash512[l];                     // Add this hash to the overall hash sum
                        long_hash_in[l] ^= password_hash512[l];                 // Recycle the output so the hash source bytes 0 - 64 are not identical
                    }

                    if (xor_byte == Random1) counter++;                         // Target matched, count collisions
                    if (counter >= Random2) break;                              // Met collision count - end here
                }

                if (counter >= Random2) break;                                  // Met collision count - end here
            }

            //Debug.WriteLine("Random1: " + Random1.ToString("D3") + "    Random2: " + Random2.ToString("D3") + "    i: " + i.ToString("D3") + "    j: " + j.ToString("D3") + "    count: " + counter.ToString("D3") + "    hash_count: " + hash_counter.ToString("D3"));//TESTONLY

            return hash_out;
        }



        //========================================================================================================================================
        void FGP2_Generate_ROOT_key(byte[] PasswordBytes, byte PickShuffle, int length)
        {
            // Function:    Generate an initial password derived hash based on salt and insertion selectors
            // Inputs:      Password, salt, insertion shuffle
            // Outputs:     64 byte hash
            // TTD:         Generate 128 byte root key

            byte[] password_salt_in = new byte[64];                             // Salt in for the password
            byte[] password_salt_shuffled = new byte[64];                       // Shuffled salt in for the password
            byte[] random_key = new byte[16];                                   // 16 random root key password hashes

            // Keeping nested for loops so the whole process is visible
            for (int j = 0; j < 256; j++)                                       // 256 password hashes
            {
                                                                                // 64 bytes per hash
                for (int i = 0; i < 64; i++)                                    // Get the predetermined salt
                {
                    // Uses PRNG salt column selection instead of picksalt - increases the salt options while remaining deterministic - see TXT app line 837.
                    password_salt_in[i] = Salt[i * 256 + (GetRandom2() + j) % 256]; // Get salt randomly selected with nonce (j) and password dependent PRNG - NASTY
                }                                                               // TESTED 25/10/14

                // Now 64 bytes
                for (int i = 0; i < 64; i++)                                    // Insert the password using xor to avoid only 7 bits being used and apply the shuffle to the entire salt
                {
                    if (i < length)
                    {
                        password_salt_shuffled[Shuffle[PickShuffle * 64 + i]] = (byte)(password_salt_in[i] ^ PasswordBytes[i]);    // INSERT fixed password into the Key-derived salt.  Password_insertion bytes must be (0 - 31) permutation without repetition
                        PasswordBytes[i] = 0;                                   // Scrub the password - leave no trace
                    }
                    else
                        password_salt_shuffled[Shuffle[PickShuffle * 64 + i]] = password_salt_in[i];    // Continue shuffle so all salt bytes are shuffled

                }                                                               // TESTED 23/8/2014 and after password xor addition and full salt shuffle 21/11/2014

                PasswordHashArray[j] = Get_SHA512_bytes(password_salt_shuffled);      // Store 1 of 256 global keys (128 bytes)
            }

            for (int i = 0; i < 64; i++)                                         // Scrub clean the source arrays
            {
                password_salt_in[i] = 0;
                password_salt_shuffled[i] = 0;
            }


            // ROOT KEY cluster
            // We now have 256 x 64B password hashes - get 16 x 64B (= 1024 bytes) of them XORed down to the FGP2 root key block of 256 bytes
            for (int i = 0; i < 16; i++)
                random_key[i] = PasswordHashArray[GetRandom2()][GetRandom2() / 4]; // Get a FRN[PRNG] vector for the root key block pick - deterministic from password

            FGP_DebugLine("random_key     ", random_key);//TESTONLY

            // Keeping nested for loops so the whole process is visible
            for (int i = 0; i < 16; i++)                                        // 16 root key blocks of 64 bytes
            {
                for (int j = 0; j < 64; j++)                                    // Extract the 4 x 256B root keys from 16 different 64 byte 1/256 hashes
                {
                    FGP2_Root_Key[i * 64 + j] = PasswordHashArray[random_key[i]][j];
                }
                random_key[i] = 0;                                              // Scrub where we can
            }

            for (int i = 0; i < 256; i++)                                       // 256 password hashes
            {
                for (int j = 0; j < 64; j++)                                    // 64 bytes per hash
                {
                    PasswordHashArray[i][j] = 0;                                // Scrub the password hash array
                }
            }

            FGP_DebugLine("Root_key     ", FGP2_Root_Key);//TESTONLY
        }



        //========================================================================================================================================
        void FGP2_Harden_ROOT_key(int progress)
        {
            // Function:    Make a slow hash out of the first 224 bytes of root key
            // Inputs:      TRNs must be either generated or extracted first
            // Outputs:     Modifies first 224 bytes of root key
            // TTD:        
 
            byte[] key_in = new byte[64];                                       // Incoming key bytes
            byte[] key_out = new byte[64];                                      // Outgoing key bytes
            byte match;
            byte count;
            byte iout;


            for (int i = 0; i < 256; i++) FGP2_Hardened_Root_Key[i] = 0;        // Initialise hardened root key as we ^= into this array


            // Keeping nested for loops so the whole process is visible
            for (int i = 0; i < 16; i++)                                        // 16 blocks of 64 bytes
            {
                if (progress == ENCRYPT) 
                    encryptFileProgressBar.Value = i + 3;                       // Show some encrypt progress
                else
                    decryptFileProgressBar.Value = i + 3;                       // Show some decrypt progress

                iout = (byte)(i % 4);

                for (int j = 0; j < 64; j++)
                    key_in[j] = FGP2_Root_Key[i * 64 + j];                      // Get a block of the root key

                match = FGP2_TRNs[FGP2_TRN_START + i * 2];                      // Pick TRNs for match and count
                count = FGP2_TRNs[FGP2_TRN_START + i * 2 + 1];
                key_out = FGP2_Generate_random_hash(key_in, match, count);      // Generate a slow hash (average of 16384 hashes)

                for (int j = 0; j < 64; j++) 
                    FGP2_Hardened_Root_Key[iout * 64 + j] ^= key_out[j];        // XOR in a block of the hardened root key (4 blocks per 64 byte output block
            }

            for (int j = 0; j < 32; j++)                                         // Final 32 bytes of root key always contains the fixed root key for TRN transmission
                FGP2_Hardened_Root_Key[FGP2_TRN_START + j] = (byte)(FGP2_Root_Key[FGP2_TRN_START + j] ^ FGP2_Root_Key[256 + FGP2_TRN_START + j]);  // Fixed final block of the root key using 2 different 1/256 blocks
        }



        //========================================================================================================================================
        private int system()
        {
            throw new NotImplementedException();
        }
        

        #endregion

        #region FGP2_OTP_generation
        //========================================================================================================================================
        // A    Generate an OTP (one-time pad) of the 256 byte root key and TRNs for transmission
        //      Because the transmitted xor is of TRNs that are different every time, the root key is never revealled
        // B    Init Salsa from bytes 128 - 191 of the 256 byte TRNs compressed to a 32 byte initialisation vector
        // C    Load the session key (128 bytes) from bytes 0 - 127 of the TRNs


        // 1    OVERVIEW - One-time pad
        // We generate 256 random numbers to use in a one-time pad transmission of the ROOT key
        // To a user with knowledge of the ROOT key, the random numbers can be deduced
        // Isolating the random numbers from the transmitted message is crucial in order to prevent trivial message decryption
        //
        // 2    SECURITY - Isolation of the SESSION key and MESSAGE key
        // FGP uses a compression algorithm that is irreversible to isolate the MESSAGE key from the transmitted SESSION key
        // FGP assumes all hash functions are compromised (reversible), however, compressing a large number to a small number is an irreversible process
        // If we compress a 128 byte SESSION key to a 64 byte MESSAGE key, it is not possible to deduce the 128 byte SESSION key from the 64 byte MESSAGE key
        // This technique provides protection against chosen plain text attacks revealing the session key
        // Compression is scalable, it can be expanded further compressing larger SESSION key space into smaller MESSAGE key spaces to provide greater security
        // FGP generates a stream cipher of 16 x 64 byte blocks from each SESSION key, 
        // FGP also hashes the result between each block so that both Salsa20 and the hash are combined for greater cipher security between blocks
        // FGP uses a completely new random SESSION key after a 16 x 64 byte (1KB) block
        //
        // 3    OPERATION
        // Compression uses SHA-512 to compress a 128 byte (1024 bit) SESSION key space down to a 64 bit (512 bit) MESSAGE key
        // It is critical that the SESSION key consistes of RANDOM numbers, not a simple password or anything with less entropy than the entire 128 byte SESSION key space
        // Compression is also used on the Salsa20 initialisation vector to further impede any attack on the Salsa20 PRNG
        //
        // 4    TESTING
        // The maths proves it.  It is not possible to extract a random 128 byte SESSION key from a 64 byte hash of it
        // At most it would be possible to localise the SESSION key to one of 2^512 (10^154) possibilities
        // This is infeasibly large permutation set to brute force
        // It is also easily scalable if required as computing power increases


        private void FGP2_Make_Session_Key_from_Root_Key()
        {
            // Function:    Xor the root key with 256 TRNs for OTP transmission
            // Inputs:      Root key and TRNs
            // Outputs:     256 bytes of TRN sent via password dependent Root key
            //              Salsa20 initialised
            //              Session key generated
            // TTD:         

            byte[] SalsaIV = new byte[32];
            byte[] SalsaRaw = new byte[64];
            int i;


            // 1    Generate an OTP of the 256 byte root key and TRNs for transmission
            for (i = 0; i < FGP2_KEY_256; i++)
                FGP2_Root_Key_OTP[i] = (byte)(FGP2_Hardened_Root_Key[i] ^ FGP2_TRNs[i]); // TESTED OK 3/5/2015

            FGP_DebugLine("FGP2_Hardened_Root_Key      ", FGP2_Hardened_Root_Key);  // TEST ONLY
            FGP_DebugLine("FGP2_TRNs sessionTx", FGP2_TRNs);  // TEST ONLY
            FGP_DebugLine("FGP2_Root_Key_OTP e", FGP2_Root_Key_OTP);  // TEST ONLY


            // 2    Init Salsa from bytes 128 - 191 of the TRN bytes compressed from 64 to 32 bytes
            for (i = 0; i < 64; i++)
                SalsaRaw[i] = FGP2_TRNs[FGP2_KEY_128 + i];                      // Get 64 TRNs

            SalsaIV = Get_SHA256_bytes(SalsaRaw);                               // Do a compression hash for the Salsa20 IV to prevent pattern being used to discern the TRN SESSION key

            FGP2_InitSalsa(SalsaIV);                                            // IV TESTED OK 3/5/2015
            FGP_DebugLine("IV for Salsa E     ", SalsaIV);  // TEST ONLY
            for (i = 0; i < 64; i++) SalsaRaw[i] = 0;                           // Clean up - leave no trace
            for (i = 0; i < 32; i++) SalsaIV[i] = 0;                            // Clean up - leave no trace


            // 3    Load the 128 byte session key
            for (i = 0; i < FGP2_KEY_128; i++)
            {
                FGP2_Session_Key[i] = FGP2_TRNs[i];
            }

            for (i = 0; i < FGP2_KEY_256; i++) FGP2_TRNs[i] = 0;                // Clean up - leave no trace
        }



        //========================================================================================================================================
        // 1    Pre-Extract TRNs from OTP of the 256 byte root key and TRNs transmitted

        private void FGP2_PreExtract_TRNs_from_Message()
        {
            // Function:    Pre-extract the TRNs from transmitted root key xor TRNs.  64 bytes
            // Inputs:      Message preamble (Root key xor TRNs)
            // Outputs:     64 bytes of pre-extracted TRNs
            // TTD:         

            
            // 1    Extract the 256 byte session key from OTP of (Root key ^ TRNs) received
            for (int i = FGP2_TRN_START; i < FGP2_KEY_256; i++)
                FGP2_TRNs[i] = (byte)(FGP2_Root_Key[i] ^ FGP2_Root_Key[256 + i] ^ FGP2_Root_Key_OTP[i]); // TESTED 3/5/2015
        }
    


        //========================================================================================================================================
        // 1    Extract session key from OTP of the 256 byte root key and TRNs transmitted
        // 2    Init Salsa from last 64 bytes
        // 3    Load the session key (128 bytes)

        private void FGP2_Extract_Session_Key_from_Message()
        {
            // Function:    Extract the session key from transmitted root key xor TRNs.  256 bytes
            // Inputs:      Message preamble (Root key xor TRNs)
            // Outputs:     256 bytes of TRN received from password dependent Root key
            //              Salsa20 initialised
            //              Session key generated
            // TTD:         

            byte[] SalsaIV = new byte[32];
            byte[] SalsaRaw = new byte[64];
            int i;


            // 1    Extract the 256 byte session key from OTP of (Root key ^ TRNs) received
            for (i = 0; i < FGP2_KEY_256; i++)
                FGP2_TRNs[i] = (byte)(FGP2_Hardened_Root_Key[i] ^ FGP2_Root_Key_OTP[i]); // TESTED 3/5/2015

            FGP_DebugLine("FGP2_Hardened_Root_Key      ", FGP2_Hardened_Root_Key);  // TEST ONLY
            FGP_DebugLine("FGP2_Root_Key_OTP  ", FGP2_Root_Key_OTP);  // TEST ONLY
            FGP_DebugLine("FGP2_TRNs sessionRx", FGP2_TRNs);  // TEST ONLY


            // 2    Init Salsa from bytes 128 - 191 of the TRN bytes compressed from 64 to 32 bytes
            for (i = 0; i < 64; i++)
                SalsaRaw[i] = FGP2_TRNs[FGP2_KEY_128 + i];                      // Get 64 TRNs


            // SECURITY STEP: Against CPA
            // COMPRESSION hash of Salsa20 IV
            // Prevents a Salsa pattern recognition being used to determine IV and then discover the TRN SESSION key
            SalsaIV = Get_SHA256_bytes(SalsaRaw);                               // Do a compression hash for the Salsa20 IV to prevent pattern being used to discern the TRN SESSION key


            FGP2_InitSalsa(SalsaIV);                                            // IV TESTED OK 3/5/2015
            FGP_DebugLine("IV for Salsa D     ", SalsaIV);  // TEST ONLY
            for (i = 0; i < 64; i++) SalsaRaw[i] = 0;                           // Clean up - leave no trace
            for (i = 0; i < 32; i++) SalsaIV[i] = 0;                            // Clean up - leave no trace


            // 3    Load the 128 byte session key
            for (i = 0; i < FGP2_KEY_128; i++)
            {
                FGP2_Session_Key[i] = FGP2_TRNs[i];                             // TESTED 3/5/2015
            }


            for (i = 0; i < FGP2_KEY_256; i++) FGP2_TRNs[i] = 0;                // Clean up - leave no trace

        }



        //========================================================================================================================================
        // 1    Hash the session key in two blocks of 64 bytes
        // 2    Salsa20 xor the hashed session key
        // 3    Compress the result to a new MESSAGE key (OTP) for encryption

        private void FGP2_Make_OTP_from_Session_Key()
        {
            // Function:    Xor the root key with 256 TRNs for OTP transmission
            // Inputs:      Root key and TRNs
            // Outputs:     256 bytes of TRN sent via password dependent Root key
            //              Salsa20 initialised
            //              Session key generated
            //              Message key created
            // TTD:         Add Salsa20 to this

            byte[] ScratchPad64_in = new byte[FGP2_KEY_64];
            byte[] ScratchPad64_out = new byte[FGP2_KEY_64];
            int i;

            for (int j = 0; j < 16; j++)
            {
                // 1    Hash the session key (128 bytes) in two blocks of 64 bytes - Take the session key as input next time around
                for (i = 0; i < FGP2_KEY_64; i++) ScratchPad64_in[i] = FGP2_Session_Key[i];
                ScratchPad64_out = Get_SHA512_bytes(ScratchPad64_in);           // Hash first block
                for (i = 0; i < FGP2_KEY_64; i++) FGP2_Session_Key[i] = ScratchPad64_out[i];

                for (i = 0; i < FGP2_KEY_64; i++) ScratchPad64_in[i] = FGP2_Session_Key[i + FGP2_KEY_64];
                ScratchPad64_out = Get_SHA512_bytes(ScratchPad64_in);           // Hash second block
                for (i = 0; i < FGP2_KEY_64; i++) FGP2_Session_Key[i + FGP2_KEY_64] = ScratchPad64_out[i];
                // TESTED OK 3/5/2015


                // 2    Salsa20 xor the hashed session key
                //      This gives us a new 128 byte block of session key
                //      We generate 16 blocks of 128 bytes from each 128 block of TRNs
                for (i = 0; i < FGP2_KEY_128; i++) FGP2_Session_Key[i] ^= GetRandom3(); 


                // 3    COMPRESS the result to a new set of random numbers (OTP) for encrypting the message
                //      SECURITY STEP: Against CPA
                //      This is the key step that prevents chosen plain text attacks on the cipher  
                //      The output MESSAGE key (64 bytes) is half the size of the input SESSION key (128 bytes)
                //      There are on average 2^512 possible inputs for each 64 byte MESSAGE key output block
                //      It is not possible to reverse this step from a known message revealing the MESSAGE key then revealing the SESSION key - half the information is irreversibly lost
                ScratchPad64_out = Get_SHA512_bytes(FGP2_Session_Key);                          // COMPRESSION FUNCTION

                //      This is the COMPRESSED MESSAGE KEY which is used as a one-time pad to encrypt the message
                for (i = 0; i < FGP2_KEY_64; i++) FGP2_Message_Key[j * 64 + i] = ScratchPad64_out[i];
                // TESTED OK 3/5/2015
            }

            for (i = 0; i < FGP2_KEY_64; i++) ScratchPad64_in[i] = ScratchPad64_out[i] = 0;     // Clean up - Leave no RAM trace

            FGP_DebugLine("FGP2_Message_Key   ", FGP2_Message_Key);  // TEST ONLY
        }



        #endregion

        #region FGP3_Encrypt
        
        //========================================================================================================================================
        // FGP2 Encrypt a 1024 byte block of text  

        // 1    OVERVIEW - Encryption
        // This step takes the input source and XORs it with the compressed 1024 byte one-time pad
        // The encryption step may have been removed from this code
        //
        // 2    SECURITY - What could break it
        // Breaking FGP would require a brute force attack on the password
        // The session key is passed using a one-time pad of random numbers to the receiver
        // Without access to the root key, nothing can be deduced about the transmitted random numbers (SESSION key) or the derived compressed MESSAGE key
        // RAM is scrubbed after use and when the program closes to prevent malicious extraction of intermediate data or cold boot attacks
        // FGP does not save passwords to disk.  Passwords are immediately hashed then scrubbed
        // FGP should be used offline to prevent key-logging attacks
        //
        // 3    OPERATION
        // FGP uses the MESSAGE key as a one-time pad (random numbers unknown to the hacker) to transmit a message
        // The MESSAGE key is an XOR of both a Salsa20 stream cipher and a compressed session key hash
        // Without knowledge of the input SESSION key, neither of these can be deduced
        //
        // 4    TESTING
        // Chosen plain text attack: It is not possible to extract a random 128 byte SESSION key from a 64 byte hash of it

        private void FGP2_EncryptBlock(int length, int offset, byte[] fileBuffer)
        {
            // Function:    Encrypt 1024 byte block of message - should be padded with random data
            // Inputs:      OTP, Message
            // Outputs:     Encrypted message to output stream
            // TTD:      

            byte[] ENCout = new byte[FGP2_BLOCK];
            byte[] MAC = new byte[32];
            byte[] MACin = new byte[32];
            byte thebyte;

            for (int i = 0; i < 32; i++)                                      // Clear the MACs
            {
                MAC[i] = 0;
                MACin[i] = 0;
            }


            if (offset > 0) FGP2_Generate_TRN();                                // Get the next block of TRNs (first block created in parent routine) - will create a new block as required
            FGP2_Make_Session_Key_from_Root_Key();                              // Make the session key
            FGP2_Make_OTP_from_Session_Key();                                   // Make the compressed 1024 byte OTP


            for (int i = 0; i < length; i++)                                    // Hash the single line of the plaintext here
            {
                if (encryptFileMode)
                {
                    thebyte = fileBuffer[offset * FGP2_BLOCK + i];              // Get the byte from file if file is selected
                }
                else          
                {
                    thebyte = (byte)encryptTextBox.Text[offset * FGP2_BLOCK + i]; // Otherwise read byte from the textbox
                    if (thebyte == 0x13) thebyte = 0x2D;                        // Mistranslated (-) sometimes
                    if (thebyte == 0x19) thebyte = 0x27;                        // Mistranslated (') sometimes
                    if (thebyte == 0x14) thebyte = 0x2D;                        // Mistranslated em-dash sometimes - substitute an en-dash
                }

                // Byte by byte encryption - no arrays left in memory - though arrays would make this more efficient
                // Encrypt a byte using the MESSAGE key random numbers

                // EXPORT version  removed encryption steps

                FGP2_Message_Key[i] = 0;                                        // Clean up - leave no trace


                // MAC the encrypted message - could be more efficient - MAC it after it is stored in array
                MACin[i % 32] = thebyte;                                        // MAC the encrypted byte
                if (((i % 32) == 0) && (i > 0))                                 // Hash each 32 byte block of encrypted text
                {
                    MACin = Get_SHA256_bytes(MACin);                            // Hash the MAC
                    for (int j = 0; j < 32; j++)
                    {
                        MAC[j] ^= MACin[j];                                     // Add the MAC info
                        MACin[j] = 0;                                           // Clear MACin or the final MAC block with zeros is xored out of the MAC
                    }
                }

                ENCout[i] = thebyte;                                            // Store encrypted output for transmission
            }
            thebyte = 0;                                                        // Leave no trace


            MACin[30] ^= (byte)(length / 256);                                  // Xor in length to the MAC so we don't allow decryption of extended ciphertext - leaks compressed key
            MACin[31] ^= (byte)(length % 256);                                  // Xor in length to the MAC so we don't allow decryption of extended ciphertext - leaks compressed key
            MACin = Get_SHA256_bytes(MACin);                                    // Hash the MACin in case we have less than 32 bytes in the last block
            for (int j = 0; j < 32; j++)
            {
                MAC[j] ^= MACin[j];                                             // Add the MAC info and add to the file
                MACin[j] = 0;                                                   // Leave no trace
            }


            for (int i = 0; i < 32; i++)                                        // Add in MAC to transmitted data, xoring with root key
            {
                // Replace TRN bytes 192 - 223 with MAC - hacker doesn't know what they are so they still appear random
                FGP2_Root_Key_OTP[FGP2_MAC_START + i] = (byte)(FGP2_Root_Key[FGP2_MAC_START + i] ^ MAC[i]);   
            }

            FGP_DebugLine("MAC in          ", MAC);//TESTONLY


            // Send the TRNs, after getting the 32 byte MAC first
            for (int i = 0; i < FGP2_KEY_256; i++)                              // Write OTP of TRNs and root key to file or text box
            {
                if (encryptFileMode)
                    saveEncryptFileWriter.Write(FGP2_Root_Key_OTP[i]);          // Output to file directly
                else
                    printChar2(FGP2_Root_Key_OTP[i].ToString("X2"));            // Print to textbox

                FGP2_Root_Key_OTP[i] = 0;                                       // Clear Root key RAM - leave no trace
            }                                                                   // TESTED NOT YET TO DO TODO


            // Now send the encrypted message
            for (int i = 0; i < length; i++)                                    // Send encrypted (message key ^ message)
            {
                if (encryptFileMode)
                    saveEncryptFileWriter.Write(ENCout[i]);                     // Output to file directly
                else
                    printChar2(ENCout[i].ToString("X2"));                       // Print to textbox

                ENCout[i] = 0;                                                  // Clear stored message ENCout[] RAM - leave no trace
            }                                                                   // TESTED 19/12/2014
        }


        //========================================================================================================================================
        // ENCRYPT the message
        private void FGP_Encrypt()
        {
            // Function:    Encrypt the message
            // Inputs:      Name, array of bytes
            // Outputs:     Printed bytes in text window or file
            // TTD:         

            byte[] encFileReadBuff = null;
            long percentage;
            int length;
            int encSize;


            // File selected - read from file and encrypt directly
            if (encryptFileMode)
            {
                // Read from file as byte array
                encFileReadBuff = File.ReadAllBytes(openEncryptFileName);

                addMessage("Encrypt:  " + openEncryptFileName + "  ==>  " + openEncryptFileName + ".crp");
            }


            if (encryptFileMode)
                length = (int)new FileInfo(openEncryptFileName).Length;
            else
                length = encryptTextBox.TextLength;

            Debug.WriteLine("Length: " + length.ToString()); //TESTONLY


            if (length > MAX_FILE_SIZE)
            {
                addMessage("ERROR:  File too large.  Encryption cancelled.");   // Message to user 
                encryptFileProgressBar.Value = 0;                               // Finished
            }
            else
            {
                FGP_GetPassWord();                                              // Get the PassWord if we don't already have it
                FGP2_Generate_TRN();                                            // Need to get the TRNs for the first block
                FGP2_Harden_ROOT_key(ENCRYPT);                                  // Generate the slow hash on first cycle only - No benefit in regeneration.  
                                                                                // If one block is decrypted, the password is already known


                // Open a file for encrypted text
                if (encryptFileMode)
                {
                    saveEncryptFileWriter = new BinaryWriter(File.OpenWrite(openEncryptFileName + ".crp"), System.Text.Encoding.Default);
                }


                for (int i = 0; i < ((length / FGP2_BLOCK) + 1); i++)           // Break message up into 1024 byte blocks, each with a unique Salsa20 OTP set
                {
                    percentage = 20 + (long)((80 * i * FGP2_BLOCK / (1 + length))); // Encryption progress
                    if (percentage > 100) percentage = 100;                         // Prevent errors
                    encryptFileProgressBar.Value = (int)percentage;

                    if ((length - (i * FGP2_BLOCK)) > FGP2_BLOCK)
                        encSize = FGP2_BLOCK;
                    else
                        encSize = length % FGP2_BLOCK;

#if VERBOSE_DEBUG
                    Debug.WriteLine("Encrypt block: " + i.ToString() + " of " + (length / FGP2_BLOCK).ToString()); //TESTONLY
#endif

                    FGP2_EncryptBlock(encSize, i, encFileReadBuff);                 // TESTED 10/5/2015 with diehard test on output - crp file is "as good as random"
                }
                
                encryptFileProgressBar.Value = 100;                                 // Finished
            }

        }
        #endregion

        #region FGP4_Decrypt

        //========================================================================================================================================
        // FGP2 Decrypt a 1024 byte block of text 

        // OVERVIEW - See comments in the Encrypt region


        private void FGP2_DecryptBlock(int length, int offset, byte[] fileBuffer)
        {
            // Function:    Decrypt a 1024 byte block of text
            // Inputs:      OTP, Ciphertext
            // Outputs:     Message to output stream
            // TTD:      

            byte[] MAC = new byte[32];
            byte[] MACin = new byte[32];
            byte[] ENCout = new byte[FGP2_BLOCK];
            byte thebyte;
            char thechar;
            bool bottom = false;


            for (int i = 0; i < 32; i++)                                      // Clear the MACs
            {
                MAC[i] = 0;
                MACin[i] = 0;
            }


            for (int i = 0; i < FGP2_KEY_256; i++)
            {
                // Read the TRNs
                if (decryptFileMode)
                    thebyte = fileBuffer[offset * (FGP2_BLOCK + FGP2_KEY_256) + i];           // Get the byte from file if file is selected
                else
                    thebyte = HexRead(decryptTextBox.Text[((offset * (FGP2_BLOCK + FGP2_KEY_256)) + i) * 2], decryptTextBox.Text[((offset * (FGP2_BLOCK + FGP2_KEY_256)) + i) * 2 + 1]);

                FGP2_Root_Key_OTP[i] = thebyte;                                 // TESTED - NOT YET
            }
            FGP_DebugLine("FGP2_Root_Key_OTP d  ", FGP2_Root_Key_OTP);//TESTONLY

            FGP2_PreExtract_TRNs_from_Message();                                // Pre-extract TRNs
            if (offset == 0)
                FGP2_Harden_ROOT_key(DECRYPT);                                  // Generate the slow hash on first cycle only - No benefit in regeneration.  If one block is decrypted, the password is already known
            FGP2_Extract_Session_Key_from_Message();                            // Extract the session key
            FGP2_Make_OTP_from_Session_Key();                                   // Make the compressed 1024 byte OTP


            for (int i = 0; i < length; i++)
            {
                // Read and decrypt a line of the key file here
                if (decryptFileMode)
                {
                    thebyte = fileBuffer[offset * (FGP2_BLOCK + FGP2_KEY_256) + FGP2_KEY_256 + i];           // Get the byte from file if file is selected
                }
                else
                {
                    thebyte = HexRead(decryptTextBox.Text[((offset * (FGP2_BLOCK + FGP2_KEY_256)) + FGP2_KEY_256 + i) * 2], decryptTextBox.Text[((offset * (FGP2_BLOCK + FGP2_KEY_256)) + FGP2_KEY_256 + i) * 2 + 1]);
                }

                MACin[i % 32] = thebyte;                                        // DeMAC the encrypted byte

                                                                                // Decryption code removed
                FGP2_Message_Key[i] = 0;                                        // Clear the OTP - this byte is now used - leave no trace


                // MAC the encrypted message
                if (((i % 32) == 0) && (i > 0))                                 // Hash each 32 byte block of encrypted text
                {
                    MACin = Get_SHA256_bytes(MACin);                            // Hash the MAC
                    for (int j = 0; j < 32; j++)
                    {
                        MAC[j] ^= MACin[j];                                     // Add the MAC info
                        MACin[j] = 0;                                           // Clear MACin or the final MAC block with zeros in it is xored out of the MAC
                    }
                }

                ENCout[i] = thebyte;
            }
            thebyte = 0;                                                        // Leave no trace


            MACin[30] ^= (byte)(length / 256);                                  // Xor in length to the MAC so we don't allow decryption of extended ciphertext - leaks compressed key
            MACin[31] ^= (byte)(length % 256);                                  // Xor in length to the MAC so we don't allow decryption of extended ciphertext - leaks compressed key
            MACin = Get_SHA256_bytes(MACin);                                    // Hash the MACin in case we have less than 32 bytes in the last block
            for (int j = 0; j < 32; j++)
            {
                MAC[j] ^= MACin[j];                                             // Add the MAC info and add to the file
            }


            FGP_DebugLine("MAC out         ", MAC);//TESTONLY


            for (int i = 0; i < 32; i++)                                        // Subtract MAC from received data, subtracting from extended hash
            {
                if (MAC[i] != (byte)(FGP2_Root_Key_OTP[FGP2_MAC_START + i] ^ FGP2_Root_Key[FGP2_MAC_START + i]))   // Check MAC is valid 
                    bottom = true;
            }


            if (bottom)
            {
                if (!decryptFileMode)                                            // If file is selected
                {
                    encryptTextBox.AppendText("Invalid message block\n".ToString());     // Otherwise print to textbox
                    addMessage("Error occurred during decryption.");
                }
            }
            else
            {
                for (int i = 0; i < length; i++)
                {
                    thebyte = ENCout[i];
                    thechar = (char)thebyte;
                    ENCout[i] = 0;                                              // And clear the array RAM - leave no trace

                    if (decryptFileMode)                                        // If file is selected
                        saveDecryptFileWriter.Write(thebyte);                   // Write to file directly
                    else
                        encryptTextBox.AppendText(thechar.ToString());          // Otherwise print to textbox
                }
            }
        }


        //========================================================================================================================================
        private void FGP_Decrypt()
        {
            // Function:    Decrypt the message
            // Inputs:      Name, array of ciphertext
            // Outputs:     Printed plain text in text window or file if MAC verifies
            // TTD:         

            int length;
            long percentage;

            byte[] decFileReadBuff = null;


            // Save to file if file mode 
            if (decryptFileMode)
            {
                // Read from file
                decFileReadBuff = File.ReadAllBytes(openDecryptFileName);

                saveDecryptFileWriter = new BinaryWriter(File.OpenWrite(saveDecryptFileName), System.Text.Encoding.Default);
                addMessage("Decrypt:  " + saveDecryptFileName + "  <==  " + openDecryptFileName);

            }

            if (decryptFileMode)
                length = (int)new FileInfo(openDecryptFileName).Length;
            else
                length = decryptTextBox.TextLength / 2;                         // Two bytes per hex digit


            // D5  Get the password and decrypt line
            FGP_GetPassWord();                                                  // Get the PassWord if we don't already have it
            //FGP2_PreExtract_TRNs_from_Message();                                // Pre-extract TRNs
            //FGP2_Harden_ROOT_key(DECRYPT);                                      // Generate the slow hash on first cycle only - No benefit in regeneration.  If one block is decrypted, the password is already known


            // DECRYPTION
            int decSize;
            for (int i = 0; i < ((length / (FGP2_BLOCK + FGP2_KEY_256)) + 1); i++)
            {
                percentage = 20 + (long)((80 * i * (FGP2_BLOCK + FGP2_KEY_256) / (1 + length)));       // Decryption progress
                if (percentage > 100) percentage = 100;                         // Prevent errors
                decryptFileProgressBar.Value = (int)percentage;

                if ((length - (i * (FGP2_BLOCK + FGP2_KEY_256))) > (FGP2_BLOCK + FGP2_KEY_256))
                    decSize = FGP2_BLOCK;
                else
                    decSize = length % (FGP2_BLOCK + FGP2_KEY_256) - FGP2_KEY_256;

#if VERBOSE_DEBUG
                Debug.WriteLine("Decrypt block: " + i.ToString() + " of " + ((length / (FGP2_BLOCK + FGP2_KEY_256))).ToString()); //TESTONLY
#endif

                FGP2_DecryptBlock(decSize, i, decFileReadBuff);
            }

            decryptFileProgressBar.Value = 100;                                 // Clear the progress bar

            for (int i = 0; i < FGP2_KEY_256; i++) FGP2_Root_Key_OTP[i] = 0;    // Clear Root key RAM - leave no trace
        }
       

        #endregion

        #region FGP5_Salsa20
        //========================================================================================================================================

        // 1    OVERVIEW - Salsa20
        // Salsa20 is a standard stream cipher taking a 24 bit initialisation vector
        //
        // 2    SECURITY 
        // Salsa20 is (as of 2015) considered unbroken
        //
        // 3    OPERATION
        // This is a standard Salsa20 implementation
        // In random number generation, FGP uses a random initialisation vector
        // In encryption/decryption, FGP uses a random initialisation vector that is derived from the SESSION key so that Salsa20 functions as a stream cipher
        //
        // 4    TESTING
        // To be confirmed against  standard Salsa20 output from known initialisation vector


        byte[] salsa_key = new byte[16];
        byte[] IV = new byte[8];
        byte[] salsa20_output = new byte[64];
        uint[] m_state = new uint[16];


        void FGP_GetSalsaBlock()
        {
            Hash(salsa20_output, m_state);
            m_state[8] = AddOne(m_state[8]);
            if (m_state[8] == 0)
            {
                // NOTE: stopping at 2^70 bytes per nonce is user's responsibility
                m_state[9] = AddOne(m_state[9]);
            }
        }


        void FGP_InitSalsa()
        {
            // Function:    Initialise Salsa20 with a random IV
            // Inputs:      TRNs for IV and nonce
            // Outputs:     Salsa20 is initialised
            // TTD:         
            
            GenerateIV();
            GenerateKey();
            Initialize(salsa_key, IV);
        }


        void FGP2_InitSalsa(byte[] SalsaIV)
        {
            // Function:    Initialise Salsa20 from supplied IV (TRNs)
            // Inputs:      SalsaIV - 32 TRNs (only 24 used)
            // Outputs:     Salsa is initialised
            // TTD:         

            for (int i = 0; i < 8; i++)
                IV[i] = SalsaIV[i + 3];                                         // Just use some of the random bytes - doesn't matter which

            for (int i = 0; i < 16; i++)
                salsa_key[i] = SalsaIV[i + 13];                                 // Pick another 16 bytes from somewhere else in the 32 byte block

            random3_index = 0;                                                  // Force the next Get to grab a new Salsa20 get block - Full deterministic Salsa20 initialisation from IV

            Initialize(salsa_key, IV);
        }


        /// <summary>
        /// Generates a random initialization vector (<see cref="SymmetricAlgorithm.IV"/>) to use for the algorithm.
        /// </summary>
        void GenerateIV()
        {
            // Function:    Generate a random 8-byte IV for Salsa20 from TRNs
            // Inputs:      TRNs
            // Outputs:     Salsa IV generated
            // TTD:         

            for (int i = 0; i < 8; i++)
                IV[i] = GetRandom1();
        }


        void GenerateKey()
        {
            // Function:    Generate a random 16-byte key for Salsa20 from TRNs
            // Inputs:      TRNs
            // Outputs:     Salsa key generated - we are using Salsa20 as a PRNG
            // TTD:         

            for (int i = 0; i < 16; i++)
                salsa_key[i] = GetRandom1();
        }


        private static uint Rotate(uint v, int c)
        {
            return (v << c) | (v >> (32 - c));
        }

        private static uint Add(uint v, uint w)
        {
            return unchecked(v + w);
        }

        private static uint AddOne(uint v)
        {
            return unchecked(v + 1);
        }

        private void Hash(byte[] output, uint[] input)
        {
            uint[] state = (uint[])input.Clone();

            for (int round = 20; round > 0; round -= 2)                         // 20 round Salsa implementation
            {
                state[4] ^= Rotate(Add(state[0], state[12]), 7);
                state[8] ^= Rotate(Add(state[4], state[0]), 9);
                state[12] ^= Rotate(Add(state[8], state[4]), 13);
                state[0] ^= Rotate(Add(state[12], state[8]), 18);
                state[9] ^= Rotate(Add(state[5], state[1]), 7);
                state[13] ^= Rotate(Add(state[9], state[5]), 9);
                state[1] ^= Rotate(Add(state[13], state[9]), 13);
                state[5] ^= Rotate(Add(state[1], state[13]), 18);
                state[14] ^= Rotate(Add(state[10], state[6]), 7);
                state[2] ^= Rotate(Add(state[14], state[10]), 9);
                state[6] ^= Rotate(Add(state[2], state[14]), 13);
                state[10] ^= Rotate(Add(state[6], state[2]), 18);
                state[3] ^= Rotate(Add(state[15], state[11]), 7);
                state[7] ^= Rotate(Add(state[3], state[15]), 9);
                state[11] ^= Rotate(Add(state[7], state[3]), 13);
                state[15] ^= Rotate(Add(state[11], state[7]), 18);
                state[1] ^= Rotate(Add(state[0], state[3]), 7);
                state[2] ^= Rotate(Add(state[1], state[0]), 9);
                state[3] ^= Rotate(Add(state[2], state[1]), 13);
                state[0] ^= Rotate(Add(state[3], state[2]), 18);
                state[6] ^= Rotate(Add(state[5], state[4]), 7);
                state[7] ^= Rotate(Add(state[6], state[5]), 9);
                state[4] ^= Rotate(Add(state[7], state[6]), 13);
                state[5] ^= Rotate(Add(state[4], state[7]), 18);
                state[11] ^= Rotate(Add(state[10], state[9]), 7);
                state[8] ^= Rotate(Add(state[11], state[10]), 9);
                state[9] ^= Rotate(Add(state[8], state[11]), 13);
                state[10] ^= Rotate(Add(state[9], state[8]), 18);
                state[12] ^= Rotate(Add(state[15], state[14]), 7);
                state[13] ^= Rotate(Add(state[12], state[15]), 9);
                state[14] ^= Rotate(Add(state[13], state[12]), 13);
                state[15] ^= Rotate(Add(state[14], state[13]), 18);
            }

            for (int index = 0; index < 16; index++)
                ToBytes(Add(state[index], input[index]), output, 4 * index);
        }


        uint ToUInt32(byte[] input, int inputOffset)
        {
            return unchecked((uint)(((input[inputOffset] | (input[inputOffset + 1] << 8)) | (input[inputOffset + 2] << 16)) | (input[inputOffset + 3] << 24)));
        }


        void Initialize(byte[] key, byte[] iv)
        {
            // Key is 16 byte key
            // IV is 8 byte IV

//            state = new uint[16];
            m_state[1] = ToUInt32(key, 0);
            m_state[2] = ToUInt32(key, 4);
            m_state[3] = ToUInt32(key, 8);
            m_state[4] = ToUInt32(key, 12);

            byte[] constants = key.Length == 32 ? c_sigma : c_tau;
            int keyIndex = key.Length - 16;

            m_state[11] = ToUInt32(key, keyIndex + 0);
            m_state[12] = ToUInt32(key, keyIndex + 4);
            m_state[13] = ToUInt32(key, keyIndex + 8);
            m_state[14] = ToUInt32(key, keyIndex + 12);
            m_state[0] = ToUInt32(constants, 0);
            m_state[5] = ToUInt32(constants, 4);
            m_state[10] = ToUInt32(constants, 8);
            m_state[15] = ToUInt32(constants, 12);

            m_state[6] = ToUInt32(iv, 0);
            m_state[7] = ToUInt32(iv, 4);
            m_state[8] = 0;
            m_state[9] = 0;
        }


        void ToBytes(uint input, byte[] output, int outputOffset)
        {
            unchecked
            {
                output[outputOffset] = (byte)input;
                output[outputOffset + 1] = (byte)(input >> 8);
                output[outputOffset + 2] = (byte)(input >> 16);
                output[outputOffset + 3] = (byte)(input >> 24);
            }
        }


        static readonly byte[] c_sigma = Encoding.ASCII.GetBytes("expand 32-byte k");
        static readonly byte[] c_tau = Encoding.ASCII.GetBytes("expand 16-byte k");



        #endregion

        #region FGP6 RNG_Utilities

        //========================================================================================================================================
        //  RNG UTILITIES    RNG UTILITIES    RNG UTILITIES    RNG UTILITIES
        //========================================================================================================================================
        // 1    OVERVIEW - Random number generation utilities
        // 
        // Random numbers are the key of any cryptographic process either for the session key or as part of the encryption process
        // Computers are regarded as poor random number generators as the computational outcome is deterministic
        // To acheive randomness, we must add unique entropy.  Fortunately, some processes in a PC have no-deterministic outcomes
        //
        // Ideally we would use a hardware device with an analog to digital converter such as a camera or microphone
        // Analog conversion always has a small error, particularly when converting the last bit of an analog signal into a digital form
        // Bit rattle (the last bit of data flickering) is the bane of numeric display devices, however, when used carefully it is an ideal source of entropy for a random number generator
        // Think of it as the almost inaudible hiss on an audio channel or the far field noise of a neutral background on a digital video
        // If we use this noise alone, we can harvest considerable entropy from a deterministic PC
        // FGP does not use these entropy sources yet, but it is a possible enhancement.                                                    //AL note is this still true???
        // FGP uses CPU load, RAM usage and mouse position changes for unique entropy, hashed to ensure statistical randomness
        //
        // 2    SECURITY - Ensuring random number security
        // Normally a cryptographically secure random number generator (CSRNG) such as this one provided by the .NET RNGCryptoServiceProvider is considered sufficient
        // FGP starts from the assumption that the .NET CSRNG is compromised to powerful hackers and ensures the randomn numbers we use are uncompromised
        // We add additional protection from good pseudo random number generators, unique entropy and shuffle the result with the Fisher-Yates shuffle algorithm
        // We use 4 different random number generators:
        //      Random1 is the cryptographically secure random number source from the .NET framework
        //      Random2 is a BBS algorithm with a weak 32 bit IV
        //      Random3 is a Salsa20 implementation with a strong 384 bit IV
        //      Random4 is and entropy RNG that takes some PC and user entropy and creates an entropy pool
        //      Random9 is a random choice of one of the above 4 random sources chosen by the cryptographically secure random number source from the .NET framework
        // Each of these algorithms in turn shuffles a 256 byte permutation of each number from 0 - 255
        // The entropy shuffle is early in the process and the result is further shuffled by the cryptographically secure RNG at the end
        // The shuffle used is a Fisher-Yates shuffle which with a random soruce will perfectly shuffle an array of numbers
        // The Fisher-Yates algorithm here is lossy, about 25% of the random input is necessarily discarded in order to eliminate statistical bias
        // Fisher-Yates shuffle is described in Wikipedia and the requirement to discarding of some source randomness is clear from examination of this implementation
        // The 5-deep shuffle is lossy - it uses 5 times more randomly sourced numbers than the output generates
        // As the array is lossy, insufficient information is in the output to reveal the source random numbers in order to predict future numbers in the sequence
        // The unique entropy RNG (Random4) is critical to ensure that the output is unpredictable even if the other 3 random number generators are compromised
        //
        // 3    OPERATION - How we generate good random numbers from a compromised source
        // This is done in the TRN Genration region below this
        // We generate many rows of shuffled 256 byte permutations
        // Taking a vertical column down the matrix of shuffled permutations will by definition produce a statistically random stream of numbers
        // Each row contains the numbers 0 - 255 in a random order so there is no possibility of statistical bias
        // For this reason we do not use every number in each row as that could lead to the revelation of the final column and by regression every column prior to it
        // We use only 1/16 of the shuffled matrix before discarding it and generating a new one
        //
        // 4    TESTING - Verifying that the numbers are indeed random
        // The output from this random number generation algorithm has been extensively tested using the Diehard battery of 15 tests
        // The Diehard test battery requires about 10MB of random numbers and performs 15 sophisticated statistical tests for non-randomness
        // The Diehard tests are very good at picking up seemingly unobvious patterns in apparently random data
        // As an example the rows of random permutations described in OPERATION look random - each row contains only the numbers 0 - 255 in a random order
        // Unselected data in this format, however, fails the Diehard test, as it should
        // FGP generated random numbers are indistinguishable from random to the Diehard battery of tests
        // By definition it should be true that ciphertext generated by FGP is indistinguishable from random to the Diehard tests and this has also been verified to be the true 

        
        private static RNGCryptoServiceProvider rngCsp = new RNGCryptoServiceProvider();

        //========================================================================================================================================
        //  RANDOM 1 TRUE    RANDOM 1 TRUE    RANDOM 1 TRUE    RANDOM 1 TRUE 
        private byte GetRandom1()                                               // Get a random byte Csp
        {
            // Function:    TRUE random number generator - use the .Net Cryptographically secure random number generator
            // Inputs:      None
            // Outputs:     Random output bytes supplied byte by byte from a block of 256 bytes
            // TTD:         
            // SECURITY:    We don't rely on these random numbers entirely.  We assume this TRNG may be compromised

            // TRUE random number generator
            if (random1_index <= 0)
            {
                rngCsp.GetBytes(random1_array);                                 // Get a block of 256 random numbers
                random1_index = 255;
            }

            random_count1++;

#if STATISTICS            
            if (last_1 == random1_array[random1_index]) doublet_count_1 ++;
            last_1 = random1_array[random1_index];
#endif

            return random1_array[random1_index--];
        }


        
        
        /*
        typedef unsigned uint32_t;  // Or use <stdint.h> if available
        uint32_t x, y, z;
 
        void Seed2CmrRsr(uint32_t seed) {
           x = (seed >> 16)    + 4125832013u; // Upper 16 bits + offset
           y = (seed & 0xffff) +  814584116u; // Lower 16 bits + offset
           z = 542;
        }
 
        uint32_t Rand2CmrRsr() {  // Combined period = 2^81.95
           x *=  255519323u; x = rotl(x,13); // CMR, period = 4294785923 (prime)
           y *= 3166389663u; y = rotl(y,17); // CMR, period = 4294315741 (prime)
           z -= rotl(z,11);  z = rotl(z,27); // RSR, period = 253691 = 2^3*3^2*71*557
           return x ^ y ^ z;
        }
        */
        //========================================================================================================================================
        //  PRNG 2A FUNCTIONS    PRNG 2A FUNCTIONS    PRNG 2A FUNCTIONS    PRNG 2A FUNCTIONS 
        private void Seed2CmrRsr(uint seed)
        {
            x = (seed >> 16) + 4125832013u; // Upper 16 bits + offset
            y = (seed & 0x0000FFFFu) + 814584116u; // Lower 16 bits + offset
            z = 542u;
        }

        private uint Rand2CmrRsr()
        {  // Combined period = 2^81.95
            x *= 255519323u; x = ((x >> 19) | (x << 13));                    // CMR, period = 4294785923 (prime)
            y *= 3166389663u; y = ((y >> 15) | (y << 17));                    // CMR, period = 4294315741 (prime)
            z -= ((z >> 21) | (z << 11)); z = ((z >> 5) | (z << 27));       // RSR, period = 253691 = 2^3*3^2*71*557
            return x ^ y ^ z;
        }


        //========================================================================================================================================
        //  PRNG 2B FUNCTIONS    PRNG 2B FUNCTIONS    PRNG 2B FUNCTIONS    PRNG 2B FUNCTIONS 
        private void Seed2CmrRsr_B(uint seed)
        {
            a = (seed >> 16) + 4125832013u; // Upper 16 bits + offset
            b = (seed & 0x0000FFFFu) + 814584116u; // Lower 16 bits + offset
            c = 542u;
        }

        private uint Rand2CmrRsr_B()
        {  // Combined period = 2^81.95
            a *= 255519323u; a = ((a >> 19) | (a << 13));                       // CMR, period = 4294785923 (prime)
            b *= 3166389663u; b = ((b >> 15) | (b << 17));                      // CMR, period = 4294315741 (prime)
            c -= ((c >> 21) | (c << 11)); c = ((c >> 5) | (c << 27));           // RSR, period = 253691 = 2^3*3^2*71*557
            return a ^ b ^ c;
        }


        //========================================================================================================================================
        //  RANDOM 2 PSEUDO    RANDOM 2 PSEUDO    RANDOM 2 PSEUDO    RANDOM 2 PSEUDO    
        private byte GetRandom2()                                               // Get a random byte from Rand2CmrRsr (PRNG)
        {
            // Function:    Pseudo random number generator - uses a BBS algorithm with a weak 32 bit IV
            // Inputs:      None
            // Outputs:     Pseudo random output bytes supplied byte by byte from a long word
            // TTD:         
            // SECURITY:    We don't rely on these pseudo-random numbers.  They just add to the mix in the shuffle step
            
            byte returnval = 0;

            switch (counter)
            {
                case 0: random2 = Rand2CmrRsr();
                    returnval = (byte)((random2 >> 24) & 0x000000FFL);          // MSB random digit
                    break;

                case 1: returnval = (byte)((random2 >> 16) & 0x000000FFL);      // MSB- random digit
                    break;

                case 2: returnval = (byte)((random2 >> 8) & 0x000000FFL);       // LSB+ random digit
                    break;

                case 3: returnval = (byte)(random2 & 0x000000FFL);              // LSB random digit
                    break;
            }

            counter++;
            if (counter >= 4) counter = 0;

            random_count2++;

#if STATISTICS            
            if (last_2 == returnval) doublet_count_2++;
            last_2 = returnval;
#endif

            return returnval;
        }


        
        //========================================================================================================================================
        //  RANDOM 3 SALSA PRNG    RANDOM 3 SALSA PRNG    RANDOM 3 SALSA PRNG    RANDOM 3 SALSA PRNG    
        private byte GetRandom3()                                               
        {
            // Function:    Pseudo random number generator - uses a Salsa20 algorithm with a strong 24 byte IV
            //              Get a random byte from the Salsa20 PRNG in blocks of 64 bytes
            // Inputs:      IV
            // Outputs:     Pseudo random output bytes supplied byte by byte from a block of 64 bytes
            // TTD:         
            // TESTED:      19/10/2014 - drops item 0 but it doesn't matter
            // SECURITY:    We don't completely rely on these pseudo-random numbers.  They just add to the mix in the shuffle step


            if (random3_index <= 0)
            {
                FGP_GetSalsaBlock();                                            // Get a block of 64 random numbers

                for (int i = 0; i < 64; i++)                                    // Copy the Salsa20 output block
                    random3_array[i] = salsa20_output[i];

                random3_index = 63;
                //FGP_DebugLine("random3_array ", random3_array);
            }

            random_count3 ++;

#if STATISTICS            
            if (last_3 == random1_array[random3_index]) doublet_count_3 ++;
            last_3 = random1_array[random3_index];
#endif

            return random3_array[random3_index--];
        }



        //========================================================================================================================================
        //  ENTROPY ERNG 4    ENTROPY ERNG 4    ENTROPY ERNG 4    ENTROPY ERNG 4    
        //========================================================================================================================================
        //  ERNG 4 ENTROPY FUNCTIONS    ERNG 4 ENTROPY FUNCTIONS    ERNG 4 ENTROPY FUNCTIONS    ERNG 4 ENTROPY FUNCTIONS 

        Process currentProcess = System.Diagnostics.Process.GetCurrentProcess();
        PerformanceCounter cpuCounter = new PerformanceCounter("Processor", "% Processor Time", "_Total");
        PerformanceCounter ramCounter = new PerformanceCounter("Memory", "Available KBytes");

        private byte get_X_entropy()
        {
            // Function:   Get the position of the X co-ordinate of the mouse cursor
            // Inputs:      system processes
            // Outputs:   a byte entropy source
            // TTD:      

//            int XX = Cursor.Position.X;

//            Debug.WriteLine("X: " + XX.ToString("D"));
            return (byte)(Cursor.Position.X);                                   // Already contains 10 bits of useable entropy
        }



        private byte get_Y_entropy()
        {
            // Function:   Get the position of the Y co-ordinate of the mouse cursor
            // Inputs:      system processes
            // Outputs:   a byte entropy source
            // TTD:     

//            int YY = Cursor.Position.Y;// DEBUG

//            Debug.WriteLine("Y: " + YY.ToString("D"));
            return (byte)(Cursor.Position.Y);                                   // Already contains 10 bits of useable entropy
        }



        private byte get_RAM_entropy()
        {
            // Function:    Get the last 8 bits of RAM allocation (allocated in 4K blocks so get KB/4)
            // Inputs:      system processes
            // Outputs:     256 bytes entropy source
            // TTD:      

            byte returnval = 0x55;

            try
            {
                returnval = (byte)((ramCounter.RawValue / 256 + ramCounter.RawValue) / 4);  // Scale so we get the maximum entropy from this value
            }
            catch (Exception _exception)
            {
                Debug.WriteLine(_exception.ToString());
//              addMessage("Rebuild registry to get more entropy.");  //TESTONLY
                //TODO: Catches should really be handled, this would mean byte is 0x55 if catch LS
            }

            return returnval;
        }



        private byte get_CPU_entropy()
        {
            // Function:    Get the CPU time
            // Inputs:      system processes
            // Outputs:     256 bytes entropy source
            // TTD: 

            byte returnval = 0xAA;

            try
            {
                float CPU_time = cpuCounter.NextValue();
                returnval = (byte)(CPU_time * 1000000 + CPU_time * 3906);   // Scale x 1E6 so we get use all the small digits.  3906 = 1000000 / 256 to maximise use of data
            }
            catch (Exception _exception)
            {
                Debug.WriteLine(_exception.ToString());
//              addMessage("Rebuild registry to get more entropy.");  //TESTONLY
            }

            return returnval;
        }



        void FGP_Rehash_Entropy()
        {
            // Function:    Rehash the entropy block before reuse
            // Inputs:      None
            // Outputs:     Complete block of entropy rehashed
            // TTD:         We could rehash across the whole block but this would dilute entropy at the start of the block where we have good entropy

           for (int i = 0; i < (FGP_POOL_SIZE_64K / 32); i++)                   // Rehash all 2048 blocks of pool
           {
               for (int j = 0; j < 32; j ++ ) entropy_hash[j] = entropy_pool[i * 32 + j];   // Extract pool block
               entropy_hash[GetRandom1() / 8] ^= GetRandom1();                              // XOR in some new randomness
               entropy_hash[GetRandom1() / 8] ^= GetRandom1();                              // XOR in some more new randomness
               entropy_hash[GetRandom1() / 8] ^= entropy_pool[GetRandom1() * GetRandom1()]; // XOR in a byte randomly selected form the pool
               entropy_hash[GetRandom1() / 8] ^= entropy_pool[GetRandom1() * GetRandom1()]; // XOR in another byte randomly selected form the pool
               entropy_hash = Get_SHA256_bytes(entropy_hash);                               // Hash this block of the pool
               for (int j = 0; j < 32; j ++ ) entropy_pool[i * 32 + j] = entropy_hash[j];   // Re-insert pool block
           }
        }



        void FGP_Get_Entropy()
        {
            // Function:    Get some entropy from CPU, RAM and mouse co-ordinates
            // Inputs:      PC entropy
            // Outputs:     1 byte of entropy hashed to 32 bytes
            // TTD:    

            byte RAM_entropy = get_RAM_entropy();
            byte CPU_entropy = get_CPU_entropy();
            byte X_entropy = get_X_entropy();
            byte Y_entropy = get_Y_entropy();

            if ((RAM_entropy != Last_RAM_entropy) || (CPU_entropy != Last_CPU_entropy)) // Something has changed - we have a new entropy value
            {
                entropy_hash[GetRandom1() / 8] ^= (byte)(RAM_entropy ^ CPU_entropy);    // XOR the XORed bytes into the entropy hash in a random location
                entropy_hash[GetRandom1() / 8] ^= (byte)(RAM_entropy + CPU_entropy);    // XOR the ADDed bytes into the entropy hash in another random location
                // Tested 6/2/2015  Gives a reasonable random distribution, some repeats after gaps
                entropy_hash = Get_SHA256_bytes(entropy_hash);                          // Hash it

                for (int i = 0; i < 32; i++) entropy_pool[entropy_pointer++] ^= entropy_hash[i];    // XOR the hash into the entropy pool

                if (entropy_pointer > (FGP_POOL_SIZE_64K - 32)) entropy_pointer = 0;
                if (entropy_pointer > max_entropy_pointer) max_entropy_pointer = entropy_pointer;

//                Debug.WriteLine("Entropy pointer: " + entropy_pointer.ToString("D6") + "    Entropy: " + (RAM_entropy ^ CPU_entropy).ToString("D3"));//TESTONLY
            }

            if ((X_entropy != Last_X_entropy) || (Y_entropy != Last_Y_entropy))         // Something has changed - we have a new entropy value from the mouse
            {
                entropy_hash[GetRandom1() / 8] ^= (byte)(X_entropy ^ Y_entropy);        // XOR the XORed bytes into the entropy hash in a random location
                entropy_hash[GetRandom1() / 8] ^= (byte)(X_entropy + X_entropy);        // XOR the ADDed bytes into the entropy hash in another random location
                // UnTested 7/2/2015  Can get stuck but we are alternating blocks with more variable entropy values from CPU and RAM
                entropy_hash = Get_SHA256_bytes(entropy_hash);                          // Hash it

                for (int i = 0; i < 32; i++) entropy_pool[entropy_pointer++] ^= entropy_hash[i];    // XOR the hash into the entropy pool
                
                if (entropy_pointer > (FGP_POOL_SIZE_64K - 32)) entropy_pointer = 0;
                if (entropy_pointer > max_entropy_pointer) max_entropy_pointer = entropy_pointer;

//                Debug.WriteLine("Entropy pointer: " + entropy_pointer.ToString("D6") + "    XYEntropy: " + (X_entropy ^ Y_entropy).ToString("D3"));//TESTONLY
            }

            Last_RAM_entropy = RAM_entropy;
            Last_CPU_entropy = CPU_entropy;
            Last_X_entropy = X_entropy;
            Last_Y_entropy = Y_entropy;
        }



        private byte GetRandom4()                         // Get a random byte CPU usage and RAM usage data
        {
            // Function:    Get some genuine PC entropy from CPU, RAM and mouse co-ordinates
            // Inputs:      PC entropy, mouse position entropy
            // Outputs:     1 byte of entropy drawn down from a hash of input entropy.  Poor entropy is hashed from an entropy pool to provide some genuine entropy to the mix
            // TTD:         
            // TESTED:      
            // SECURITY:    This RNG is the critical step to guarantee that the random numbers we generate are random, unique and irreproducible

            byte byteout;

            random4_index++;

            if (entropy_read < max_entropy_pointer)
            {
                byteout = entropy_pool[entropy_read++];
            }
            else
            {
                FGP_Get_Entropy();                                              // Get a bit more entropy - we can't run this too often or there is no new entropy
                FGP_Rehash_Entropy();                                           // Rehash the entropy pool so it is different from the used version

//                Debug.WriteLine("Ewrite: " + entropy_pointer.ToString("D6") + "    Eread: " + entropy_read.ToString("D3") + "    MaxEP: " + max_entropy_pointer.ToString("D3") + "    VALUE: " + entropy_pool[entropy_read].ToString("D3") + "    byte count: " + random4_index.ToString("D3")); //TESTONLY

                entropy_read = 0;                                               // Entropy used up - go back to the beginning
                byteout = entropy_pool[entropy_read++];
            }


            if (entropy_read >= FGP_POOL_SIZE_64K)                              // Maximum pool size
            {
                entropy_read = 0;             // Back to the start
            }

            random_count4++;

            return byteout;
        }



        //========================================================================================================================================
        //  RANDOM 9 MIXED    RANDOM 9 MIXED    RANDOM 9 MIXED    RANDOM 9 MIXED    
        private byte GetRandom9()                                               // Get a random byte randomly chosen from one of the 3 random sources
        {
            // Function:    Get a randomly selected random number from one of the 4 random sources 
            // Inputs:      None
            // Outputs:     Genuine random output byte from a random pick of one of the 4 random sources: TRN, BBS, Salsa20, PC entropy
            // TTD:         
            // SECURITY:    We do rely on these random numbers

            // Get a randomly selected random number from one of the 4 random sources
            byte random = GetRandom1();

            switch (GetRandom1() / 64)                                          // 0 - 3
            {
                case 0: random = GetRandom1(); break;
                case 1: random = GetRandom2(); break;
                case 2: random = GetRandom3(); break;
                case 3: random = GetRandom4(); break;
            }   

            random_count9++;
            return random;
        }


        
        //========================================================================================================================================
        private byte GetRandomLimit(int limit, int type)
        {
            // Function:    Get a random number bounded (0 <= random <= limit) 
            //              FY shuffle requires a number randomly distributed over (0 - limit)
            //              We discard bits until the range is >= limit
            //              We discard any numbers outside the (0 - limit) range
            //              We must discard these numbers or the output shuffle will not be random - this step is not optional!! 
            // Inputs:      Limit, type of random number to use
            // Outputs:     Get a random number bounded by the limit variable - FY shuffle requires a random number from (0 - n)
            // TTD:         
            // SECURITY:    We do rely on the random distribution over (0 <= random <= limit)

            byte random = 0;

            do
            {
                switch (type)
                {
                    case 1: random = GetRandom1(); break;                       // 0 <= random <= 255   True RNG
                    case 2: random = GetRandom2(); break;                       // 0 <= random <= 255   Pseudo RNG A
                    case 3: random = GetRandom3(); break;                       // 0 <= random <= 255   Salsa20 PRNG
                    case 4: random = GetRandom4(); break;                       // 0 <= random <= 255   Entropy RNG
//                    case 5: random = GetRandom5(); break;                       // 0 <= random <= 255   Pseudo RNG B
                    case 9: random = GetRandom9(); break;                       // 0 <= random <= 255   Mixed RNG

                    default: addMessage("RNG generation error: " + type.ToString()); break;
                }
                if (limit < 128) random /= 2;                                   // 0 <= random <= 127
                if (limit < 64) random /= 2;                                    // 0 <= random <= 63
                if (limit < 32) random /= 2;                                    // 0 <= random <= 31
                if (limit < 16) random /= 2;                                    // 0 <= random <= 15
                if (limit < 8) random /= 2;                                     // 0 <= random <= 7
                if (limit < 4) random /= 2;                                     // 0 <= random <= 3
                if (limit < 2) random /= 2;                                     // 0 <= random <= 1
            } while (random > limit);                                           // Discard all values outside the limit to avoid any statistical bias - this is not optional!!

            return (byte)random;
        }



        //========================================================================================================================================
        private void FisherYatesShuffle(byte[] array, int size, int type)
        {
            // Function:    Shuffle array[size] using the Fisher-Yates shuffle
            //              If the random distribution is good, the FY shuffle will completely and randomly shuffle the permutation array without bias
            //              We shuffle each line of the array repeatedly with each of the 4 random number sources
            //              We are adding some genuine entropy from the PC to the shuffle
            //              The output permutation will be unpredictable even if some of the source random generators are compromised
            // Inputs:      Array to be shuffled, size, type of random numbers to use
            // Outputs:     Shuffled array
            // TTD:         
            // SECURITY:    The FY shuffle is crucial to good random number generation
            //              Multiple shuffles obscure the source random numbers - less information comes out of multiple shuffles than went in so this process is irreversible
            
            // Shuffle specified row of the key array
            // Shuffles an array of n elements (indices 0..n-1)
            // Size = n - 1
            // For i from n − 1 downto 1 do
            // J ← random integer with 0 ≤ j ≤ i
            // Exchange a[j] and a[i]
            int i;
            int random;
            byte temp;

            for (i = size; i > 0; i--)
            {
                random = GetRandomLimit(i, type);
                temp = array[random];
                array[random] = array[i];
                array[i] = temp;
            }
        }


//========================================================================================================================================
//  HASH    HASH    HASH    HASH    bytes
        private byte[] Get_SHA256_bytes(byte[] hash_in)
        {
            SHA256Managed hashString = new SHA256Managed();

            return hashString.ComputeHash(hash_in);
        }

        private byte[] Get_SHA512_bytes(byte[] hash_in)
        {
            SHA512Managed hashString = new SHA512Managed();

            return hashString.ComputeHash(hash_in);
        }

        #endregion

        #region FGP7_TRN_Generation

        //========================================================================================================================================
        //    CREATE TRN array of 16 x 256 bytes

        private void FGP2_Generate_TRN()
        {
            // Function:    Generate 16 x 256 bytes of True Random Numbers (TRNs)
            //              We generate far more numbers than we need and only use 1/16 of them to preclude revealing the entire random matrix
            // Inputs:      All RNGs
            // Outputs:     Array of 256 rows x 256 random numbers - we use just 16 passes to minimise CPU overhead then a full resync, random Salsa20 reinit etc
            // TTD:         
            // SECURITY:    This function is the key to good random number generation independent of compromised source (pseudo-)random generators
            //              The function is a time consuming, lossy, multiple-sourced random number generator
            //              Output numbers pass the Diehard battery of 15 randomness tests as well as long term statitical randomness checks


            byte[] line256 = new byte[256];                                     // Vector used for key generation
            uint seed = 0;

            if (TRN_reuse == 0)
            {
                random_count1 = 0;                                              // Reset all the counters
                random_count2 = 0;
                random_count3 = 0;
                random_count4 = 0;
                random_count9 = 0;

                //  KEY LINE    KEY LINE    KEY LINE    KEY LINE
                // Generate the TRN start point for the first key array line

                FisherYatesShuffle(init_line, 31, 1);                           // Shuffle it for creating this key

                for (int i = 0; i < 32; i++)
                {
                    for (int j = 0; j < 8; j++)
                    {
                        line256[i * 8 + j] = startline[init_line[i], j];        // Get a fixed random start point
                    }
                }


                // TRN seed the PRNG
                seed = (uint)GetRandom1() + (uint)(GetRandom1() << 24) + (uint)(GetRandom1() << 16) + (uint)(GetRandom1() << 8);
                Seed2CmrRsr(seed);                                              // Randomly seed the second PRNG
                counter = 0;                                                    // Reset the PRNG

                FGP_InitSalsa();                                                // Init Salsa with TRNs for TRN generation  WARNING - this will mess up block encryption if done during 16 block cycle


                // SECURITY:    This multiple shuffle is the key to generating genuine random numbers
                //              Even if several of the sources are compromised, the repeated shuffle including a shuffle with genuine entropy will obscure any pattern
                //              Information is lost with each shuffle so recovering the 6 random sources from the single shuffled output is not possible
                //              The cryptographically secure random number generators ensure statistically good random sources, Salsa20 and the BBS RNGs are also cryptographically secure
                //              Random numbers are taken from a vertical pass down the shuffled permutation arrays.  
                //              As each permutation contains the numbers 0 - 255 in a random order, it is not possible for there to be statistically significant biases in the output regardless of the input
                //              The entropy random number generator is a weak source of entropy, but combined with multiple irreversible shuffles, the result is unpredictable.

                for (int i = 0; i < FGP2_KEY_256; i++)                          // Single line shuffle and save to key file
                {
                    FisherYatesShuffle(line, 255, 1);                           // Shuffle the ordered array using TRUE RNG - Mix everything up first
                    FisherYatesShuffle(line, 255, 4);                           // Shuffle the ordered array using ENTROPY RNG - Entropy next so that the following shuffles can't be unpicked
                    FisherYatesShuffle(line, 255, 2);                           // Shuffle the ordered array using PSEUDO RNG
                    FisherYatesShuffle(line, 255, 3);                           // Shuffle the ordered array using SALSA20 PRNG
                    FisherYatesShuffle(line, 255, 9);                           // Shuffle the ordered array using MIXED RNG

                    FisherYatesShuffle(line, 255, 1);                           // Shuffle the ordered array again using TRNG

                    for (int j = 0; j < 256; j++)
                    {
                        key[(i * 256) + j] = line256[j];                        // Load key to RAM 576 lines of 256 bytes (144 Kbytes)
                        //Debug.Write("0x" + line[j].ToString("X2") + ", ");      // For new FRN arrays
                    }
                }

                TRN_reuse = 16;                                                 // Use this block up to 16 times to generate more TRNs - less demanding on the sparse entropy we do collect

#if STATISTICS
                Debug.WriteLine("Random1: " + random_count1.ToString() + "    Random2: " + random_count2.ToString() + "    Random3: " + random_count3.ToString() + "    Random4: " + random_count4.ToString() + "    Random5: " + random_count5.ToString() + "    Random9: " + random_count9.ToString());
#endif
            }
            for (int i = 0; i < 256; i++) line256[i] = 0;                       // Clear all traces of key generation from RAM


            // Get one TRN block of 256 bytes now - the last 64 bytes are used for Salsa init
            for (int j = 0; j < FGP2_KEY_256; j++)                              // Go through 256 lines of the 64 kByte key
            {
                FGP2_TRNs[j] = key[j * 256 + GetRandom1()];                     // Randomly pick one value (1/256) from each line of key - the rest (240/256) are discarded 
            }


            TRN_reuse--;
            if (TRN_reuse == 0)
                for (int i = 0; i < FGP2_KEY_256 * 256; i++) key[i] = 0;        // Clear raw key[] RAM so no trace remains
        }



        //========================================================================================================================================
        #endregion

        #region FGP8 Fake_message
        //========================================================================================================================================
        // FGP2 Fake a block of encrypted text  

        // 1    OVERVIEW - Fake message
        // Since we have very good random number generators, why not use them to generate snow - random numbers that are not a message, but entirely meaningless
        // It will give a determined hacker something to waste their time on, lots of time, as there is nothing to find in a fake message
        // The receiver does need to know that some messages could be fake and can be discarded
        //
        // 2    SECURITY - Ensuring we don't leak information
        // We do not use the password or any other data used in the cryptographic engines to generate a fake message
        // It is just a bunch of random numbers
        //
        // 3    OPERATION
        // The fake message uses the very good random number generators to generate a fake message of random length
        // It looks identical to a real FGP message but has no content and will not decrypt
        // For one-time pad afficionados, the random numbers produced by these routines are good enough to be used for a one-time pad
        //
        // 4    TESTING
        // Fake messages pass the Diehard battery of 15 randomness tests
        // See the RNG_Utilities TESTING for a fuller description

        private void FGP2_Fake_Message()
        {
            // Function:    Generate a fake random message of random length between 260 and 4085 bytes
            // Inputs:      Random numbers
            // Outputs:     Fake message to output stream
            // TTD:      

            int length = 260 + GetRandom1() + GetRandom1() * 14;
            int block_length = 256;
            long percentage;


            // Now send the fake encrypted message
            for (int i = 0; i <= (length / 256); i++)                           // Send fake encrypted message key
            {
                FGP2_Generate_TRN();                                            // Get a block of 256 TRNs - will create a new block as required

                percentage = 2 + (long)((98 * (i + 1) * 256 / (1 + length)));   // Message generation progress
                if (percentage > 100) percentage = 100;                         // Prevent errors
                encryptFileProgressBar.Value = (int)percentage;
                
                if (i == (length / 256)) block_length = length % 256;

                for (int j = 0; j < block_length; j++)
                {
                    //FGP2_TRNs
                    if (encryptFileMode)
                        saveEncryptFileWriter.Write(FGP2_TRNs[j]);              // Output to file directly
                    else
                        printChar2(FGP2_TRNs[j].ToString("X2"));                // Print to textbox
                }
            }                                                                   // TESTED 24/5/2015  - Diehard test on 10MB file generated output 
        }

        #endregion

        #region Utilities

        //========================================================================================================================================
        //  UTILITIES    UTILITIES    UTILITIES    UTILITIES

        // 1    OVERVIEW - Utilities
        // User interface utilities - not part of the cryptographic design
        //
        // 2    SECURITY
        // The password is scrubbed after hashing
        //
        // 3    OPERATION
        //
        // 4    TESTING
        //

        private void FGP_ClearMessageProgress()
        {
            // Function:    Clear messages and progress bars
            // Inputs:      None
            // Outputs:     messageBox and progress bars cleared 

            messageBox.Items.Clear();                                           // Clear any messageBox errors
            encryptFileProgressBar.Value = 0;                                   // Clear progress bars
            decryptFileProgressBar.Value = 0;
        }



        private byte HexRead(char H, char L)
        {
            // Convert text hex to bytes


            byte temp;
            try
            {
                temp = Convert.ToByte(H.ToString(), 16);
                temp *= 16;
                temp += Convert.ToByte(L.ToString(), 16);
            }
            catch (ArgumentException e)
            {
                addMessage(e.Message);
                temp = 0;
            }
            catch (FormatException e2)
            {
                addMessage(e2.Message);
                temp = 0;
            }
            catch (OverflowException e3)
            {
                addMessage(e3.Message);
                temp = 0;
            }
            
            return (byte)temp;
        }


//========================================================================================================================================
//  GET PASSWORD    GET PASSWORD    GET PASSWORD    GET PASSWORD    
        private void FGP_GetPassWord()                                              // Password from user if we don't have it
        {
            // Function:    Get a password if one does not exist
            // Inputs:      User entered password
            // Outputs:     Password hash with password bytes scrubbed
            // TTD:         Add a button to allow user to re-enter password

            string Password;
            byte[] PasswordBytes = new byte[64];
            int length;
            
            uint seed = 0xC49A5441;     // Seed the PRNG - must be before the first hash - NOT based on password - we use the first non-random hash to generate a password dependent hash
            byte PickShuffle = 0x42;

            if (!PasswordEntered)
            {
                Password = CustomDialog.ShowPasswordDialog("Please enter message password", "Enter Password", "");

                if (!(Password.Length > 0))
                {
                    FGP_GetPassWord();
                    return;
                }

                // Seed the PRNG - must be before the first hash - NOT based on password
                Seed2CmrRsr(seed);                                              // Randomly seed the primary PRNG
                counter = 0;                                                    // Reset the PRNG

                length = Password.Length;
                if (length > 63) length = 63;                                   // Limit length to 64 bytes
#if EXPORT
                if (Password.Length > 8) length = 8;                            // Restrict length for export so we do not exceed 56 bits
#endif

                for (int i = 0; i < length; i++) PasswordBytes[i] = 0;          // Initialise the password byte array

                for (int i = 0; i < Password.Length; i++)
#if EXPORT
//                PasswordBytes[(byte)(i % length)] += (byte)Password[i];     // Copy the password, XOR to avoid exceeding 56 bits with an 8 character password
                PasswordBytes[(byte)(i % length)] = (byte)((Password[i] + PasswordBytes[(byte)(i % length)]) & 0x7F);     // Copy the password, XOR 0x7F to avoid exceeding 56 bits with an 8 character password
#else
                    PasswordBytes[(byte)(i % length)] += (byte)Password[i];     // Copy the password, adding to increase the bitspace usage
#endif

                Password = "123456789012345678901234567890123456789012345678901234567890123";                   // Scrub up to 64 bytes of raw Password here - leave no trace

                // XOR two bytes from the password for selecting:
                //      1 SALT and 
                //      2 SHUFFLE
                for (int i = 0; i < Password.Length; i++)
                {
                    PickShuffle ^= (byte)(PasswordBytes[i] + GetRandom2());	    // XOR the password for picking shuffle adding some PRNG to make sure we use all the available bitspace
                    switch (i % 4)                                              // Generate a new seed that is password dependent  TESTED 21/11/2014
                    {
                        case 0: seed ^= PickShuffle;                break;                  
                        case 1: seed ^= (uint)(PickShuffle << 8);   break;
                        case 2: seed ^= (uint)(PickShuffle << 16);  break;
                        case 3: seed ^= (uint)(PickShuffle << 24);  break;
                    }
                }

                Seed2CmrRsr(seed);                                              // Password dependent IV for the PRNG so that the initial sequence is different
                counter = 0;                                                    // Reset the PRNG

                // Get a first hash for seeding the PRNG based on password
                FGP2_Generate_ROOT_key(PasswordBytes, (byte)(PickShuffle), length); // Get a ROOT key
                PasswordEntered = true;

                for (int i = 0; i < length; i++) PasswordBytes[i] = 0;          // Scrub the password byte array - leave no trace
            }
        }



        //========================================================================================================================================
        //  BYTE-STRING CONVERSION    BYTE-STRING CONVERSION    BYTE-STRING CONVERSION    BYTE-STRING CONVERSION    
        static string GetString(byte[] bytes)
        {
            char[] chars = new char[bytes.Length / sizeof(char)];
            System.Buffer.BlockCopy(bytes, 0, chars, 0, bytes.Length);
            return new string(chars);
        }


        static byte[] GetBytes(string str)
        {
            byte[] bytes = new byte[str.Length * sizeof(char)];
            System.Buffer.BlockCopy(str.ToCharArray(), 0, bytes, 0, bytes.Length);
            return bytes;
        }
        

        #endregion

        #region Background Workers

        //================================================================================================================================
        // EVENT HANDLERS    EVENT HANDLERS    EVENT HANDLERS    EVENT HANDLERS  

        private void exportPadBackgroundWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            FGP_Get_Entropy();
        }


        private void exportPadBackgroundWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
        }


        private void exportPadBackgroundWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
        }


        void generateKeyBackgroundWorker_DoWork(object sender, DoWorkEventArgs e)
        {
        }


        void generateKeyBackgroundWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
        }


        void generateKeyBackgroundWorker_Completed(object sender, RunWorkerCompletedEventArgs e)
        {
        }



        #endregion

        #region Button Clicks


        //================================================================================================================================
        // Event handler when Fake message button is clicked
        private void FakeMessageButton_Click(object sender, EventArgs e)
        {
            encrypting = encrypting = true;                                     // Dummy to allow us to keep this flag

            FGP_ClearMessageProgress();                                         // Clear message and progress bars
            encryptFileProgressBar.Value = 2;                                   // Start the bar to show somthing is happening

            // Check that something is entered in the textbox

            // Clear the decrypt textbox
            decryptTextBox.Clear();

            try
            {
                // Call encrypt method
                FGP2_Fake_Message();
            }
            catch (Exception _exception)
            {
                Debug.WriteLine(_exception.ToString());
                addMessage("Error occurred during fake message generation.");
            }
            finally
            {
                if (saveEncryptFileWriter != null)
                {
                    saveEncryptFileWriter.Flush();
                    saveEncryptFileWriter.Close();
                    saveEncryptFileWriter = null;
                }
                encryptFileMode = false;
                openEncryptFileName = "";
                fileOpened.Text = "None";
            }
            encrypting = false;
        }



        //================================================================================================================================
        // Event handler when Encrypt button is clicked
        private void EncryptButton_Click(object sender, EventArgs e)
        {
            encrypting = encrypting = true;                                     // Dummy to allow us to keep this flag

            FGP_ClearMessageProgress();                                         // Clear message and progress bars
            encryptFileProgressBar.Value = 2;                                   // Start the bar to show somthing is happening

            // Check that something is entered in the textbox
            if (encryptTextBox.TextLength == 0)
            {
                addMessage("Please enter text or select file to encrypt.");
                return;
            }


            EncryptButton.Enabled = false;                                      // Do this after the error conditions to prevent the button remaining disabled

            // Clear the textbox
            decryptTextBox.Clear();
            decryptTextBox.Refresh();

            try
            {
                // Call encrypt method
                FGP_Encrypt();
            }
            catch (Exception _exception)
            {
                Debug.WriteLine(_exception.ToString());
                addMessage("Error occurred during encryption.");
            }
            finally
            {
                if (saveEncryptFileWriter != null)
                {
                    saveEncryptFileWriter.Flush();
                    saveEncryptFileWriter.Close();
                    saveEncryptFileWriter = null;
                }
                encryptFileMode = false;
                openEncryptFileName = "";
                // Reset text 
                fileOpened.Text = "None";
//                encryptFileProgressBar.Value = 0;
            }
            encrypting = false;
            EncryptButton.Enabled = true;
        }



        //================================================================================================================================
        private void DecryptButton_Click(object sender, EventArgs e)
        {
            encrypting = true;

            FGP_ClearMessageProgress();                                         // Clear message and progress bars
            decryptFileProgressBar.Value = 2;                                   // Start the bar to show somthing is happening

            
            // Check if there is something to decrypt
            // Check that something is entered in the textbox
            if (decryptTextBox.TextLength == 0)
            {
                addMessage("Please enter text or select file to decrypt.");
                return;
            }

            DecryptButton.Enabled = false;                                      // Do this after the error conditions to prevent the button remaining disabled

            
            // Clear the textbox
            encryptTextBox.Clear();
            encryptTextBox.Refresh();

            if (decryptFileMode) decryptTextBox.Clear();

            try
            {
                FGP_Decrypt();                                                  // Call decrypt method
            }
            catch (Exception _exception)
            {
                Debug.WriteLine(_exception.ToString());
                addMessage("Error occurred during decryption.");
            }
            finally
            {

                if (saveDecryptFileWriter != null)
                {
                    saveDecryptFileWriter.Flush();
                    saveDecryptFileWriter.Close();
                    saveDecryptFileWriter = null;
                }
                decryptFileMode = false;
                openDecryptFileName = "";
                fileOpened2.Text = "None";
            }
            encrypting = false;
            DecryptButton.Enabled = true;
        }



        //================================================================================================================================
        private void OpenEncryptFile_Click(object sender, EventArgs e)
        {
            string currentDirectory = Environment.CurrentDirectory;

            // Open file dialog
            OpenFileDialog fDialog = new OpenFileDialog();
            fDialog.Title = "Open File";
            fDialog.RestoreDirectory = true;                                    // Eestore the last opened directory
            fDialog.CheckFileExists = true;
            fDialog.CheckFileExists = true;
            fDialog.CheckPathExists = true;

            FGP_ClearMessageProgress();                                         // Clear message and progress bars
            encryptFileProgressBar.Value = 2;                                   // Start the bar to show somthing is happening

            // If file is selected
            if (fDialog.ShowDialog() == DialogResult.OK)
            {
                string filename = fDialog.FileName.ToString();
                fileOpened.Text = GetCompactedString(filename, fileOpened.Font, MAX_FILE_LABEL_WIDTH);

                // Set the file mode to true - encrypted file will be saved as a file
                encryptFileMode = true;
                openEncryptFileName = filename;

            }
            else
            {
                addMessage("File Encryption Cancelled");
                return;
            }

            encrypting = true;


            // Check if there is something to encrypt
            // If file is selected
            if (encryptFileMode)
            {
                // Check if filename is set
                if (openEncryptFileName.Length == 0)
                {
                    addMessage("File invalid.");
                    encryptFileMode = false;
                    fileOpened.Text = "None";
                    return;
                }
                // Check if file exists
                if (!File.Exists(openEncryptFileName))
                {
                    addMessage("File " + openEncryptFileName + " doesn't exist.");
                    encryptFileMode = false;
                    fileOpened.Text = "None";
                    return;
                }
                // Check if file contents are not empty
                if (new FileInfo(openEncryptFileName).Length == 0)
                {
                    addMessage("File " + openEncryptFileName + " is empty.");
                    encryptFileMode = false;
                    fileOpened.Text = "None";
                    return;
                }
            }
            else
            {
                // Otherwise check that something is entered in the textbox
                if (encryptTextBox.TextLength == 0)
                {
                    addMessage("Please enter text or select file to encrypt.");
                    return;
                }
            }


            // Do this after the error conditions to prevent the button remaining disabled
            encryptFileButton.Enabled = false;

            // Clear the textboxes
            decryptTextBox.Clear();
            if (encryptFileMode) encryptTextBox.Clear();

            try
            {
                // Call encrypt method
                FGP_Encrypt();
            }
            catch (Exception _exception)
            {
                Debug.WriteLine(_exception.ToString());
                addMessage("Error occurred during encryption.");
            }
            finally
            {
                if (saveEncryptFileWriter != null)
                {
                    saveEncryptFileWriter.Flush();
                    saveEncryptFileWriter.Close();
                    saveEncryptFileWriter = null;
                }
                encryptFileMode = false;
                openEncryptFileName = "";
                // Reset text 
                fileOpened.Text = "None";
//                encryptFileProgressBar.Value = 0;
            }
            encrypting = false;
            encryptFileButton.Enabled = true;

        }


        //================================================================================================================================
        private void OpenDecryptFile_Click(object sender, EventArgs e)
        {
            OpenFileDialog fDialog2 = new OpenFileDialog();
            fDialog2.Title = "Open File";
            fDialog2.RestoreDirectory = true;    // Restore the last opened directory
            fDialog2.CheckFileExists = true;
            fDialog2.CheckPathExists = true;
            fDialog2.Filter = "encrypt files (*.crp)|*.crp";

            FGP_ClearMessageProgress();                                         // Clear message and progress bars
            decryptFileProgressBar.Value = 2;                                   // Start the bar to show somthing is happening

            if (fDialog2.ShowDialog() == DialogResult.OK)
            {
                string filename = fDialog2.FileName.ToString();
                fileOpened2.Text = GetCompactedString(filename, fileOpened2.Font, MAX_FILE_LABEL_WIDTH);

                
                // Get the file name to save
                SaveFileDialog saveDecryptedFileDialog = new SaveFileDialog();
                saveDecryptedFileDialog.Title = "Save Decrypted File";
                saveDecryptedFileDialog.ShowDialog();

                if (saveDecryptedFileDialog.FileName != "")
                {
                    saveDecryptFileName = saveDecryptedFileDialog.FileName;
                }
                else
                {
                    // Abort if cancelled
                    return;
                }

                // Set the file mode to true - decrypted file will be saved as a file
                decryptFileMode = true;
                openDecryptFileName = filename;

            }
            else
            {
                // Abort if cancelled
                return;
            }

            encrypting = true;


            // Check if there is something to decrypt
            // If file is selected
            if (decryptFileMode)
            {
                // Check if filename is set
                if (openDecryptFileName.Length == 0)
                {
                    addMessage("File invalid.");
                    decryptFileMode = false;
                    fileOpened2.Text = "None";
                    return;
                }
                // Check if file exists
                if (!File.Exists(openDecryptFileName))
                {
                    addMessage("File " + openDecryptFileName + " doesn't exist.");
                    decryptFileMode = false;
                    fileOpened2.Text = "None";
                    return;
                }
                // Check if file contents are not empty
                if (new FileInfo(openDecryptFileName).Length == 0)
                {
                    addMessage("File " + openDecryptFileName + " is empty.");
                    decryptFileMode = false;
                    fileOpened2.Text = "None";
                    return;
                }
            }
            else
            {
                // Otherwise check that something is entered in the textbox
                if (decryptTextBox.TextLength == 0)
                {
                    addMessage("Please enter text or select file to decrypt.");
                    return;
                }
            }

            DecryptFileButton.Enabled = false;                                      // Do this after the error conditions to prevent the button remaining disabled


            // Clear the textbox
            encryptTextBox.Clear();
            if (decryptFileMode) decryptTextBox.Clear();

            try
            {
                FGP_Decrypt();                                                      // Call decrypt method
            }
            catch (Exception _exception)
            {
                Debug.WriteLine(_exception.ToString());
                addMessage("Error occurred during decryption.");
            }
            finally
            {

                if (saveDecryptFileWriter != null)
                {
                    saveDecryptFileWriter.Flush();
                    saveDecryptFileWriter.Close();
                    saveDecryptFileWriter = null;
                }
                decryptFileMode = false;
                openDecryptFileName = "";
                fileOpened2.Text = "None";
//                decryptFileProgressBar.Value = 0;
            }
            encrypting = false;
            DecryptFileButton.Enabled = true;
        }

        //================================================================================================================================
        // Button clicks

        private void clearEncryptBox_Click(object sender, EventArgs e)
        {
            FGP_ClearMessageProgress();                                         // Clear message and progress bars
            encryptTextBox.Clear();
        }


        private void copyEncryptBox_Click(object sender, EventArgs e)
        {
            FGP_ClearMessageProgress();                                         // Clear message and progress bars
            encryptTextBox.SelectAll();
            encryptTextBox.Copy();
        }


        private void pasteEncryptBox_Click(object sender, EventArgs e)
        {
            FGP_ClearMessageProgress();                                         // Clear message and progress bars
            encryptTextBox.Paste();
        }


        private void clearDecryptBox_Click(object sender, EventArgs e)
        {
            FGP_ClearMessageProgress();                                         // Clear message and progress bars
            decryptTextBox.Clear();
        }


        private void copyDecryptBox_Click(object sender, EventArgs e)
        {
            FGP_ClearMessageProgress();                                         // Clear message and progress bars
            decryptTextBox.SelectAll();
            decryptTextBox.Copy();
        }


        private void pasteDecryptBox_Click(object sender, EventArgs e)
        {
            FGP_ClearMessageProgress();                                         // Clear message and progress bars
            decryptTextBox.Paste();
        }


        private void NewPassword_Click(object sender, EventArgs e)
        {
            FGP_ClearMessageProgress();                                         // Clear message and progress bars
            PasswordEntered = false;
            FGP_GetPassWord();
        }


        private void timer1_Tick(object sender, EventArgs e)
        {
            try
            {
                exportPadBackgroundWorker.RunWorkerAsync();
            }
            catch (Exception _exception)
            {
                Debug.WriteLine(_exception.ToString());
                addMessage("Background task busy.");
            }
        }

       
        #endregion

        #region Menu 

        private void helpToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, "help.htm");
        }

        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            AboutBox1 about = new AboutBox1();
            about.Show();
        }

        private void licenseInfoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LicenseInfo licenseInfo = new LicenseInfo();
            licenseInfo.ShowDialog();
        }

        #endregion
   
    }
}


